{
  "address": "0xA1A0b2c84B978144517F7e168Fea919be8265507",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numLevels_",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "maxDepositAmount_",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "contract IAavePoolAddressProvider",
          "name": "aavePoolAddressProvider_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hasher_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "verifier2_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "verifier16_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InputNullifierAlreadySpent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "InputOutOfFieldSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExtDataHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMerkleRoot",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        }
      ],
      "name": "InvalidMerkleTreeDepth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicScaledAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTxProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MerkleTreeFull",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipientAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "CommitmentInserted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "NullifierUsed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_LEAF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePoolAddressProvider",
      "outputs": [
        {
          "internalType": "contract IAavePoolAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAaveNextLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAavePoolAndReserveData",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AaveReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentLiquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentVariableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentStableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint16",
              "name": "id",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "aTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "accruedToTreasury",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "unbacked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "isolationModeTotalDebt",
              "type": "uint128"
            }
          ],
          "internalType": "struct AaveReserveData",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAaveReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAaveScaledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deltaSec",
          "type": "uint256"
        }
      ],
      "name": "getAaveScaledAmountAdjusted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "scaledAmount",
          "type": "uint256"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TxType",
          "name": "txType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "extScaledAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaledFee",
          "type": "uint256"
        }
      ],
      "name": "getPublicScaledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxDepositAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLeafIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier16",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier2",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zeroes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xc810023a002c8319d24c306d54fa558f52407d7bed9c50feb29f6455e3fa6a12",
  "receipt": {
    "to": null,
    "from": "0x80630fBf405eD070F10c8fFE8E9A83C60736a770",
    "contractAddress": "0xA1A0b2c84B978144517F7e168Fea919be8265507",
    "transactionIndex": 68,
    "gasUsed": "5721634",
    "logsBloom": "0x
    "blockHash": "0x27aae6e8e533d078d6f5638db22d0af4c5a3e0752d6de425194399906c75221d",
    "transactionHash": "0xc810023a002c8319d24c306d54fa558f52407d7bed9c50feb29f6455e3fa6a12",
    "logs": [],
    "blockNumber": 8364537,
    "cumulativeGasUsed": "12690605",
    "status": 1,
    "byzantium": true
  },
  "args": [
    20,
    "1000000000000000000",
    "0xCCB14936C2E000ED8393A571D15A2672537838Ad",
    "0xC911B590248d127aD18546B186cC6B324e99F02c",
    "0x60971B3fe8e2FDF7575B40a4105322D6c50b35bF",
    "0x182d61c4E859748975051Da02A2D8c2d8CdDb39C",
    "0x3C2408605962D22Af86680E71f0115946edcfb8f"
  ],
  "numDeployments": 1,
  "solcInputHash": "5998e0ada0744a0bf0b70e53fc40e7f0",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numLevels_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxDepositAmount_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IAavePoolAddressProvider\",\"name\":\"aavePoolAddressProvider_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hasher_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"verifier2_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"verifier16_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InputNullifierAlreadySpent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"InputOutOfFieldSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExtDataHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"}],\"name\":\"InvalidMerkleTreeDepth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicScaledAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTxProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipientAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"CommitmentInserted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"NullifierUsed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_LEAF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePoolAddressProvider\",\"outputs\":[{\"internalType\":\"contract IAavePoolAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveNextLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAavePoolAndReserveData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accruedToTreasury\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unbacked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"isolationModeTotalDebt\",\"type\":\"uint128\"}],\"internalType\":\"struct AaveReserveData\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAaveScaledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaSec\",\"type\":\"uint256\"}],\"name\":\"getAaveScaledAmountAdjusted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TxType\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"extScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"}],\"name\":\"getPublicScaledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxDepositAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLeafIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier16\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier2\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zeroes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IHasher.sol\\\";\\nimport \\\"./interfaces/IMerkleTree.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\ncontract MerkleTree is IMerkleTree {\\n    uint256 public constant FIELD_SIZE =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\\n\\n    uint256 public constant ZERO_LEAF = uint256(keccak256(\\\"privi\\\")) % FIELD_SIZE;\\n\\n    IHasher public immutable hasher;\\n    uint256 public immutable numLevels;\\n\\n    mapping(uint256 => bytes32) public zeroes;\\n    mapping(uint256 => bytes32) public filledSubtrees;\\n    mapping(uint256 => bytes32) public roots;\\n\\n    uint32 public currentRootIndex;\\n    uint32 public nextLeafIndex;\\n\\n    constructor(uint256 numLevels_, address hasher_) {\\n        if (numLevels_ == 0 || numLevels_ >= 32) revert Errors.InvalidMerkleTreeDepth(numLevels_);\\n\\n        numLevels = numLevels_;\\n        hasher = IHasher(hasher_);\\n\\n        // Calculate the zero nodes\\n        bytes32 zero = bytes32(ZERO_LEAF);\\n        for (uint8 i = 0; i < numLevels_; ) {\\n            zeroes[i] = zero;\\n            filledSubtrees[i] = zero;\\n            zero = hashLeftRight(zero, zero);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        roots[0] = zero;\\n    }\\n\\n    function hashLeftRight(bytes32 left, bytes32 right) public view returns (bytes32) {\\n        if (uint256(left) >= FIELD_SIZE) revert Errors.InputOutOfFieldSize(left);\\n        if (uint256(right) >= FIELD_SIZE) revert Errors.InputOutOfFieldSize(right);\\n\\n        bytes32[2] memory input;\\n        input[0] = left;\\n        input[1] = right;\\n\\n        return hasher.poseidon(input);\\n    }\\n\\n    function _insert(bytes32 leaf1, bytes32 leaf2) internal returns (uint32 index) {\\n        uint32 _nextIndex = nextLeafIndex;\\n\\n        if (_nextIndex >= 2**numLevels) revert Errors.MerkleTreeFull();\\n\\n        uint32 currentIndex = _nextIndex / 2;\\n\\n        bytes32 currentLevelHash = hashLeftRight(leaf1, leaf2);\\n        bytes32 left;\\n        bytes32 right;\\n\\n        for (uint8 i = 1; i < numLevels; ) {\\n            if (currentIndex % 2 == 0) {\\n                left = currentLevelHash;\\n                right = zeroes[i];\\n                filledSubtrees[i] = currentLevelHash;\\n            } else {\\n                left = filledSubtrees[i];\\n                right = currentLevelHash;\\n            }\\n            currentLevelHash = hashLeftRight(left, right);\\n            currentIndex /= 2;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n        currentRootIndex = newRootIndex;\\n        roots[newRootIndex] = currentLevelHash;\\n\\n        nextLeafIndex = _nextIndex + 2;\\n        return _nextIndex;\\n    }\\n\\n    function isKnownRoot(bytes32 root) public view returns (bool) {\\n        if (root == 0) {\\n            return false;\\n        }\\n        uint32 _currentRootIndex = currentRootIndex;\\n        uint256 i = _currentRootIndex;\\n        do {\\n            if (root == roots[i]) {\\n                return true;\\n            }\\n            if (i == 0) {\\n                i = ROOT_HISTORY_SIZE;\\n            }\\n            --i;\\n        } while (i != _currentRootIndex);\\n        return false;\\n    }\\n\\n    function getLastRoot() public view returns (bytes32) {\\n        return roots[currentRootIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x79081bc7370aced4d98bad6b6f703a4399e61ad4705c19ce06975718056860de\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IAavePool.sol\\\";\\nimport \\\"./interfaces/IAavePoolAddressProvider.sol\\\";\\nimport \\\"./interfaces/IAToken.sol\\\";\\nimport \\\"./MerkleTree.sol\\\";\\nimport {TxType, ProofArgs, ExtData, AaveReserveData} from \\\"./libraries/DataTypes.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/WadRayMath.sol\\\";\\nimport {MathUtils} from \\\"./libraries/MathUtils.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\ncontract Pool is IPool, MerkleTree, ReentrancyGuard {\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable token;\\n    IAavePoolAddressProvider public immutable aavePoolAddressProvider;\\n\\n    IVerifier public immutable verifier2;\\n    IVerifier public immutable verifier16;\\n\\n    uint256 public maxDepositAmount;\\n\\n    mapping(bytes32 => bool) public nullifierHashes;\\n\\n    constructor(\\n        uint32 numLevels_,\\n        uint256 maxDepositAmount_,\\n        IERC20 token_,\\n        IAavePoolAddressProvider aavePoolAddressProvider_,\\n        address hasher_,\\n        IVerifier verifier2_,\\n        IVerifier verifier16_\\n    ) MerkleTree(numLevels_, hasher_) {\\n        maxDepositAmount = maxDepositAmount_;\\n        token = token_;\\n        aavePoolAddressProvider = aavePoolAddressProvider_;\\n        verifier2 = verifier2_;\\n        verifier16 = verifier16_;\\n    }\\n\\n    function supply(ProofArgs calldata args, ExtData calldata extData) external returns (uint256) {\\n        (address aavePoolAddress, , uint256 nextLiquidityIndex) = getAavePoolAndReserveData();\\n\\n        uint256 supplyAmount = extData.scaledAmount.rayMul(nextLiquidityIndex);\\n\\n        token.safeTransferFrom(msg.sender, address(this), supplyAmount);\\n        token.approve(aavePoolAddress, supplyAmount);\\n        IAavePool(aavePoolAddress).supply(address(token), supplyAmount, address(this), 0);\\n\\n        _transact(args, extData, TxType.SUPPLY);\\n\\n        return supplyAmount;\\n    }\\n\\n    function withdraw(ProofArgs calldata args, ExtData calldata extData)\\n        external\\n        returns (uint256)\\n    {\\n        if (extData.recipient == address(0)) revert Errors.ZeroRecipientAddress();\\n\\n        _transact(args, extData, TxType.WITHDRAW);\\n\\n        (\\n            address aavePoolAddress,\\n            AaveReserveData memory aaveReserveData,\\n\\n        ) = getAavePoolAndReserveData();\\n\\n        uint256 normalizedIncome = getAaveReserveNormalizedIncome();\\n\\n        uint256 withdrawAmount = extData.scaledAmount.rayMul(normalizedIncome);\\n        uint256 fee = extData.scaledFee.rayMul(normalizedIncome);\\n\\n        IAToken(aaveReserveData.aTokenAddress).approve(aavePoolAddress, withdrawAmount);\\n        IAavePool(aavePoolAddress).withdraw(address(token), withdrawAmount + fee, address(this));\\n\\n        token.safeTransfer(extData.recipient, withdrawAmount);\\n        if (fee > 0) {\\n            token.safeTransfer(extData.relayer, fee);\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external {\\n        _transact(args, extData, TxType.TRANSFER);\\n\\n        if (extData.scaledFee > 0) {\\n            (\\n                address aavePoolAddress,\\n                AaveReserveData memory aaveReserveData,\\n\\n            ) = getAavePoolAndReserveData();\\n\\n            uint256 normalizedIncome = IAavePool(aavePoolAddress).getReserveNormalizedIncome(\\n                address(token)\\n            );\\n            uint256 fee = extData.scaledFee.rayMul(normalizedIncome);\\n\\n            IAToken(aaveReserveData.aTokenAddress).approve(aavePoolAddress, fee);\\n            token.safeTransfer(extData.relayer, fee);\\n        }\\n    }\\n\\n    function getAavePoolAndReserveData()\\n        public\\n        view\\n        returns (\\n            address,\\n            AaveReserveData memory,\\n            uint256\\n        )\\n    {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\\n            address(token)\\n        );\\n\\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\\n            reserveData.currentLiquidityRate,\\n            reserveData.lastUpdateTimestamp\\n        );\\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\\n        return (aavePoolAddress, reserveData, nextLiquidityIndex);\\n    }\\n\\n    function getAaveReserveNormalizedIncome() public view returns (uint256) {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        return IAavePool(aavePoolAddress).getReserveNormalizedIncome(address(token));\\n    }\\n\\n    function getBalance(uint256 scaledAmount) public view returns (uint256) {\\n        uint256 normalizedIncome = getAaveReserveNormalizedIncome();\\n        uint256 balance = scaledAmount.rayMul(normalizedIncome);\\n        return balance;\\n    }\\n\\n    function getAaveNextLiquidityIndex() public view returns (uint256) {\\n        (, , uint256 nextLiquidityIndex) = getAavePoolAndReserveData();\\n        return nextLiquidityIndex;\\n    }\\n\\n    function getAaveScaledAmount(uint256 amount) public view returns (uint256) {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\\n            address(token)\\n        );\\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\\n            reserveData.currentLiquidityRate,\\n            reserveData.lastUpdateTimestamp\\n        );\\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\\n        uint256 scaledAmount = amount.rayDiv(nextLiquidityIndex);\\n\\n        return scaledAmount;\\n    }\\n\\n    function getAaveScaledAmountAdjusted(uint256 amount, uint256 deltaSec)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\\n            address(token)\\n        );\\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterestAdjusted(\\n            reserveData.currentLiquidityRate,\\n            reserveData.lastUpdateTimestamp,\\n            deltaSec\\n        );\\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\\n        uint256 scaledAmount = amount.rayDiv(nextLiquidityIndex);\\n        return (scaledAmount, nextLiquidityIndex);\\n    }\\n\\n    function isSpent(bytes32 nullifierHash) public view returns (bool) {\\n        return nullifierHashes[nullifierHash];\\n    }\\n\\n    function getPublicScaledAmount(\\n        TxType txType,\\n        uint256 extScaledAmount,\\n        uint256 scaledFee\\n    ) public pure returns (uint256) {\\n        if (txType == TxType.SUPPLY) {\\n            require(extScaledAmount >= scaledFee, \\\"Ext amount less than scaledFee\\\");\\n        }\\n\\n        uint256 publicScaledAmount;\\n\\n        if (txType == TxType.SUPPLY) {\\n            publicScaledAmount = extScaledAmount;\\n        } else if (txType == TxType.WITHDRAW) {\\n            publicScaledAmount = FIELD_SIZE - (extScaledAmount + scaledFee);\\n        } else if (txType == TxType.TRANSFER) {\\n            publicScaledAmount = scaledFee;\\n        } else {\\n            revert(\\\"Invalid TxType\\\");\\n        }\\n\\n        return publicScaledAmount;\\n    }\\n\\n    function verifyProof(ProofArgs calldata args) public view returns (bool) {\\n        if (args.inputNullifiers.length == 2) {\\n            return\\n                verifier2.verifyProof(\\n                    args.proof.a,\\n                    args.proof.b,\\n                    args.proof.c,\\n                    [\\n                        uint256(args.root),\\n                        args.publicScaledAmount,\\n                        uint256(args.extDataHash),\\n                        uint256(args.inputNullifiers[0]),\\n                        uint256(args.inputNullifiers[1]),\\n                        uint256(args.outputCommitments[0]),\\n                        uint256(args.outputCommitments[1])\\n                    ]\\n                );\\n        } else if (args.inputNullifiers.length == 16) {\\n            return\\n                verifier16.verifyProof(\\n                    args.proof.a,\\n                    args.proof.b,\\n                    args.proof.c,\\n                    [\\n                        uint256(args.root),\\n                        args.publicScaledAmount,\\n                        uint256(args.extDataHash),\\n                        uint256(args.inputNullifiers[0]),\\n                        uint256(args.inputNullifiers[1]),\\n                        uint256(args.inputNullifiers[2]),\\n                        uint256(args.inputNullifiers[3]),\\n                        uint256(args.inputNullifiers[4]),\\n                        uint256(args.inputNullifiers[5]),\\n                        uint256(args.inputNullifiers[6]),\\n                        uint256(args.inputNullifiers[7]),\\n                        uint256(args.inputNullifiers[8]),\\n                        uint256(args.inputNullifiers[9]),\\n                        uint256(args.inputNullifiers[10]),\\n                        uint256(args.inputNullifiers[11]),\\n                        uint256(args.inputNullifiers[12]),\\n                        uint256(args.inputNullifiers[13]),\\n                        uint256(args.inputNullifiers[14]),\\n                        uint256(args.inputNullifiers[15]),\\n                        uint256(args.outputCommitments[0]),\\n                        uint256(args.outputCommitments[1])\\n                    ]\\n                );\\n        } else {\\n            revert(\\\"Unsupported input count\\\");\\n        }\\n    }\\n\\n    function _transact(\\n        ProofArgs calldata args,\\n        ExtData calldata extData,\\n        TxType txType\\n    ) internal nonReentrant {\\n        if (!isKnownRoot(args.root)) {\\n            revert Errors.InvalidMerkleRoot();\\n        }\\n\\n        for (uint256 i = 0; i < args.inputNullifiers.length; ++i) {\\n            if (isSpent(args.inputNullifiers[i])) {\\n                revert Errors.InputNullifierAlreadySpent();\\n            }\\n        }\\n\\n        uint256 calcExtDataHash = uint256(keccak256(abi.encode(extData))) % FIELD_SIZE;\\n        if (calcExtDataHash != uint256(args.extDataHash)) {\\n            revert Errors.InvalidExtDataHash();\\n        }\\n\\n        uint256 calculatedPublicScaledAmount = getPublicScaledAmount(\\n            txType,\\n            extData.scaledAmount,\\n            extData.scaledFee\\n        );\\n\\n        if (calculatedPublicScaledAmount != args.publicScaledAmount) {\\n            revert Errors.InvalidPublicScaledAmount();\\n        }\\n\\n        if (!verifyProof(args)) {\\n            revert Errors.InvalidTxProof();\\n        }\\n\\n        for (uint256 i = 0; i < args.inputNullifiers.length; ++i) {\\n            nullifierHashes[args.inputNullifiers[i]] = true;\\n        }\\n\\n        _insert(args.outputCommitments[0], args.outputCommitments[1]);\\n\\n        emit CommitmentInserted(\\n            args.outputCommitments[0],\\n            nextLeafIndex - 2,\\n            extData.encryptedOutput1\\n        );\\n        emit CommitmentInserted(\\n            args.outputCommitments[1],\\n            nextLeafIndex - 1,\\n            extData.encryptedOutput2\\n        );\\n        for (uint256 i = 0; i < args.inputNullifiers.length; i++) {\\n            emit NullifierUsed(args.inputNullifiers[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xffe5cbf8ab1516432e2f136c0d6757fb7a5e4b2176013164fe288a62a99b3a61\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAToken {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address receiver, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function POOL() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcea28fbc673ba26716f22b1af472394d1ef5aaf4f951ff3755b60c4d059ac494\",\"license\":\"MIT\"},\"contracts/interfaces/IAavePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {AaveReserveData} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IAavePool {\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    function getReserveData(address asset) external view returns (AaveReserveData memory);\\n}\\n\",\"keccak256\":\"0xa87b2b5d1ab24b599901f83e664d9aeb4abc028f078e4a896d5bffe3c0edd466\",\"license\":\"MIT\"},\"contracts/interfaces/IAavePoolAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAavePoolAddressProvider {\\n    function getPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x950733901ca7cc8e258c1437d9e504f6ce41715a867fb16a8b2d593e0cf78ffe\",\"license\":\"MIT\"},\"contracts/interfaces/IHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IHasher {\\n    function poseidon(bytes32[2] calldata inputs) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf1aa66e61d0cf4f703a27b38a34d43d8bc0abe326e94c26014da3434b1ebbf5c\",\"license\":\"MIT\"},\"contracts/interfaces/IMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IMerkleTree {\\n    function hashLeftRight(bytes32 left, bytes32 right) external view returns (bytes32);\\n\\n    function isKnownRoot(bytes32 root) external view returns (bool);\\n\\n    function getLastRoot() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb2bee50729ac9fdd2648c8733f3f344184affdb29fcb652114b9c43d5802651f\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ProofArgs, ExtData, AaveReserveData} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IPool {\\n    event CommitmentInserted(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\\n    event NullifierUsed(bytes32 nullifier);\\n\\n    function supply(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function withdraw(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external;\\n\\n    function verifyProof(ProofArgs calldata args) external view returns (bool);\\n\\n    function getAavePoolAndReserveData()\\n        external\\n        view\\n        returns (\\n            address,\\n            AaveReserveData memory,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x96b0fe044e4e5c40fcb902db519fc9d9f568a56d83ae0507fecd7727dfdab3a5\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[7] memory inputs\\n    ) external view returns (bool r);\\n\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[21] memory inputs\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xb5a4f402e4bb3990abd455a49808cfb144cbb1aac6a74b25f62f14ece73501da\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nenum TxType {\\n    SUPPLY,\\n    WITHDRAW,\\n    TRANSFER\\n}\\n\\nstruct ExtData {\\n    address recipient;\\n    uint256 scaledAmount;\\n    address relayer;\\n    uint256 scaledFee;\\n    bytes encryptedOutput1;\\n    bytes encryptedOutput2;\\n}\\n\\nstruct Proof {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n}\\n\\nstruct ProofArgs {\\n    Proof proof;\\n    bytes32 root;\\n    bytes32[] inputNullifiers;\\n    bytes32[2] outputCommitments;\\n    uint256 publicScaledAmount;\\n    bytes32 extDataHash;\\n}\\n\\nstruct AaveReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct AaveReserveData {\\n    AaveReserveConfigurationMap configuration;\\n    uint128 liquidityIndex;\\n    uint128 currentLiquidityRate;\\n    uint128 variableBorrowIndex;\\n    uint128 currentVariableBorrowRate;\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    uint16 id;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    address interestRateStrategyAddress;\\n    uint128 accruedToTreasury;\\n    uint128 unbacked;\\n    uint128 isolationModeTotalDebt;\\n}\\n\",\"keccak256\":\"0x29acafe153b054782e2a844477a2639d8bc4f51a0aeee0bc49981509be5c0fa9\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    error InvalidTxProof();\\n    error InvalidMerkleRoot();\\n    error InputNullifierAlreadySpent();\\n    error InvalidExtDataHash();\\n    error InvalidPublicScaledAmount();\\n    error InvalidScaledAmount(uint256 scaledAmount);\\n    error ZeroRecipientAddress();\\n    error DepositAmountTooHigh(uint256 amount, uint256 maxAmountAllowed);\\n\\n    error InputOutOfFieldSize(bytes32 leaf);\\n    error MerkleTreeFull();\\n    error InvalidMerkleTreeDepth(uint256 depth);\\n}\\n\",\"keccak256\":\"0x4d4f27ebc1a09b72489f6d07046176e54c4ed2d281529616248205dbd8a53298\",\"license\":\"MIT\"},\"contracts/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n\\n    function calculateLinearInterestAdjusted(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 adjustedDeltaTimestamp\\n    ) internal view returns (uint256) {\\n        uint256 result = rate *\\n            (block.timestamp + adjustedDeltaTimestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n}\\n\",\"keccak256\":\"0x3a0d290019994ac34e64235c80a7abeb020a90ea2d475e6bac9eaa28c6efdb76\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36c36a8efa47d9d055dac1680477f43022c66aaf15a7811ab5bc2b26223dccc7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620053a3380380620053a383398181016040528101906200003891906200061b565b8663ffffffff1683600082148062000051575060208210155b156200009657816040517fd33482df0000000000000000000000000000000000000000000000000000000081526004016200008d9190620006df565b60405180910390fd5b8160a081815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f4e79ab3536e2fdce1b6af37a519fb69876a66b4e3b240a16632957de6990118e60001c6200012591906200072b565b60001b905060005b838160ff1610156200018e57816000808360ff1681526020019081526020016000208190555081600160008360ff168152602001908152602001600020819055506200018082836200029860201b60201c565b91508060010190506200012d565b508060026000808152602001908152602001600020819055505050506001600481905550856005819055508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250505050505050505062000905565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106200030457826040517fce31f759000000000000000000000000000000000000000000000000000000008152600401620002fb91906200077e565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c106200036e57816040517fce31f7590000000000000000000000000000000000000000000000000000000081526004016200036591906200077e565b60405180910390fd5b6200037862000444565b838160006002811062000390576200038f6200079b565b5b6020020181815250508281600160028110620003b157620003b06200079b565b5b60200201818152505060805173ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b8152600401620003f7919062000885565b602060405180830381865afa15801562000415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043b9190620008d3565b91505092915050565b6040518060400160405280600290602082028036833780820191505090505090565b600080fd5b600063ffffffff82169050919050565b62000486816200046b565b81146200049257600080fd5b50565b600081519050620004a6816200047b565b92915050565b6000819050919050565b620004c181620004ac565b8114620004cd57600080fd5b50565b600081519050620004e181620004b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200051482620004e7565b9050919050565b6000620005288262000507565b9050919050565b6200053a816200051b565b81146200054657600080fd5b50565b6000815190506200055a816200052f565b92915050565b60006200056d8262000507565b9050919050565b6200057f8162000560565b81146200058b57600080fd5b50565b6000815190506200059f8162000574565b92915050565b620005b08162000507565b8114620005bc57600080fd5b50565b600081519050620005d081620005a5565b92915050565b6000620005e38262000507565b9050919050565b620005f581620005d6565b81146200060157600080fd5b50565b6000815190506200061581620005ea565b92915050565b600080600080600080600060e0888a0312156200063d576200063c62000466565b5b60006200064d8a828b0162000495565b9750506020620006608a828b01620004d0565b9650506040620006738a828b0162000549565b9550506060620006868a828b016200058e565b9450506080620006998a828b01620005bf565b93505060a0620006ac8a828b0162000604565b92505060c0620006bf8a828b0162000604565b91505092959891949750929550565b620006d981620004ac565b82525050565b6000602082019050620006f66000830184620006ce565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200073882620004ac565b91506200074583620004ac565b925082620007585762000757620006fc565b5b828206905092915050565b6000819050919050565b620007788162000763565b82525050565b60006020820190506200079560008301846200076d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b620007f58162000763565b82525050565b6000620008098383620007ea565b60208301905092915050565b6000602082019050919050565b6200082d81620007ca565b620008398184620007d5565b92506200084682620007e0565b8060005b838110156200087d578151620008618782620007fb565b96506200086e8362000815565b9250506001810190506200084a565b505050505050565b60006040820190506200089c600083018462000822565b92915050565b620008ad8162000763565b8114620008b957600080fd5b50565b600081519050620008cd81620008a2565b92915050565b600060208284031215620008ec57620008eb62000466565b5b6000620008fc84828501620008bc565b91505092915050565b60805160a05160c05160e05161010051610120516149bb620009e8600039600081816107650152610ce4015260008181610b3401526111770152600081816107410152818161094501528181611ac501528181611c640152611e9a0152600081816109f4015281816111ce01528181611215015281816112d0015281816114d50152818161157c015281816115e20152818161172f0152818161186501528181611b7401528181611d1301528181611f470152611fcb015260008181611e0d01528181612800015261289401526000818161089d0152611e5b01526149bb6000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c806390eeb02b1161010f578063cd87a3b4116100a2578063ed33639f11610071578063ed33639f146105ff578063f178e47c1461061d578063f65037751461064d578063fc0c546a1461066b576101e5565b8063cd87a3b414610563578063d227d33914610581578063e013eb01146105b1578063e5285dcc146105cf576101e5565b8063ba70f757116100de578063ba70f757146104c5578063bc95a804146104e3578063c2b40ae414610513578063c5fd0ab414610543576101e5565b806390eeb02b1461043d5780639fceb0ff1461045b578063a828d08a14610477578063af013ec3146104a7576101e5565b80633b839d6c11610187578063528454c211610156578063528454c21461038f5780636c3bc785146103bf5780636d9833e3146103ef5780638ed832711461041f576101e5565b80633b839d6c146102f2578063414a37ba1461032357806347f3c89214610341578063522d0d7014610371576101e5565b806322be751d116101c357806322be751d1461026857806325375dd5146102865780632fc0355f146102a457806338bf282e146102c2576101e5565b80630be4f422146101ea57806317cc915c146102085780631e01043914610238575b600080fd5b6101f2610689565b6040516101ff9190612d9a565b60405180910390f35b610222600480360381019061021d9190612dff565b61069f565b60405161022f9190612e47565b60405180910390f35b610252600480360381019061024d9190612e98565b6106bf565b60405161025f9190612ed4565b60405180910390f35b6102706106ed565b60405161027d9190612ed4565b60405180910390f35b61028e61073f565b60405161029b9190612f6e565b60405180910390f35b6102ac610763565b6040516102b99190612faa565b60405180910390f35b6102dc60048036038101906102d79190612fc5565b610787565b6040516102e99190613014565b60405180910390f35b61030c6004803603810190610307919061302f565b61093e565b60405161031a92919061306f565b60405180910390f35b61032b610af2565b6040516103389190612ed4565b60405180910390f35b61035b600480360381019061035691906130bd565b610b16565b6040516103689190612e47565b60405180910390f35b610379611175565b6040516103869190612faa565b60405180910390f35b6103a960048036038101906103a49190613125565b611199565b6040516103b69190612ed4565b60405180910390f35b6103d960048036038101906103d49190613125565b61135c565b6040516103e69190612ed4565b60405180910390f35b61040960048036038101906104049190612dff565b611635565b6040516104169190612e47565b60405180910390f35b6104276116ca565b6040516104349190612ed4565b60405180910390f35b6104456116d0565b6040516104529190612d9a565b60405180910390f35b61047560048036038101906104709190613125565b6116e6565b005b610491600480360381019061048c91906131c2565b6118b2565b60405161049e9190612ed4565b60405180910390f35b6104af611a3d565b6040516104bc9190612ed4565b60405180910390f35b6104cd611a53565b6040516104da9190613014565b60405180910390f35b6104fd60048036038101906104f89190612e98565b611a86565b60405161050a9190613014565b60405180910390f35b61052d60048036038101906105289190612e98565b611a9e565b60405161053a9190613014565b60405180910390f35b61054b611ab6565b60405161055a9392919061340d565b60405180910390f35b61056b611c5a565b6040516105789190612d9a565b60405180910390f35b61059b60048036038101906105969190612e98565b611c5f565b6040516105a89190612ed4565b60405180910390f35b6105b9611e0b565b6040516105c69190612ed4565b60405180910390f35b6105e960048036038101906105e49190612dff565b611e2f565b6040516105f69190612e47565b60405180910390f35b610607611e59565b6040516106149190613467565b60405180910390f35b61063760048036038101906106329190612e98565b611e7d565b6040516106449190613014565b60405180910390f35b610655611e95565b6040516106629190612ed4565b60405180910390f35b610673611fc9565b60405161068091906134a3565b60405180910390f35b600360049054906101000a900463ffffffff1681565b60066020528060005260406000206000915054906101000a900460ff1681565b6000806106ca611e95565b905060006106e18285611fed90919063ffffffff16565b90508092505050919050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f4e79ab3536e2fdce1b6af37a519fb69876a66b4e3b240a16632957de6990118e60001c61073c91906134ed565b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106107f057826040517fce31f7590000000000000000000000000000000000000000000000000000000081526004016107e79190613014565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c1061085757816040517fce31f75900000000000000000000000000000000000000000000000000000000815260040161084e9190613014565b60405180910390fd5b61085f612bd7565b83816000600281106108745761087361351e565b5b60200201818152505082816001600281106108925761089161351e565b5b6020020181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b81526004016108f491906135f8565b602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190613628565b91505092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190613681565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a2f91906136ae565b6101e060405180830381865afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190613993565b90506000610a9a82604001516fffffffffffffffffffffffffffffffff168360c0015188612038565b90506000610ac783602001516fffffffffffffffffffffffffffffffff1683611fed90919063ffffffff16565b90506000610ade828a61209f90919063ffffffff16565b905080829650965050505050509250929050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b6000600282806101200190610b2b91906139d0565b905003610cc8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c894e75783600001600001846000016040018560000160c0016040518060e0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610bc691906139d0565b6000818110610bd857610bd761351e565b5b9050602002013560001c815260200188806101200190610bf891906139d0565b6001818110610c0a57610c0961351e565b5b9050602002013560001c81526020018861014001600060028110610c3157610c3061351e565b5b602002013560001c81526020018861014001600160028110610c5657610c5561351e565b5b602002013560001c8152506040518563ffffffff1660e01b8152600401610c809493929190613ba7565b602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613c1a565b9050611170565b601082806101200190610cdb91906139d0565b905003611135577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635debc07e83600001600001846000016040018560000160c001604051806102a0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610d7791906139d0565b6000818110610d8957610d8861351e565b5b9050602002013560001c815260200188806101200190610da991906139d0565b6001818110610dbb57610dba61351e565b5b9050602002013560001c815260200188806101200190610ddb91906139d0565b6002818110610ded57610dec61351e565b5b9050602002013560001c815260200188806101200190610e0d91906139d0565b6003818110610e1f57610e1e61351e565b5b9050602002013560001c815260200188806101200190610e3f91906139d0565b6004818110610e5157610e5061351e565b5b9050602002013560001c815260200188806101200190610e7191906139d0565b6005818110610e8357610e8261351e565b5b9050602002013560001c815260200188806101200190610ea391906139d0565b6006818110610eb557610eb461351e565b5b9050602002013560001c815260200188806101200190610ed591906139d0565b6007818110610ee757610ee661351e565b5b9050602002013560001c815260200188806101200190610f0791906139d0565b6008818110610f1957610f1861351e565b5b9050602002013560001c815260200188806101200190610f3991906139d0565b6009818110610f4b57610f4a61351e565b5b9050602002013560001c815260200188806101200190610f6b91906139d0565b600a818110610f7d57610f7c61351e565b5b9050602002013560001c815260200188806101200190610f9d91906139d0565b600b818110610faf57610fae61351e565b5b9050602002013560001c815260200188806101200190610fcf91906139d0565b600c818110610fe157610fe061351e565b5b9050602002013560001c81526020018880610120019061100191906139d0565b600d8181106110135761101261351e565b5b9050602002013560001c81526020018880610120019061103391906139d0565b600e8181106110455761104461351e565b5b9050602002013560001c81526020018880610120019061106591906139d0565b600f8181106110775761107661351e565b5b9050602002013560001c8152602001886101400160006002811061109e5761109d61351e565b5b602002013560001c815260200188610140016001600281106110c3576110c261351e565b5b602002013560001c8152506040518563ffffffff1660e01b81526004016110ed9493929190613ccb565b602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190613c1a565b9050611170565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790613d6f565b60405180910390fd5b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006111a6611ab6565b925050915060006111c4828660200135611fed90919063ffffffff16565b90506112133330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166120e6909392919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b815260040161126e929190613d8f565b6020604051808303816000875af115801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190613c1a565b508273ffffffffffffffffffffffffffffffffffffffff1663617ba0377f0000000000000000000000000000000000000000000000000000000000000000833060006040518563ffffffff1660e01b81526004016113129493929190613df3565b600060405180830381600087803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b505050506113508686600061216f565b80935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168260000160208101906113889190613e4d565b73ffffffffffffffffffffffffffffffffffffffff16036113d5576040517fceef985700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113e18383600161216f565b6000806113ec611ab6565b509150915060006113fb611e95565b90506000611416828760200135611fed90919063ffffffff16565b90506000611431838860600135611fed90919063ffffffff16565b905083610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b8152600401611473929190613d8f565b6020604051808303816000875af1158015611492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b69190613c1a565b508473ffffffffffffffffffffffffffffffffffffffff166369328dec7f000000000000000000000000000000000000000000000000000000000000000083856115009190613ea9565b306040518463ffffffff1660e01b815260040161151f93929190613edd565b6020604051808303816000875af115801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190613f14565b506115c08760000160208101906115799190613e4d565b837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125ef9092919063ffffffff16565b6000811115611627576116268760400160208101906115df9190613e4d565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125ef9092919063ffffffff16565b5b819550505050505092915050565b60008060001b820361164a57600090506116c5565b6000600360009054906101000a900463ffffffff16905060008163ffffffff1690505b60026000828152602001908152602001600020548403611692576001925050506116c5565b600081036116a557606463ffffffff1690505b806116af90613f41565b90508163ffffffff16810361166d576000925050505b919050565b60055481565b600360009054906101000a900463ffffffff1681565b6116f28282600261216f565b6000816060013511156118ae5760008061170a611ab6565b509150915060008273ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161176a91906136ae565b602060405180830381865afa158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190613f14565b905060006117c6828660600135611fed90919063ffffffff16565b905082610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611808929190613d8f565b6020604051808303816000875af1158015611827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184b9190613c1a565b506118a98560400160208101906118629190613e4d565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125ef9092919063ffffffff16565b505050505b5050565b60008060028111156118c7576118c6613f6a565b5b8460028111156118da576118d9613f6a565b5b036119235781831015611922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191990613fe5565b60405180910390fd5b5b600080600281111561193857611937613f6a565b5b85600281111561194b5761194a613f6a565b5b0361195857839050611a32565b6001600281111561196c5761196b613f6a565b5b85600281111561197f5761197e613f6a565b5b036119c25782846119909190613ea9565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016119bb9190614005565b9050611a31565b6002808111156119d5576119d4613f6a565b5b8560028111156119e8576119e7613f6a565b5b036119f557829050611a30565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2790614085565b60405180910390fd5b5b5b809150509392505050565b600080611a48611ab6565b925050508091505090565b600060026000600360009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002054905090565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b6000611ac0612bf9565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b529190613681565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611baf91906136ae565b6101e060405180830381865afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613993565b90506000611c1982604001516fffffffffffffffffffffffffffffffff168360c00151612675565b90506000611c4683602001516fffffffffffffffffffffffffffffffff1683611fed90919063ffffffff16565b905083838296509650965050505050909192565b606481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190613681565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611d4e91906136ae565b6101e060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d909190613993565b90506000611db882604001516fffffffffffffffffffffffffffffffff168360c00151612675565b90506000611de583602001516fffffffffffffffffffffffffffffffff1683611fed90919063ffffffff16565b90506000611dfc828861209f90919063ffffffff16565b90508095505050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006006600083815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190613681565b90508073ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611f8291906136ae565b602060405180830381865afa158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc39190613f14565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816b019d971e4fe8401e74000000600019030483111582151761201157600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b6000808364ffffffffff16834261204f9190613ea9565b6120599190614005565b8561206491906140a5565b90506301e13380818161207a576120796134be565b5b049050806b033b2e3c9fd0803ce80000006120959190613ea9565b9150509392505050565b60006b033b2e3c9fd0803ce800000060028304600019030483111515821517156120c857600080fd5b81600283046b033b2e3c9fd0803ce800000085020104905092915050565b612169846323b872dd60e01b858585604051602401612107939291906140e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126d0565b50505050565b612177612797565b612185836101000135611635565b6121bb576040517f9dd854d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b838061012001906121cf91906139d0565b905081101561225157612209848061012001906121ec91906139d0565b838181106121fd576121fc61351e565b5b90506020020135611e2f565b15612240576040517fb797976c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061224a9061411e565b90506121be565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836040516020016122869190614317565b6040516020818303038152906040528051906020012060001c6122a991906134ed565b9050836101a0013560001c81146122ec576040517f253e159200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061230183856020013586606001356118b2565b90508461018001358114612341576040517f28777bf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61234a85610b16565b612380576040517fc89e37db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8580610120019061239491906139d0565b905081101561240257600160066000888061012001906123b491906139d0565b858181106123c5576123c461351e565b5b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550806123fb9061411e565b9050612383565b50612445856101400160006002811061241e5761241d61351e565b5b6020020135866101400160016002811061243b5761243a61351e565b5b60200201356127e6565b507ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da856101400160006002811061247f5761247e61351e565b5b60200201356002600360049054906101000a900463ffffffff166124a39190614339565b8680608001906124b39190614371565b6040516124c39493929190614443565b60405180910390a17ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da85610140016001600281106125045761250361351e565b5b60200201356001600360049054906101000a900463ffffffff166125289190614339565b868060a001906125389190614371565b6040516125489493929190614443565b60405180910390a160005b8580610120019061256491906139d0565b90508110156125df577f4aac17bcf1974f8ba294b28aaf75fe627cdcc9a03ac55bda3bfe158ab067383c8680610120019061259f91906139d0565b838181106125b0576125af61351e565b5b905060200201356040516125c49190613014565b60405180910390a180806125d79061411e565b915050612553565b5050506125ea612a00565b505050565b6126708363a9059cbb60e01b848460405160240161260e929190613d8f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126d0565b505050565b6000808264ffffffffff164261268b9190614005565b8461269691906140a5565b90506301e1338081816126ac576126ab6134be565b5b049050806b033b2e3c9fd0803ce80000006126c79190613ea9565b91505092915050565b6000612732826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612a0a9092919063ffffffff16565b905060008151111561279257808060200190518101906127529190613c1a565b612791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612788906144f5565b60405180910390fd5b5b505050565b6002600454036127dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d390614561565b60405180910390fd5b6002600481905550565b600080600360049054906101000a900463ffffffff1690507f0000000000000000000000000000000000000000000000000000000000000000600261282b91906146b4565b8163ffffffff1610612869576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028261287891906146ff565b905060006128868686610787565b90506000806000600190505b7f00000000000000000000000000000000000000000000000000000000000000008160ff1610156129555760006002866128cc9190614730565b63ffffffff1603612912578392506000808260ff16815260200190815260200160002054915083600160008360ff1681526020019081526020016000208190555061292f565b600160008260ff1681526020019081526020016000205492508391505b6129398383610787565b935060028561294891906146ff565b9450806001019050612892565b50600060646001600360009054906101000a900463ffffffff166129799190614761565b6129839190614730565b905080600360006101000a81548163ffffffff021916908363ffffffff16021790555083600260008363ffffffff168152602001908152602001600020819055506002866129d19190614761565b600360046101000a81548163ffffffff021916908363ffffffff16021790555085965050505050505092915050565b6001600481905550565b6060612a198484600085612a22565b90509392505050565b606082471015612a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5e9061480b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a90919061489c565b60006040518083038185875af1925050503d8060008114612acd576040519150601f19603f3d011682016040523d82523d6000602084013e612ad2565b606091505b5091509150612ae387838387612aef565b92505050949350505050565b60608315612b51576000835103612b4957612b0985612b64565b612b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3f906148ff565b60405180910390fd5b5b829050612b5c565b612b5b8383612b87565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612b9a5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bce9190614963565b60405180910390fd5b6040518060400160405280600290602082028036833780820191505090505090565b604051806101e00160405280612c0d612d68565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600063ffffffff82169050919050565b612d9481612d7b565b82525050565b6000602082019050612daf6000830184612d8b565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612ddc81612dc9565b8114612de757600080fd5b50565b600081359050612df981612dd3565b92915050565b600060208284031215612e1557612e14612dbf565b5b6000612e2384828501612dea565b91505092915050565b60008115159050919050565b612e4181612e2c565b82525050565b6000602082019050612e5c6000830184612e38565b92915050565b6000819050919050565b612e7581612e62565b8114612e8057600080fd5b50565b600081359050612e9281612e6c565b92915050565b600060208284031215612eae57612ead612dbf565b5b6000612ebc84828501612e83565b91505092915050565b612ece81612e62565b82525050565b6000602082019050612ee96000830184612ec5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f34612f2f612f2a84612eef565b612f0f565b612eef565b9050919050565b6000612f4682612f19565b9050919050565b6000612f5882612f3b565b9050919050565b612f6881612f4d565b82525050565b6000602082019050612f836000830184612f5f565b92915050565b6000612f9482612f3b565b9050919050565b612fa481612f89565b82525050565b6000602082019050612fbf6000830184612f9b565b92915050565b60008060408385031215612fdc57612fdb612dbf565b5b6000612fea85828601612dea565b9250506020612ffb85828601612dea565b9150509250929050565b61300e81612dc9565b82525050565b60006020820190506130296000830184613005565b92915050565b6000806040838503121561304657613045612dbf565b5b600061305485828601612e83565b925050602061306585828601612e83565b9150509250929050565b60006040820190506130846000830185612ec5565b6130916020830184612ec5565b9392505050565b600080fd5b60006101c082840312156130b4576130b3613098565b5b81905092915050565b6000602082840312156130d3576130d2612dbf565b5b600082013567ffffffffffffffff8111156130f1576130f0612dc4565b5b6130fd8482850161309d565b91505092915050565b600060c0828403121561311c5761311b613098565b5b81905092915050565b6000806040838503121561313c5761313b612dbf565b5b600083013567ffffffffffffffff81111561315a57613159612dc4565b5b6131668582860161309d565b925050602083013567ffffffffffffffff81111561318757613186612dc4565b5b61319385828601613106565b9150509250929050565b600381106131aa57600080fd5b50565b6000813590506131bc8161319d565b92915050565b6000806000606084860312156131db576131da612dbf565b5b60006131e9868287016131ad565b93505060206131fa86828701612e83565b925050604061320b86828701612e83565b9150509250925092565b600061322082612eef565b9050919050565b61323081613215565b82525050565b61323f81612e62565b82525050565b60208201600082015161325b6000850182613236565b50505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61328681613261565b82525050565b600064ffffffffff82169050919050565b6132a68161328c565b82525050565b600061ffff82169050919050565b6132c3816132ac565b82525050565b6132d281613215565b82525050565b6101e0820160008201516132ef6000850182613245565b506020820151613302602085018261327d565b506040820151613315604085018261327d565b506060820151613328606085018261327d565b50608082015161333b608085018261327d565b5060a082015161334e60a085018261327d565b5060c082015161336160c085018261329d565b5060e082015161337460e08501826132ba565b506101008201516133896101008501826132c9565b5061012082015161339e6101208501826132c9565b506101408201516133b36101408501826132c9565b506101608201516133c86101608501826132c9565b506101808201516133dd61018085018261327d565b506101a08201516133f26101a085018261327d565b506101c08201516134076101c085018261327d565b50505050565b6000610220820190506134236000830186613227565b61343060208301856132d8565b61343e610200830184612ec5565b949350505050565b600061345182612f3b565b9050919050565b61346181613446565b82525050565b600060208201905061347c6000830184613458565b92915050565b600061348d82612f3b565b9050919050565b61349d81613482565b82525050565b60006020820190506134b86000830184613494565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134f882612e62565b915061350383612e62565b925082613513576135126134be565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61357681612dc9565b82525050565b6000613588838361356d565b60208301905092915050565b6000602082019050919050565b6135aa8161354d565b6135b48184613558565b92506135bf82613563565b8060005b838110156135f05781516135d7878261357c565b96506135e283613594565b9250506001810190506135c3565b505050505050565b600060408201905061360d60008301846135a1565b92915050565b60008151905061362281612dd3565b92915050565b60006020828403121561363e5761363d612dbf565b5b600061364c84828501613613565b91505092915050565b61365e81613215565b811461366957600080fd5b50565b60008151905061367b81613655565b92915050565b60006020828403121561369757613696612dbf565b5b60006136a58482850161366c565b91505092915050565b60006020820190506136c36000830184613227565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613717826136ce565b810181811067ffffffffffffffff82111715613736576137356136df565b5b80604052505050565b6000613749612db5565b9050613755828261370e565b919050565b60008151905061376981612e6c565b92915050565b600060208284031215613785576137846136c9565b5b61378f602061373f565b9050600061379f8482850161375a565b60008301525092915050565b6137b481613261565b81146137bf57600080fd5b50565b6000815190506137d1816137ab565b92915050565b6137e08161328c565b81146137eb57600080fd5b50565b6000815190506137fd816137d7565b92915050565b61380c816132ac565b811461381757600080fd5b50565b60008151905061382981613803565b92915050565b60006101e08284031215613846576138456136c9565b5b6138516101e061373f565b905060006138618482850161376f565b6000830152506020613875848285016137c2565b6020830152506040613889848285016137c2565b604083015250606061389d848285016137c2565b60608301525060806138b1848285016137c2565b60808301525060a06138c5848285016137c2565b60a08301525060c06138d9848285016137ee565b60c08301525060e06138ed8482850161381a565b60e0830152506101006139028482850161366c565b610100830152506101206139188482850161366c565b6101208301525061014061392e8482850161366c565b610140830152506101606139448482850161366c565b6101608301525061018061395a848285016137c2565b610180830152506101a0613970848285016137c2565b6101a0830152506101c0613986848285016137c2565b6101c08301525092915050565b60006101e082840312156139aa576139a9612dbf565b5b60006139b88482850161382f565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126139ed576139ec6139c1565b5b80840192508235915067ffffffffffffffff821115613a0f57613a0e6139c6565b5b602083019250602082023603831315613a2b57613a2a6139cb565b5b509250929050565b82818337505050565b613a4860408383613a33565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b613a7860408383613a33565b5050565b6000613a888383613a6c565b60408301905092915050565b600082905092915050565b6000604082019050919050565b613ab581613a4c565b613abf8184613a57565b9250613aca82613a62565b8060005b83811015613b0357613ae08284613a94565b613aea8782613a7c565b9650613af583613a9f565b925050600181019050613ace565b505050505050565b600060079050919050565b600081905092915050565b6000819050919050565b6000613b378383613236565b60208301905092915050565b6000602082019050919050565b613b5981613b0b565b613b638184613b16565b9250613b6e82613b21565b8060005b83811015613b9f578151613b868782613b2b565b9650613b9183613b43565b925050600181019050613b72565b505050505050565b60006101e082019050613bbd6000830187613a3c565b613bca6040830186613aac565b613bd760c0830185613a3c565b613be5610100830184613b50565b95945050505050565b613bf781612e2c565b8114613c0257600080fd5b50565b600081519050613c1481613bee565b92915050565b600060208284031215613c3057613c2f612dbf565b5b6000613c3e84828501613c05565b91505092915050565b600060159050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b613c7d81613c47565b613c878184613c52565b9250613c9282613c5d565b8060005b83811015613cc3578151613caa8782613b2b565b9650613cb583613c67565b925050600181019050613c96565b505050505050565b60006103a082019050613ce16000830187613a3c565b613cee6040830186613aac565b613cfb60c0830185613a3c565b613d09610100830184613c74565b95945050505050565b600082825260208201905092915050565b7f556e737570706f7274656420696e70757420636f756e74000000000000000000600082015250565b6000613d59601783613d12565b9150613d6482613d23565b602082019050919050565b60006020820190508181036000830152613d8881613d4c565b9050919050565b6000604082019050613da46000830185613227565b613db16020830184612ec5565b9392505050565b6000819050919050565b6000613ddd613dd8613dd384613db8565b612f0f565b6132ac565b9050919050565b613ded81613dc2565b82525050565b6000608082019050613e086000830187613227565b613e156020830186612ec5565b613e226040830185613227565b613e2f6060830184613de4565b95945050505050565b600081359050613e4781613655565b92915050565b600060208284031215613e6357613e62612dbf565b5b6000613e7184828501613e38565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613eb482612e62565b9150613ebf83612e62565b9250828201905080821115613ed757613ed6613e7a565b5b92915050565b6000606082019050613ef26000830186613227565b613eff6020830185612ec5565b613f0c6040830184613227565b949350505050565b600060208284031215613f2a57613f29612dbf565b5b6000613f388482850161375a565b91505092915050565b6000613f4c82612e62565b915060008203613f5f57613f5e613e7a565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45787420616d6f756e74206c657373207468616e207363616c65644665650000600082015250565b6000613fcf601e83613d12565b9150613fda82613f99565b602082019050919050565b60006020820190508181036000830152613ffe81613fc2565b9050919050565b600061401082612e62565b915061401b83612e62565b925082820390508181111561403357614032613e7a565b5b92915050565b7f496e76616c696420547854797065000000000000000000000000000000000000600082015250565b600061406f600e83613d12565b915061407a82614039565b602082019050919050565b6000602082019050818103600083015261409e81614062565b9050919050565b60006140b082612e62565b91506140bb83612e62565b92508282026140c981612e62565b915082820484148315176140e0576140df613e7a565b5b5092915050565b60006060820190506140fc6000830186613227565b6141096020830185613227565b6141166040830184612ec5565b949350505050565b600061412982612e62565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361415b5761415a613e7a565b5b600182019050919050565b60006141756020840184613e38565b905092915050565b600061418c6020840184612e83565b905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126141c0576141bf61419e565b5b83810192508235915060208301925067ffffffffffffffff8211156141e8576141e7614194565b5b6001820236038313156141fe576141fd614199565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006142328385614206565b935061423f838584614217565b614248836136ce565b840190509392505050565b600060c083016142666000840184614166565b61427360008601826132c9565b50614281602084018461417d565b61428e6020860182613236565b5061429c6040840184614166565b6142a960408601826132c9565b506142b7606084018461417d565b6142c46060860182613236565b506142d260808401846141a3565b85830360808701526142e5838284614226565b925050506142f660a08401846141a3565b85830360a0870152614309838284614226565b925050508091505092915050565b600060208201905081810360008301526143318184614253565b905092915050565b600061434482612d7b565b915061434f83612d7b565b9250828203905063ffffffff81111561436b5761436a613e7a565b5b92915050565b6000808335600160200384360303811261438e5761438d6139c1565b5b80840192508235915067ffffffffffffffff8211156143b0576143af6139c6565b5b6020830192506001820236038313156143cc576143cb6139cb565b5b509250929050565b60006143ef6143ea6143e584612d7b565b612f0f565b612e62565b9050919050565b6143ff816143d4565b82525050565b600082825260208201905092915050565b60006144228385614405565b935061442f838584614217565b614438836136ce565b840190509392505050565b60006060820190506144586000830187613005565b61446560208301866143f6565b8181036040830152614478818486614416565b905095945050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006144df602a83613d12565b91506144ea82614483565b604082019050919050565b6000602082019050818103600083015261450e816144d2565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061454b601f83613d12565b915061455682614515565b602082019050919050565b6000602082019050818103600083015261457a8161453e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156145d8578086048111156145b4576145b3613e7a565b5b60018516156145c35780820291505b80810290506145d185614581565b9450614598565b94509492505050565b6000826145f157600190506146ad565b816145ff57600090506146ad565b8160018114614615576002811461461f5761464e565b60019150506146ad565b60ff84111561463157614630613e7a565b5b8360020a91508482111561464857614647613e7a565b5b506146ad565b5060208310610133831016604e8410600b84101617156146835782820a90508381111561467e5761467d613e7a565b5b6146ad565b614690848484600161458e565b925090508184048111156146a7576146a6613e7a565b5b81810290505b9392505050565b60006146bf82612e62565b91506146ca83612e62565b92506146f77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846145e1565b905092915050565b600061470a82612d7b565b915061471583612d7b565b925082614725576147246134be565b5b828204905092915050565b600061473b82612d7b565b915061474683612d7b565b925082614756576147556134be565b5b828206905092915050565b600061476c82612d7b565b915061477783612d7b565b9250828201905063ffffffff81111561479357614792613e7a565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006147f5602683613d12565b915061480082614799565b604082019050919050565b60006020820190508181036000830152614824816147e8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561485f578082015181840152602081019050614844565b60008484015250505050565b60006148768261482b565b6148808185614836565b9350614890818560208601614841565b80840191505092915050565b60006148a8828461486b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006148e9601d83613d12565b91506148f4826148b3565b602082019050919050565b60006020820190508181036000830152614918816148dc565b9050919050565b600081519050919050565b60006149358261491f565b61493f8185613d12565b935061494f818560208601614841565b614958816136ce565b840191505092915050565b6000602082019050818103600083015261497d818461492a565b90509291505056fea26469706673582212201e2c70aa71fcc8fb1fcfe036b5bde9b7113fbf771aae83fd859683cea0598aae64736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c806390eeb02b1161010f578063cd87a3b4116100a2578063ed33639f11610071578063ed33639f146105ff578063f178e47c1461061d578063f65037751461064d578063fc0c546a1461066b576101e5565b8063cd87a3b414610563578063d227d33914610581578063e013eb01146105b1578063e5285dcc146105cf576101e5565b8063ba70f757116100de578063ba70f757146104c5578063bc95a804146104e3578063c2b40ae414610513578063c5fd0ab414610543576101e5565b806390eeb02b1461043d5780639fceb0ff1461045b578063a828d08a14610477578063af013ec3146104a7576101e5565b80633b839d6c11610187578063528454c211610156578063528454c21461038f5780636c3bc785146103bf5780636d9833e3146103ef5780638ed832711461041f576101e5565b80633b839d6c146102f2578063414a37ba1461032357806347f3c89214610341578063522d0d7014610371576101e5565b806322be751d116101c357806322be751d1461026857806325375dd5146102865780632fc0355f146102a457806338bf282e146102c2576101e5565b80630be4f422146101ea57806317cc915c146102085780631e01043914610238575b600080fd5b6101f2610689565b6040516101ff9190612d9a565b60405180910390f35b610222600480360381019061021d9190612dff565b61069f565b60405161022f9190612e47565b60405180910390f35b610252600480360381019061024d9190612e98565b6106bf565b60405161025f9190612ed4565b60405180910390f35b6102706106ed565b60405161027d9190612ed4565b60405180910390f35b61028e61073f565b60405161029b9190612f6e565b60405180910390f35b6102ac610763565b6040516102b99190612faa565b60405180910390f35b6102dc60048036038101906102d79190612fc5565b610787565b6040516102e99190613014565b60405180910390f35b61030c6004803603810190610307919061302f565b61093e565b60405161031a92919061306f565b60405180910390f35b61032b610af2565b6040516103389190612ed4565b60405180910390f35b61035b600480360381019061035691906130bd565b610b16565b6040516103689190612e47565b60405180910390f35b610379611175565b6040516103869190612faa565b60405180910390f35b6103a960048036038101906103a49190613125565b611199565b6040516103b69190612ed4565b60405180910390f35b6103d960048036038101906103d49190613125565b61135c565b6040516103e69190612ed4565b60405180910390f35b61040960048036038101906104049190612dff565b611635565b6040516104169190612e47565b60405180910390f35b6104276116ca565b6040516104349190612ed4565b60405180910390f35b6104456116d0565b6040516104529190612d9a565b60405180910390f35b61047560048036038101906104709190613125565b6116e6565b005b610491600480360381019061048c91906131c2565b6118b2565b60405161049e9190612ed4565b60405180910390f35b6104af611a3d565b6040516104bc9190612ed4565b60405180910390f35b6104cd611a53565b6040516104da9190613014565b60405180910390f35b6104fd60048036038101906104f89190612e98565b611a86565b60405161050a9190613014565b60405180910390f35b61052d60048036038101906105289190612e98565b611a9e565b60405161053a9190613014565b60405180910390f35b61054b611ab6565b60405161055a9392919061340d565b60405180910390f35b61056b611c5a565b6040516105789190612d9a565b60405180910390f35b61059b60048036038101906105969190612e98565b611c5f565b6040516105a89190612ed4565b60405180910390f35b6105b9611e0b565b6040516105c69190612ed4565b60405180910390f35b6105e960048036038101906105e49190612dff565b611e2f565b6040516105f69190612e47565b60405180910390f35b610607611e59565b6040516106149190613467565b60405180910390f35b61063760048036038101906106329190612e98565b611e7d565b6040516106449190613014565b60405180910390f35b610655611e95565b6040516106629190612ed4565b60405180910390f35b610673611fc9565b60405161068091906134a3565b60405180910390f35b600360049054906101000a900463ffffffff1681565b60066020528060005260406000206000915054906101000a900460ff1681565b6000806106ca611e95565b905060006106e18285611fed90919063ffffffff16565b90508092505050919050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f4e79ab3536e2fdce1b6af37a519fb69876a66b4e3b240a16632957de6990118e60001c61073c91906134ed565b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106107f057826040517fce31f7590000000000000000000000000000000000000000000000000000000081526004016107e79190613014565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c1061085757816040517fce31f75900000000000000000000000000000000000000000000000000000000815260040161084e9190613014565b60405180910390fd5b61085f612bd7565b83816000600281106108745761087361351e565b5b60200201818152505082816001600281106108925761089161351e565b5b6020020181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b81526004016108f491906135f8565b602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190613628565b91505092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d29190613681565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a2f91906136ae565b6101e060405180830381865afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a719190613993565b90506000610a9a82604001516fffffffffffffffffffffffffffffffff168360c0015188612038565b90506000610ac783602001516fffffffffffffffffffffffffffffffff1683611fed90919063ffffffff16565b90506000610ade828a61209f90919063ffffffff16565b905080829650965050505050509250929050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b6000600282806101200190610b2b91906139d0565b905003610cc8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c894e75783600001600001846000016040018560000160c0016040518060e0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610bc691906139d0565b6000818110610bd857610bd761351e565b5b9050602002013560001c815260200188806101200190610bf891906139d0565b6001818110610c0a57610c0961351e565b5b9050602002013560001c81526020018861014001600060028110610c3157610c3061351e565b5b602002013560001c81526020018861014001600160028110610c5657610c5561351e565b5b602002013560001c8152506040518563ffffffff1660e01b8152600401610c809493929190613ba7565b602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613c1a565b9050611170565b601082806101200190610cdb91906139d0565b905003611135577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635debc07e83600001600001846000016040018560000160c001604051806102a0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610d7791906139d0565b6000818110610d8957610d8861351e565b5b9050602002013560001c815260200188806101200190610da991906139d0565b6001818110610dbb57610dba61351e565b5b9050602002013560001c815260200188806101200190610ddb91906139d0565b6002818110610ded57610dec61351e565b5b9050602002013560001c815260200188806101200190610e0d91906139d0565b6003818110610e1f57610e1e61351e565b5b9050602002013560001c815260200188806101200190610e3f91906139d0565b6004818110610e5157610e5061351e565b5b9050602002013560001c815260200188806101200190610e7191906139d0565b6005818110610e8357610e8261351e565b5b9050602002013560001c815260200188806101200190610ea391906139d0565b6006818110610eb557610eb461351e565b5b9050602002013560001c815260200188806101200190610ed591906139d0565b6007818110610ee757610ee661351e565b5b9050602002013560001c815260200188806101200190610f0791906139d0565b6008818110610f1957610f1861351e565b5b9050602002013560001c815260200188806101200190610f3991906139d0565b6009818110610f4b57610f4a61351e565b5b9050602002013560001c815260200188806101200190610f6b91906139d0565b600a818110610f7d57610f7c61351e565b5b9050602002013560001c815260200188806101200190610f9d91906139d0565b600b818110610faf57610fae61351e565b5b9050602002013560001c815260200188806101200190610fcf91906139d0565b600c818110610fe157610fe061351e565b5b9050602002013560001c81526020018880610120019061100191906139d0565b600d8181106110135761101261351e565b5b9050602002013560001c81526020018880610120019061103391906139d0565b600e8181106110455761104461351e565b5b9050602002013560001c81526020018880610120019061106591906139d0565b600f8181106110775761107661351e565b5b9050602002013560001c8152602001886101400160006002811061109e5761109d61351e565b5b602002013560001c815260200188610140016001600281106110c3576110c261351e565b5b602002013560001c8152506040518563ffffffff1660e01b81526004016110ed9493929190613ccb565b602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190613c1a565b9050611170565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790613d6f565b60405180910390fd5b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006111a6611ab6565b925050915060006111c4828660200135611fed90919063ffffffff16565b90506112133330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166120e6909392919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b815260040161126e929190613d8f565b6020604051808303816000875af115801561128d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112b19190613c1a565b508273ffffffffffffffffffffffffffffffffffffffff1663617ba0377f0000000000000000000000000000000000000000000000000000000000000000833060006040518563ffffffff1660e01b81526004016113129493929190613df3565b600060405180830381600087803b15801561132c57600080fd5b505af1158015611340573d6000803e3d6000fd5b505050506113508686600061216f565b80935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168260000160208101906113889190613e4d565b73ffffffffffffffffffffffffffffffffffffffff16036113d5576040517fceef985700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6113e18383600161216f565b6000806113ec611ab6565b509150915060006113fb611e95565b90506000611416828760200135611fed90919063ffffffff16565b90506000611431838860600135611fed90919063ffffffff16565b905083610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b8152600401611473929190613d8f565b6020604051808303816000875af1158015611492573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114b69190613c1a565b508473ffffffffffffffffffffffffffffffffffffffff166369328dec7f000000000000000000000000000000000000000000000000000000000000000083856115009190613ea9565b306040518463ffffffff1660e01b815260040161151f93929190613edd565b6020604051808303816000875af115801561153e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115629190613f14565b506115c08760000160208101906115799190613e4d565b837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125ef9092919063ffffffff16565b6000811115611627576116268760400160208101906115df9190613e4d565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125ef9092919063ffffffff16565b5b819550505050505092915050565b60008060001b820361164a57600090506116c5565b6000600360009054906101000a900463ffffffff16905060008163ffffffff1690505b60026000828152602001908152602001600020548403611692576001925050506116c5565b600081036116a557606463ffffffff1690505b806116af90613f41565b90508163ffffffff16810361166d576000925050505b919050565b60055481565b600360009054906101000a900463ffffffff1681565b6116f28282600261216f565b6000816060013511156118ae5760008061170a611ab6565b509150915060008273ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b815260040161176a91906136ae565b602060405180830381865afa158015611787573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117ab9190613f14565b905060006117c6828660600135611fed90919063ffffffff16565b905082610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b8152600401611808929190613d8f565b6020604051808303816000875af1158015611827573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061184b9190613c1a565b506118a98560400160208101906118629190613e4d565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166125ef9092919063ffffffff16565b505050505b5050565b60008060028111156118c7576118c6613f6a565b5b8460028111156118da576118d9613f6a565b5b036119235781831015611922576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161191990613fe5565b60405180910390fd5b5b600080600281111561193857611937613f6a565b5b85600281111561194b5761194a613f6a565b5b0361195857839050611a32565b6001600281111561196c5761196b613f6a565b5b85600281111561197f5761197e613f6a565b5b036119c25782846119909190613ea9565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000016119bb9190614005565b9050611a31565b6002808111156119d5576119d4613f6a565b5b8560028111156119e8576119e7613f6a565b5b036119f557829050611a30565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a2790614085565b60405180910390fd5b5b5b809150509392505050565b600080611a48611ab6565b925050508091505090565b600060026000600360009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002054905090565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b6000611ac0612bf9565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b2e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b529190613681565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611baf91906136ae565b6101e060405180830381865afa158015611bcd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611bf19190613993565b90506000611c1982604001516fffffffffffffffffffffffffffffffff168360c00151612675565b90506000611c4683602001516fffffffffffffffffffffffffffffffff1683611fed90919063ffffffff16565b905083838296509650965050505050909192565b606481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611ccd573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611cf19190613681565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611d4e91906136ae565b6101e060405180830381865afa158015611d6c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d909190613993565b90506000611db882604001516fffffffffffffffffffffffffffffffff168360c00151612675565b90506000611de583602001516fffffffffffffffffffffffffffffffff1683611fed90919063ffffffff16565b90506000611dfc828861209f90919063ffffffff16565b90508095505050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006006600083815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f03573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f279190613681565b90508073ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611f8291906136ae565b602060405180830381865afa158015611f9f573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611fc39190613f14565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816b019d971e4fe8401e74000000600019030483111582151761201157600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b6000808364ffffffffff16834261204f9190613ea9565b6120599190614005565b8561206491906140a5565b90506301e13380818161207a576120796134be565b5b049050806b033b2e3c9fd0803ce80000006120959190613ea9565b9150509392505050565b60006b033b2e3c9fd0803ce800000060028304600019030483111515821517156120c857600080fd5b81600283046b033b2e3c9fd0803ce800000085020104905092915050565b612169846323b872dd60e01b858585604051602401612107939291906140e7565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126d0565b50505050565b612177612797565b612185836101000135611635565b6121bb576040517f9dd854d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b838061012001906121cf91906139d0565b905081101561225157612209848061012001906121ec91906139d0565b838181106121fd576121fc61351e565b5b90506020020135611e2f565b15612240576040517fb797976c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061224a9061411e565b90506121be565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836040516020016122869190614317565b6040516020818303038152906040528051906020012060001c6122a991906134ed565b9050836101a0013560001c81146122ec576040517f253e159200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061230183856020013586606001356118b2565b90508461018001358114612341576040517f28777bf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61234a85610b16565b612380576040517fc89e37db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8580610120019061239491906139d0565b905081101561240257600160066000888061012001906123b491906139d0565b858181106123c5576123c461351e565b5b90506020020135815260200190815260200160002060006101000a81548160ff021916908315150217905550806123fb9061411e565b9050612383565b50612445856101400160006002811061241e5761241d61351e565b5b6020020135866101400160016002811061243b5761243a61351e565b5b60200201356127e6565b507ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da856101400160006002811061247f5761247e61351e565b5b60200201356002600360049054906101000a900463ffffffff166124a39190614339565b8680608001906124b39190614371565b6040516124c39493929190614443565b60405180910390a17ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da85610140016001600281106125045761250361351e565b5b60200201356001600360049054906101000a900463ffffffff166125289190614339565b868060a001906125389190614371565b6040516125489493929190614443565b60405180910390a160005b8580610120019061256491906139d0565b90508110156125df577f4aac17bcf1974f8ba294b28aaf75fe627cdcc9a03ac55bda3bfe158ab067383c8680610120019061259f91906139d0565b838181106125b0576125af61351e565b5b905060200201356040516125c49190613014565b60405180910390a180806125d79061411e565b915050612553565b5050506125ea612a00565b505050565b6126708363a9059cbb60e01b848460405160240161260e929190613d8f565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050506126d0565b505050565b6000808264ffffffffff164261268b9190614005565b8461269691906140a5565b90506301e1338081816126ac576126ab6134be565b5b049050806b033b2e3c9fd0803ce80000006126c79190613ea9565b91505092915050565b6000612732826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612a0a9092919063ffffffff16565b905060008151111561279257808060200190518101906127529190613c1a565b612791576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612788906144f5565b60405180910390fd5b5b505050565b6002600454036127dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d390614561565b60405180910390fd5b6002600481905550565b600080600360049054906101000a900463ffffffff1690507f0000000000000000000000000000000000000000000000000000000000000000600261282b91906146b4565b8163ffffffff1610612869576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060028261287891906146ff565b905060006128868686610787565b90506000806000600190505b7f00000000000000000000000000000000000000000000000000000000000000008160ff1610156129555760006002866128cc9190614730565b63ffffffff1603612912578392506000808260ff16815260200190815260200160002054915083600160008360ff1681526020019081526020016000208190555061292f565b600160008260ff1681526020019081526020016000205492508391505b6129398383610787565b935060028561294891906146ff565b9450806001019050612892565b50600060646001600360009054906101000a900463ffffffff166129799190614761565b6129839190614730565b905080600360006101000a81548163ffffffff021916908363ffffffff16021790555083600260008363ffffffff168152602001908152602001600020819055506002866129d19190614761565b600360046101000a81548163ffffffff021916908363ffffffff16021790555085965050505050505092915050565b6001600481905550565b6060612a198484600085612a22565b90509392505050565b606082471015612a67576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612a5e9061480b565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612a90919061489c565b60006040518083038185875af1925050503d8060008114612acd576040519150601f19603f3d011682016040523d82523d6000602084013e612ad2565b606091505b5091509150612ae387838387612aef565b92505050949350505050565b60608315612b51576000835103612b4957612b0985612b64565b612b48576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b3f906148ff565b60405180910390fd5b5b829050612b5c565b612b5b8383612b87565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612b9a5781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612bce9190614963565b60405180910390fd5b6040518060400160405280600290602082028036833780820191505090505090565b604051806101e00160405280612c0d612d68565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600063ffffffff82169050919050565b612d9481612d7b565b82525050565b6000602082019050612daf6000830184612d8b565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612ddc81612dc9565b8114612de757600080fd5b50565b600081359050612df981612dd3565b92915050565b600060208284031215612e1557612e14612dbf565b5b6000612e2384828501612dea565b91505092915050565b60008115159050919050565b612e4181612e2c565b82525050565b6000602082019050612e5c6000830184612e38565b92915050565b6000819050919050565b612e7581612e62565b8114612e8057600080fd5b50565b600081359050612e9281612e6c565b92915050565b600060208284031215612eae57612ead612dbf565b5b6000612ebc84828501612e83565b91505092915050565b612ece81612e62565b82525050565b6000602082019050612ee96000830184612ec5565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f34612f2f612f2a84612eef565b612f0f565b612eef565b9050919050565b6000612f4682612f19565b9050919050565b6000612f5882612f3b565b9050919050565b612f6881612f4d565b82525050565b6000602082019050612f836000830184612f5f565b92915050565b6000612f9482612f3b565b9050919050565b612fa481612f89565b82525050565b6000602082019050612fbf6000830184612f9b565b92915050565b60008060408385031215612fdc57612fdb612dbf565b5b6000612fea85828601612dea565b9250506020612ffb85828601612dea565b9150509250929050565b61300e81612dc9565b82525050565b60006020820190506130296000830184613005565b92915050565b6000806040838503121561304657613045612dbf565b5b600061305485828601612e83565b925050602061306585828601612e83565b9150509250929050565b60006040820190506130846000830185612ec5565b6130916020830184612ec5565b9392505050565b600080fd5b60006101c082840312156130b4576130b3613098565b5b81905092915050565b6000602082840312156130d3576130d2612dbf565b5b600082013567ffffffffffffffff8111156130f1576130f0612dc4565b5b6130fd8482850161309d565b91505092915050565b600060c0828403121561311c5761311b613098565b5b81905092915050565b6000806040838503121561313c5761313b612dbf565b5b600083013567ffffffffffffffff81111561315a57613159612dc4565b5b6131668582860161309d565b925050602083013567ffffffffffffffff81111561318757613186612dc4565b5b61319385828601613106565b9150509250929050565b600381106131aa57600080fd5b50565b6000813590506131bc8161319d565b92915050565b6000806000606084860312156131db576131da612dbf565b5b60006131e9868287016131ad565b93505060206131fa86828701612e83565b925050604061320b86828701612e83565b9150509250925092565b600061322082612eef565b9050919050565b61323081613215565b82525050565b61323f81612e62565b82525050565b60208201600082015161325b6000850182613236565b50505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61328681613261565b82525050565b600064ffffffffff82169050919050565b6132a68161328c565b82525050565b600061ffff82169050919050565b6132c3816132ac565b82525050565b6132d281613215565b82525050565b6101e0820160008201516132ef6000850182613245565b506020820151613302602085018261327d565b506040820151613315604085018261327d565b506060820151613328606085018261327d565b50608082015161333b608085018261327d565b5060a082015161334e60a085018261327d565b5060c082015161336160c085018261329d565b5060e082015161337460e08501826132ba565b506101008201516133896101008501826132c9565b5061012082015161339e6101208501826132c9565b506101408201516133b36101408501826132c9565b506101608201516133c86101608501826132c9565b506101808201516133dd61018085018261327d565b506101a08201516133f26101a085018261327d565b506101c08201516134076101c085018261327d565b50505050565b6000610220820190506134236000830186613227565b61343060208301856132d8565b61343e610200830184612ec5565b949350505050565b600061345182612f3b565b9050919050565b61346181613446565b82525050565b600060208201905061347c6000830184613458565b92915050565b600061348d82612f3b565b9050919050565b61349d81613482565b82525050565b60006020820190506134b86000830184613494565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006134f882612e62565b915061350383612e62565b925082613513576135126134be565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b61357681612dc9565b82525050565b6000613588838361356d565b60208301905092915050565b6000602082019050919050565b6135aa8161354d565b6135b48184613558565b92506135bf82613563565b8060005b838110156135f05781516135d7878261357c565b96506135e283613594565b9250506001810190506135c3565b505050505050565b600060408201905061360d60008301846135a1565b92915050565b60008151905061362281612dd3565b92915050565b60006020828403121561363e5761363d612dbf565b5b600061364c84828501613613565b91505092915050565b61365e81613215565b811461366957600080fd5b50565b60008151905061367b81613655565b92915050565b60006020828403121561369757613696612dbf565b5b60006136a58482850161366c565b91505092915050565b60006020820190506136c36000830184613227565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b613717826136ce565b810181811067ffffffffffffffff82111715613736576137356136df565b5b80604052505050565b6000613749612db5565b9050613755828261370e565b919050565b60008151905061376981612e6c565b92915050565b600060208284031215613785576137846136c9565b5b61378f602061373f565b9050600061379f8482850161375a565b60008301525092915050565b6137b481613261565b81146137bf57600080fd5b50565b6000815190506137d1816137ab565b92915050565b6137e08161328c565b81146137eb57600080fd5b50565b6000815190506137fd816137d7565b92915050565b61380c816132ac565b811461381757600080fd5b50565b60008151905061382981613803565b92915050565b60006101e08284031215613846576138456136c9565b5b6138516101e061373f565b905060006138618482850161376f565b6000830152506020613875848285016137c2565b6020830152506040613889848285016137c2565b604083015250606061389d848285016137c2565b60608301525060806138b1848285016137c2565b60808301525060a06138c5848285016137c2565b60a08301525060c06138d9848285016137ee565b60c08301525060e06138ed8482850161381a565b60e0830152506101006139028482850161366c565b610100830152506101206139188482850161366c565b6101208301525061014061392e8482850161366c565b610140830152506101606139448482850161366c565b6101608301525061018061395a848285016137c2565b610180830152506101a0613970848285016137c2565b6101a0830152506101c0613986848285016137c2565b6101c08301525092915050565b60006101e082840312156139aa576139a9612dbf565b5b60006139b88482850161382f565b91505092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126139ed576139ec6139c1565b5b80840192508235915067ffffffffffffffff821115613a0f57613a0e6139c6565b5b602083019250602082023603831315613a2b57613a2a6139cb565b5b509250929050565b82818337505050565b613a4860408383613a33565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b613a7860408383613a33565b5050565b6000613a888383613a6c565b60408301905092915050565b600082905092915050565b6000604082019050919050565b613ab581613a4c565b613abf8184613a57565b9250613aca82613a62565b8060005b83811015613b0357613ae08284613a94565b613aea8782613a7c565b9650613af583613a9f565b925050600181019050613ace565b505050505050565b600060079050919050565b600081905092915050565b6000819050919050565b6000613b378383613236565b60208301905092915050565b6000602082019050919050565b613b5981613b0b565b613b638184613b16565b9250613b6e82613b21565b8060005b83811015613b9f578151613b868782613b2b565b9650613b9183613b43565b925050600181019050613b72565b505050505050565b60006101e082019050613bbd6000830187613a3c565b613bca6040830186613aac565b613bd760c0830185613a3c565b613be5610100830184613b50565b95945050505050565b613bf781612e2c565b8114613c0257600080fd5b50565b600081519050613c1481613bee565b92915050565b600060208284031215613c3057613c2f612dbf565b5b6000613c3e84828501613c05565b91505092915050565b600060159050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b613c7d81613c47565b613c878184613c52565b9250613c9282613c5d565b8060005b83811015613cc3578151613caa8782613b2b565b9650613cb583613c67565b925050600181019050613c96565b505050505050565b60006103a082019050613ce16000830187613a3c565b613cee6040830186613aac565b613cfb60c0830185613a3c565b613d09610100830184613c74565b95945050505050565b600082825260208201905092915050565b7f556e737570706f7274656420696e70757420636f756e74000000000000000000600082015250565b6000613d59601783613d12565b9150613d6482613d23565b602082019050919050565b60006020820190508181036000830152613d8881613d4c565b9050919050565b6000604082019050613da46000830185613227565b613db16020830184612ec5565b9392505050565b6000819050919050565b6000613ddd613dd8613dd384613db8565b612f0f565b6132ac565b9050919050565b613ded81613dc2565b82525050565b6000608082019050613e086000830187613227565b613e156020830186612ec5565b613e226040830185613227565b613e2f6060830184613de4565b95945050505050565b600081359050613e4781613655565b92915050565b600060208284031215613e6357613e62612dbf565b5b6000613e7184828501613e38565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613eb482612e62565b9150613ebf83612e62565b9250828201905080821115613ed757613ed6613e7a565b5b92915050565b6000606082019050613ef26000830186613227565b613eff6020830185612ec5565b613f0c6040830184613227565b949350505050565b600060208284031215613f2a57613f29612dbf565b5b6000613f388482850161375a565b91505092915050565b6000613f4c82612e62565b915060008203613f5f57613f5e613e7a565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45787420616d6f756e74206c657373207468616e207363616c65644665650000600082015250565b6000613fcf601e83613d12565b9150613fda82613f99565b602082019050919050565b60006020820190508181036000830152613ffe81613fc2565b9050919050565b600061401082612e62565b915061401b83612e62565b925082820390508181111561403357614032613e7a565b5b92915050565b7f496e76616c696420547854797065000000000000000000000000000000000000600082015250565b600061406f600e83613d12565b915061407a82614039565b602082019050919050565b6000602082019050818103600083015261409e81614062565b9050919050565b60006140b082612e62565b91506140bb83612e62565b92508282026140c981612e62565b915082820484148315176140e0576140df613e7a565b5b5092915050565b60006060820190506140fc6000830186613227565b6141096020830185613227565b6141166040830184612ec5565b949350505050565b600061412982612e62565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361415b5761415a613e7a565b5b600182019050919050565b60006141756020840184613e38565b905092915050565b600061418c6020840184612e83565b905092915050565b600080fd5b600080fd5b600080fd5b600080833560016020038436030381126141c0576141bf61419e565b5b83810192508235915060208301925067ffffffffffffffff8211156141e8576141e7614194565b5b6001820236038313156141fe576141fd614199565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b60006142328385614206565b935061423f838584614217565b614248836136ce565b840190509392505050565b600060c083016142666000840184614166565b61427360008601826132c9565b50614281602084018461417d565b61428e6020860182613236565b5061429c6040840184614166565b6142a960408601826132c9565b506142b7606084018461417d565b6142c46060860182613236565b506142d260808401846141a3565b85830360808701526142e5838284614226565b925050506142f660a08401846141a3565b85830360a0870152614309838284614226565b925050508091505092915050565b600060208201905081810360008301526143318184614253565b905092915050565b600061434482612d7b565b915061434f83612d7b565b9250828203905063ffffffff81111561436b5761436a613e7a565b5b92915050565b6000808335600160200384360303811261438e5761438d6139c1565b5b80840192508235915067ffffffffffffffff8211156143b0576143af6139c6565b5b6020830192506001820236038313156143cc576143cb6139cb565b5b509250929050565b60006143ef6143ea6143e584612d7b565b612f0f565b612e62565b9050919050565b6143ff816143d4565b82525050565b600082825260208201905092915050565b60006144228385614405565b935061442f838584614217565b614438836136ce565b840190509392505050565b60006060820190506144586000830187613005565b61446560208301866143f6565b8181036040830152614478818486614416565b905095945050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b60006144df602a83613d12565b91506144ea82614483565b604082019050919050565b6000602082019050818103600083015261450e816144d2565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b600061454b601f83613d12565b915061455682614515565b602082019050919050565b6000602082019050818103600083015261457a8161453e565b9050919050565b60008160011c9050919050565b6000808291508390505b60018511156145d8578086048111156145b4576145b3613e7a565b5b60018516156145c35780820291505b80810290506145d185614581565b9450614598565b94509492505050565b6000826145f157600190506146ad565b816145ff57600090506146ad565b8160018114614615576002811461461f5761464e565b60019150506146ad565b60ff84111561463157614630613e7a565b5b8360020a91508482111561464857614647613e7a565b5b506146ad565b5060208310610133831016604e8410600b84101617156146835782820a90508381111561467e5761467d613e7a565b5b6146ad565b614690848484600161458e565b925090508184048111156146a7576146a6613e7a565b5b81810290505b9392505050565b60006146bf82612e62565b91506146ca83612e62565b92506146f77fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff84846145e1565b905092915050565b600061470a82612d7b565b915061471583612d7b565b925082614725576147246134be565b5b828204905092915050565b600061473b82612d7b565b915061474683612d7b565b925082614756576147556134be565b5b828206905092915050565b600061476c82612d7b565b915061477783612d7b565b9250828201905063ffffffff81111561479357614792613e7a565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b60006147f5602683613d12565b915061480082614799565b604082019050919050565b60006020820190508181036000830152614824816147e8565b9050919050565b600081519050919050565b600081905092915050565b60005b8381101561485f578082015181840152602081019050614844565b60008484015250505050565b60006148768261482b565b6148808185614836565b9350614890818560208601614841565b80840191505092915050565b60006148a8828461486b565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b60006148e9601d83613d12565b91506148f4826148b3565b602082019050919050565b60006020820190508181036000830152614918816148dc565b9050919050565b600081519050919050565b60006149358261491f565b61493f8185613d12565b935061494f818560208601614841565b614958816136ce565b840191505092915050565b6000602082019050818103600083015261497d818461492a565b90509291505056fea26469706673582212201e2c70aa71fcc8fb1fcfe036b5bde9b7113fbf771aae83fd859683cea0598aae64736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 811,
        "contract": "contracts/Pool.sol:Pool",
        "label": "zeroes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 815,
        "contract": "contracts/Pool.sol:Pool",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 819,
        "contract": "contracts/Pool.sol:Pool",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 821,
        "contract": "contracts/Pool.sol:Pool",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 823,
        "contract": "contracts/Pool.sol:Pool",
        "label": "nextLeafIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1201,
        "contract": "contracts/Pool.sol:Pool",
        "label": "maxDepositAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1205,
        "contract": "contracts/Pool.sol:Pool",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}