{
  "language": "Solidity",
  "sources": {
    "@openzeppelin/contracts/security/ReentrancyGuard.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Contract module that helps prevent reentrant calls to a function.\n *\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\n * available, which can be applied to functions to make sure there are no nested\n * (reentrant) calls to them.\n *\n * Note that because there is a single `nonReentrant` guard, functions marked as\n * `nonReentrant` may not call one another. This can be worked around by making\n * those functions `private`, and then adding `external` `nonReentrant` entry\n * points to them.\n *\n * TIP: If you would like to learn more about reentrancy and alternative ways\n * to protect against it, check out our blog post\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\n */\nabstract contract ReentrancyGuard {\n    // Booleans are more expensive than uint256 or any type that takes up a full\n    // word because each write operation emits an extra SLOAD to first read the\n    // slot's contents, replace the bits taken up by the boolean, and then write\n    // back. This is the compiler's defense against contract upgrades and\n    // pointer aliasing, and it cannot be disabled.\n\n    // The values being non-zero value makes deployment a bit more expensive,\n    // but in exchange the refund on every call to nonReentrant will be lower in\n    // amount. Since refunds are capped to a percentage of the total\n    // transaction's gas, it is best to keep them low in cases like this one, to\n    // increase the likelihood of the full refund coming into effect.\n    uint256 private constant _NOT_ENTERED = 1;\n    uint256 private constant _ENTERED = 2;\n\n    uint256 private _status;\n\n    constructor() {\n        _status = _NOT_ENTERED;\n    }\n\n    /**\n     * @dev Prevents a contract from calling itself, directly or indirectly.\n     * Calling a `nonReentrant` function from another `nonReentrant`\n     * function is not supported. It is possible to prevent this from happening\n     * by making the `nonReentrant` function external, and making it call a\n     * `private` function that does the actual work.\n     */\n    modifier nonReentrant() {\n        _nonReentrantBefore();\n        _;\n        _nonReentrantAfter();\n    }\n\n    function _nonReentrantBefore() private {\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\n        require(_status != _ENTERED, \"ReentrancyGuard: reentrant call\");\n\n        // Any calls to nonReentrant after this point will fail\n        _status = _ENTERED;\n    }\n\n    function _nonReentrantAfter() private {\n        // By storing the original value once again, a refund is triggered (see\n        // https://eips.ethereum.org/EIPS/eip-2200)\n        _status = _NOT_ENTERED;\n    }\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/ERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\nimport \"./extensions/IERC20Metadata.sol\";\nimport \"../../utils/Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.openzeppelin.com/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `to` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address to, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _transfer(owner, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * NOTE: If `amount` is the maximum `uint256`, the allowance is not updated on\n     * `transferFrom`. This is semantically equivalent to an infinite approval.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * NOTE: Does not update the allowance if the current allowance\n     * is the maximum `uint256`.\n     *\n     * Requirements:\n     *\n     * - `from` and `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``from``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        address spender = _msgSender();\n        _spendAllowance(from, spender, amount);\n        _transfer(from, to, amount);\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        _approve(owner, spender, allowance(owner, spender) + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        address owner = _msgSender();\n        uint256 currentAllowance = allowance(owner, spender);\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(owner, spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `from` to `to`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `from` cannot be the zero address.\n     * - `to` cannot be the zero address.\n     * - `from` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {\n        require(from != address(0), \"ERC20: transfer from the zero address\");\n        require(to != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(from, to, amount);\n\n        uint256 fromBalance = _balances[from];\n        require(fromBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[from] = fromBalance - amount;\n            // Overflow not possible: the sum of all balances is capped by totalSupply, and the sum is preserved by\n            // decrementing then incrementing.\n            _balances[to] += amount;\n        }\n\n        emit Transfer(from, to, amount);\n\n        _afterTokenTransfer(from, to, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        unchecked {\n            // Overflow not possible: balance + amount is at most totalSupply + amount, which is checked above.\n            _balances[account] += amount;\n        }\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n            // Overflow not possible: amount <= accountBalance <= totalSupply.\n            _totalSupply -= amount;\n        }\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Updates `owner` s allowance for `spender` based on spent `amount`.\n     *\n     * Does not update the allowance amount in case of infinite allowance.\n     * Revert if not enough allowance is available.\n     *\n     * Might emit an {Approval} event.\n     */\n    function _spendAllowance(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        uint256 currentAllowance = allowance(owner, spender);\n        if (currentAllowance != type(uint256).max) {\n            require(currentAllowance >= amount, \"ERC20: insufficient allowance\");\n            unchecked {\n                _approve(owner, spender, currentAllowance - amount);\n            }\n        }\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\n *\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\n * need to send a transaction, and thus is not required to hold Ether at all.\n */\ninterface IERC20Permit {\n    /**\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\n     * given ``owner``'s signed approval.\n     *\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\n     * ordering also apply here.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `deadline` must be a timestamp in the future.\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\n     * over the EIP712-formatted function arguments.\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\n     *\n     * For more information on the signature format, see the\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\n     * section].\n     */\n    function permit(\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) external;\n\n    /**\n     * @dev Returns the current nonce for `owner`. This value must be\n     * included whenever a signature is generated for {permit}.\n     *\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\n     * prevents a signature from being used multiple times.\n     */\n    function nonces(address owner) external view returns (uint256);\n\n    /**\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\n     */\n    // solhint-disable-next-line func-name-mixedcase\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/extensions/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/IERC20Metadata.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `to`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address to, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `from` to `to` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\n\npragma solidity ^0.8.0;\n\nimport \"../IERC20.sol\";\nimport \"../extensions/draft-IERC20Permit.sol\";\nimport \"../../../utils/Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    function safePermit(\n        IERC20Permit token,\n        address owner,\n        address spender,\n        uint256 value,\n        uint256 deadline,\n        uint8 v,\n        bytes32 r,\n        bytes32 s\n    ) internal {\n        uint256 nonceBefore = token.nonces(owner);\n        token.permit(owner, spender, value, deadline, v, r, s);\n        uint256 nonceAfter = token.nonces(owner);\n        require(nonceAfter == nonceBefore + 1, \"SafeERC20: permit did not succeed\");\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\n\npragma solidity ^0.8.1;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     *\n     * [IMPORTANT]\n     * ====\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\n     *\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\n     * constructor.\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize/address.code.length, which returns 0\n        // for contracts in construction, since the code is only stored at the end\n        // of the constructor execution.\n\n        return account.code.length > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\n     *\n     * _Available since v4.8._\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        if (success) {\n            if (returndata.length == 0) {\n                // only check isContract if the call was successful and the return data is empty\n                // otherwise we already know that it was a contract\n                require(isContract(target), \"Address: call to non-contract\");\n            }\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason or using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            _revert(returndata, errorMessage);\n        }\n    }\n\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert(errorMessage);\n        }\n    }\n}\n"
    },
    "@openzeppelin/contracts/utils/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts v4.4.1 (utils/Context.sol)\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}\n"
    },
    "contracts/interfaces/IAavePool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {AaveReserveData} from \"../libraries/DataTypes.sol\";\n\ninterface IAavePool {\n    function supply(\n        address asset,\n        uint256 amount,\n        address onBehalfOf,\n        uint16 referralCode\n    ) external;\n\n    function withdraw(\n        address asset,\n        uint256 amount,\n        address to\n    ) external returns (uint256);\n\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\n\n    function getReserveData(address asset) external view returns (AaveReserveData memory);\n}\n"
    },
    "contracts/interfaces/IAavePoolAddressProvider.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IAavePoolAddressProvider {\n    function getPool() external view returns (address);\n\n    function getAddress(bytes32 id) external view returns (address);\n}\n"
    },
    "contracts/interfaces/IAToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.9;\n\ninterface IAToken {\n    function balanceOf(address account) external view returns (uint256);\n\n    function transfer(address receiver, uint256 amount) external returns (bool);\n\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    function POOL() external view returns (address);\n}\n"
    },
    "contracts/interfaces/IHasher.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IHasher {\n    function poseidon(bytes32[2] calldata inputs) external pure returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IMerkleTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IMerkleTree {\n    function hashLeftRight(bytes32 left, bytes32 right) external view returns (bytes32);\n\n    function isKnownRoot(bytes32 root) external view returns (bool);\n\n    function getLastRoot() external view returns (bytes32);\n}\n"
    },
    "contracts/interfaces/IPool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {ProofArgs, ExtData, AaveReserveData} from \"../libraries/DataTypes.sol\";\n\ninterface IPool {\n    event CommitmentInserted(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\n    event NullifierUsed(bytes32 nullifier);\n\n    function supply(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\n\n    function withdraw(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\n\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external;\n\n    function verifyProof(ProofArgs calldata args) external view returns (bool);\n\n    function getAavePoolAndReserveData()\n        external\n        view\n        returns (\n            address,\n            AaveReserveData memory,\n            uint256\n        );\n}\n"
    },
    "contracts/interfaces/IVerifier.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\ninterface IVerifier {\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[7] memory inputs\n    ) external view returns (bool r);\n\n    function verifyProof(\n        uint256[2] memory a,\n        uint256[2][2] memory b,\n        uint256[2] memory c,\n        uint256[21] memory inputs\n    ) external view returns (bool r);\n}\n"
    },
    "contracts/interfaces/IWToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\n\ninterface IWToken is IERC20 {\n    function deposit() external payable;\n\n    function withdraw(uint256 amount) external;\n\n    function transferFrom(\n        address from,\n        address to,\n        uint256 amount\n    ) external returns (bool);\n}\n"
    },
    "contracts/interfaces/IWTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\nimport {ProofArgs, ExtData, AaveReserveData} from \"../libraries/DataTypes.sol\";\n\ninterface IWTokenGateway {\n    error NotEnoughTokensSent(uint256 sent, uint256 required);\n    error RecipientNotGateway(address recipient, address gateway);\n\n    function supply(\n        address pool,\n        ProofArgs calldata args,\n        ExtData calldata extData\n    ) external payable;\n\n    function withdraw(\n        address pool,\n        address unwrappedTokenReceiver,\n        ProofArgs calldata args,\n        ExtData calldata extData\n    ) external;\n}\n"
    },
    "contracts/libraries/DataTypes.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nenum TxType {\n    SUPPLY,\n    WITHDRAW,\n    TRANSFER\n}\n\nstruct ExtData {\n    address recipient;\n    uint256 scaledAmount;\n    address relayer;\n    uint256 scaledFee;\n    bytes encryptedOutput1;\n    bytes encryptedOutput2;\n}\n\nstruct Proof {\n    uint256[2] a;\n    uint256[2][2] b;\n    uint256[2] c;\n}\n\nstruct ProofArgs {\n    Proof proof;\n    bytes32 root;\n    bytes32[] inputNullifiers;\n    bytes32[2] outputCommitments;\n    uint256 publicScaledAmount;\n    bytes32 extDataHash;\n}\n\nstruct AaveReserveConfigurationMap {\n    uint256 data;\n}\n\nstruct AaveReserveData {\n    AaveReserveConfigurationMap configuration;\n    uint128 liquidityIndex;\n    uint128 currentLiquidityRate;\n    uint128 variableBorrowIndex;\n    uint128 currentVariableBorrowRate;\n    uint128 currentStableBorrowRate;\n    uint40 lastUpdateTimestamp;\n    uint16 id;\n    address aTokenAddress;\n    address stableDebtTokenAddress;\n    address variableDebtTokenAddress;\n    address interestRateStrategyAddress;\n    uint128 accruedToTreasury;\n    uint128 unbacked;\n    uint128 isolationModeTotalDebt;\n}\n"
    },
    "contracts/libraries/Errors.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nlibrary Errors {\n    error InvalidTxProof();\n    error InvalidMerkleRoot();\n    error InputNullifierAlreadySpent();\n    error InvalidExtDataHash();\n    error InvalidPublicScaledAmount();\n    error InvalidScaledAmount(uint256 scaledAmount);\n    error ZeroRecipientAddress();\n    error DepositAmountTooHigh(uint256 amount, uint256 maxAmountAllowed);\n\n    error InputOutOfFieldSize(bytes32 leaf);\n    error MerkleTreeFull();\n    error InvalidMerkleTreeDepth(uint256 depth);\n}\n"
    },
    "contracts/libraries/MathUtils.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport {WadRayMath} from \"./WadRayMath.sol\";\n\nlibrary MathUtils {\n    using WadRayMath for uint256;\n\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\n\n    /**\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\n     * @param rate The interest rate, in ray\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\n     **/\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\n        internal\n        view\n        returns (uint256)\n    {\n        uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\n        unchecked {\n            result = result / SECONDS_PER_YEAR;\n        }\n\n        return WadRayMath.RAY + result;\n    }\n\n    function calculateLinearInterestAdjusted(\n        uint256 rate,\n        uint40 lastUpdateTimestamp,\n        uint256 adjustedDeltaTimestamp\n    ) internal view returns (uint256) {\n        uint256 result = rate *\n            (block.timestamp + adjustedDeltaTimestamp - uint256(lastUpdateTimestamp));\n        unchecked {\n            result = result / SECONDS_PER_YEAR;\n        }\n\n        return WadRayMath.RAY + result;\n    }\n}\n"
    },
    "contracts/libraries/WadRayMath.sol": {
      "content": "// SPDX-License-Identifier: BUSL-1.1\npragma solidity 0.8.17;\n\n/**\n * @title WadRayMath library\n * @author Aave\n * @notice Provides functions to perform calculations with Wad and Ray units\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\n * with 27 digits of precision)\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\n **/\nlibrary WadRayMath {\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\n    uint256 internal constant WAD = 1e18;\n    uint256 internal constant HALF_WAD = 0.5e18;\n\n    uint256 internal constant RAY = 1e27;\n    uint256 internal constant HALF_RAY = 0.5e27;\n\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\n\n    /**\n     * @dev Multiplies two wad, rounding half up to the nearest wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @param b Wad\n     * @return c = a*b, in wad\n     **/\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\n        assembly {\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, b), HALF_WAD), WAD)\n        }\n    }\n\n    /**\n     * @dev Divides two wad, rounding half up to the nearest wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @param b Wad\n     * @return c = a/b, in wad\n     **/\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\n        assembly {\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, WAD), div(b, 2)), b)\n        }\n    }\n\n    /**\n     * @notice Multiplies two ray, rounding half up to the nearest ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @param b Ray\n     * @return c = a raymul b\n     **/\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\n        assembly {\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, b), HALF_RAY), RAY)\n        }\n    }\n\n    /**\n     * @notice Divides two ray, rounding half up to the nearest ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @param b Ray\n     * @return c = a raydiv b\n     **/\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\n        assembly {\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\n                revert(0, 0)\n            }\n\n            c := div(add(mul(a, RAY), div(b, 2)), b)\n        }\n    }\n\n    /**\n     * @dev Casts ray down to wad\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Ray\n     * @return b = a converted to wad, rounded half up to the nearest wad\n     **/\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\n        assembly {\n            b := div(a, WAD_RAY_RATIO)\n            let remainder := mod(a, WAD_RAY_RATIO)\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\n                b := add(b, 1)\n            }\n        }\n    }\n\n    /**\n     * @dev Converts wad up to ray\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\n     * @param a Wad\n     * @return b = a converted in ray\n     **/\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\n        // to avoid overflow, b/WAD_RAY_RATIO == a\n        assembly {\n            b := mul(a, WAD_RAY_RATIO)\n\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\n                revert(0, 0)\n            }\n        }\n    }\n}\n"
    },
    "contracts/MerkleTree.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"./interfaces/IHasher.sol\";\nimport \"./interfaces/IMerkleTree.sol\";\nimport {Errors} from \"./libraries/Errors.sol\";\n\ncontract MerkleTree is IMerkleTree {\n    uint256 public constant FIELD_SIZE =\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\n\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\n\n    uint256 public constant ZERO_LEAF = uint256(keccak256(\"privi\")) % FIELD_SIZE;\n\n    IHasher public immutable hasher;\n    uint256 public immutable numLevels;\n\n    mapping(uint256 => bytes32) public zeroes;\n    mapping(uint256 => bytes32) public filledSubtrees;\n    mapping(uint256 => bytes32) public roots;\n\n    uint32 public currentRootIndex;\n    uint32 public nextLeafIndex;\n\n    constructor(uint256 numLevels_, address hasher_) {\n        if (numLevels_ == 0 || numLevels_ >= 32) revert Errors.InvalidMerkleTreeDepth(numLevels_);\n\n        numLevels = numLevels_;\n        hasher = IHasher(hasher_);\n\n        // Calculate the zero nodes\n        bytes32 zero = bytes32(ZERO_LEAF);\n        for (uint8 i = 0; i < numLevels_; ) {\n            zeroes[i] = zero;\n            filledSubtrees[i] = zero;\n            zero = hashLeftRight(zero, zero);\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        roots[0] = zero;\n    }\n\n    function hashLeftRight(bytes32 left, bytes32 right) public view returns (bytes32) {\n        if (uint256(left) >= FIELD_SIZE) revert Errors.InputOutOfFieldSize(left);\n        if (uint256(right) >= FIELD_SIZE) revert Errors.InputOutOfFieldSize(right);\n\n        bytes32[2] memory input;\n        input[0] = left;\n        input[1] = right;\n\n        return hasher.poseidon(input);\n    }\n\n    function _insert(bytes32 leaf1, bytes32 leaf2) internal returns (uint32 index) {\n        uint32 _nextIndex = nextLeafIndex;\n\n        if (_nextIndex >= 2**numLevels) revert Errors.MerkleTreeFull();\n\n        uint32 currentIndex = _nextIndex / 2;\n\n        bytes32 currentLevelHash = hashLeftRight(leaf1, leaf2);\n        bytes32 left;\n        bytes32 right;\n\n        for (uint8 i = 1; i < numLevels; ) {\n            if (currentIndex % 2 == 0) {\n                left = currentLevelHash;\n                right = zeroes[i];\n                filledSubtrees[i] = currentLevelHash;\n            } else {\n                left = filledSubtrees[i];\n                right = currentLevelHash;\n            }\n            currentLevelHash = hashLeftRight(left, right);\n            currentIndex /= 2;\n\n            unchecked {\n                ++i;\n            }\n        }\n\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\n        currentRootIndex = newRootIndex;\n        roots[newRootIndex] = currentLevelHash;\n\n        nextLeafIndex = _nextIndex + 2;\n        return _nextIndex;\n    }\n\n    function isKnownRoot(bytes32 root) public view returns (bool) {\n        if (root == 0) {\n            return false;\n        }\n        uint32 _currentRootIndex = currentRootIndex;\n        uint256 i = _currentRootIndex;\n        do {\n            if (root == roots[i]) {\n                return true;\n            }\n            if (i == 0) {\n                i = ROOT_HISTORY_SIZE;\n            }\n            --i;\n        } while (i != _currentRootIndex);\n        return false;\n    }\n\n    function getLastRoot() public view returns (bytes32) {\n        return roots[currentRootIndex];\n    }\n}\n"
    },
    "contracts/mocks/MerkleTreeMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"../MerkleTree.sol\";\n\ncontract MerkleTreeMock is MerkleTree {\n    constructor(uint32 levels, address hasher) MerkleTree(levels, hasher) {}\n\n    function insert(bytes32 leaf1, bytes32 leaf2) public returns (uint32 index) {\n        return _insert(leaf1, leaf2);\n    }\n}\n"
    },
    "contracts/mocks/WTokenMock.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/ERC20.sol\";\n\ncontract WTokenMock is ERC20 {\n    constructor() ERC20(\"WTokenMock\", \"WToken\") {}\n\n    function deposit() external payable {\n        _mint(msg.sender, msg.value);\n    }\n\n    function withdraw(uint256 value) external {\n        _burn(msg.sender, value);\n        (bool success, ) = msg.sender.call{value: value}(\"\");\n        require(success, \"WETH: ETH transfer failed\");\n    }\n}\n"
    },
    "contracts/Pool.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/IERC20.sol\";\nimport {SafeERC20} from \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"@openzeppelin/contracts/security/ReentrancyGuard.sol\";\nimport \"./interfaces/IVerifier.sol\";\nimport \"./interfaces/IPool.sol\";\nimport \"./interfaces/IAavePool.sol\";\nimport \"./interfaces/IAavePoolAddressProvider.sol\";\nimport \"./interfaces/IAToken.sol\";\nimport \"./MerkleTree.sol\";\nimport {TxType, ProofArgs, ExtData, AaveReserveData} from \"./libraries/DataTypes.sol\";\nimport {WadRayMath} from \"./libraries/WadRayMath.sol\";\nimport {MathUtils} from \"./libraries/MathUtils.sol\";\nimport {Errors} from \"./libraries/Errors.sol\";\n\ncontract Pool is IPool, MerkleTree, ReentrancyGuard {\n    using WadRayMath for uint256;\n    using SafeERC20 for IERC20;\n\n    IERC20 public immutable token;\n    IAavePoolAddressProvider public immutable aavePoolAddressProvider;\n\n    IVerifier public immutable verifier2;\n    IVerifier public immutable verifier16;\n\n    uint256 public maxDepositAmount;\n\n    mapping(bytes32 => bool) public nullifierHashes;\n\n    constructor(\n        uint32 numLevels_,\n        uint256 maxDepositAmount_,\n        IERC20 token_,\n        IAavePoolAddressProvider aavePoolAddressProvider_,\n        address hasher_,\n        IVerifier verifier2_,\n        IVerifier verifier16_\n    ) MerkleTree(numLevels_, hasher_) {\n        maxDepositAmount = maxDepositAmount_;\n        token = token_;\n        aavePoolAddressProvider = aavePoolAddressProvider_;\n        verifier2 = verifier2_;\n        verifier16 = verifier16_;\n    }\n\n    function supply(ProofArgs calldata args, ExtData calldata extData)\n        external\n        returns (uint256 supplyAmount)\n    {\n        (address aavePoolAddress, , uint256 nextLiquidityIndex) = getAavePoolAndReserveData();\n\n        uint256 supplyAmount = extData.scaledAmount.rayMul(nextLiquidityIndex);\n\n        token.safeTransferFrom(msg.sender, address(this), supplyAmount);\n        token.approve(aavePoolAddress, supplyAmount);\n        IAavePool(aavePoolAddress).supply(address(token), supplyAmount, address(this), 0);\n\n        _transact(args, extData, TxType.SUPPLY);\n\n        return supplyAmount;\n    }\n\n    function withdraw(ProofArgs calldata args, ExtData calldata extData)\n        external\n        returns (uint256 withdrawAmount)\n    {\n        if (extData.recipient == address(0)) revert Errors.ZeroRecipientAddress();\n\n        _transact(args, extData, TxType.WITHDRAW);\n\n        (\n            address aavePoolAddress,\n            AaveReserveData memory aaveReserveData,\n\n        ) = getAavePoolAndReserveData();\n\n        uint256 normalizedIncome = getAaveReserveNormalizedIncome();\n\n        uint256 withdrawAmount = extData.scaledAmount.rayMul(normalizedIncome);\n        uint256 fee = extData.scaledFee.rayMul(normalizedIncome);\n\n        IAToken(aaveReserveData.aTokenAddress).approve(aavePoolAddress, withdrawAmount);\n        IAavePool(aavePoolAddress).withdraw(address(token), withdrawAmount + fee, address(this));\n\n        token.safeTransfer(extData.recipient, withdrawAmount);\n        if (fee > 0) {\n            token.safeTransfer(extData.relayer, fee);\n        }\n    }\n\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external {\n        _transact(args, extData, TxType.TRANSFER);\n\n        if (extData.scaledFee > 0) {\n            (\n                address aavePoolAddress,\n                AaveReserveData memory aaveReserveData,\n\n            ) = getAavePoolAndReserveData();\n\n            uint256 normalizedIncome = IAavePool(aavePoolAddress).getReserveNormalizedIncome(\n                address(token)\n            );\n            uint256 fee = extData.scaledFee.rayMul(normalizedIncome);\n\n            IAToken(aaveReserveData.aTokenAddress).approve(aavePoolAddress, fee);\n            token.safeTransfer(extData.relayer, fee);\n        }\n    }\n\n    function getAavePoolAndReserveData()\n        public\n        view\n        returns (\n            address,\n            AaveReserveData memory,\n            uint256\n        )\n    {\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\n            address(token)\n        );\n\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\n            reserveData.currentLiquidityRate,\n            reserveData.lastUpdateTimestamp\n        );\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\n        return (aavePoolAddress, reserveData, nextLiquidityIndex);\n    }\n\n    function getAaveReserveNormalizedIncome() public view returns (uint256) {\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\n        return IAavePool(aavePoolAddress).getReserveNormalizedIncome(address(token));\n    }\n\n    function getBalance(uint256 scaledAmount) public view returns (uint256) {\n        uint256 normalizedIncome = getAaveReserveNormalizedIncome();\n        uint256 balance = scaledAmount.rayMul(normalizedIncome);\n        return balance;\n    }\n\n    function getAaveNextLiquidityIndex() public view returns (uint256) {\n        (, , uint256 nextLiquidityIndex) = getAavePoolAndReserveData();\n        return nextLiquidityIndex;\n    }\n\n    function getAaveScaledAmountAdjusted(uint256 amount, uint256 deltaSec)\n        public\n        view\n        returns (uint256, uint256)\n    {\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\n            address(token)\n        );\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterestAdjusted(\n            reserveData.currentLiquidityRate,\n            reserveData.lastUpdateTimestamp,\n            deltaSec\n        );\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\n        uint256 scaledAmount = amount.rayDiv(nextLiquidityIndex);\n        return (scaledAmount, nextLiquidityIndex);\n    }\n\n    function isSpent(bytes32 nullifierHash) public view returns (bool) {\n        return nullifierHashes[nullifierHash];\n    }\n\n    function getPublicScaledAmount(\n        TxType txType,\n        uint256 extScaledAmount,\n        uint256 scaledFee\n    ) public pure returns (uint256) {\n        if (txType == TxType.SUPPLY) {\n            require(extScaledAmount >= scaledFee, \"Ext amount less than scaledFee\");\n        }\n\n        uint256 publicScaledAmount;\n\n        if (txType == TxType.SUPPLY) {\n            publicScaledAmount = extScaledAmount;\n        } else if (txType == TxType.WITHDRAW) {\n            publicScaledAmount = FIELD_SIZE - (extScaledAmount + scaledFee);\n        } else if (txType == TxType.TRANSFER) {\n            publicScaledAmount = scaledFee;\n        } else {\n            revert(\"Invalid TxType\");\n        }\n\n        return publicScaledAmount;\n    }\n\n    function verifyProof(ProofArgs calldata args) public view returns (bool) {\n        if (args.inputNullifiers.length == 2) {\n            return\n                verifier2.verifyProof(\n                    args.proof.a,\n                    args.proof.b,\n                    args.proof.c,\n                    [\n                        uint256(args.root),\n                        args.publicScaledAmount,\n                        uint256(args.extDataHash),\n                        uint256(args.inputNullifiers[0]),\n                        uint256(args.inputNullifiers[1]),\n                        uint256(args.outputCommitments[0]),\n                        uint256(args.outputCommitments[1])\n                    ]\n                );\n        } else if (args.inputNullifiers.length == 16) {\n            return\n                verifier16.verifyProof(\n                    args.proof.a,\n                    args.proof.b,\n                    args.proof.c,\n                    [\n                        uint256(args.root),\n                        args.publicScaledAmount,\n                        uint256(args.extDataHash),\n                        uint256(args.inputNullifiers[0]),\n                        uint256(args.inputNullifiers[1]),\n                        uint256(args.inputNullifiers[2]),\n                        uint256(args.inputNullifiers[3]),\n                        uint256(args.inputNullifiers[4]),\n                        uint256(args.inputNullifiers[5]),\n                        uint256(args.inputNullifiers[6]),\n                        uint256(args.inputNullifiers[7]),\n                        uint256(args.inputNullifiers[8]),\n                        uint256(args.inputNullifiers[9]),\n                        uint256(args.inputNullifiers[10]),\n                        uint256(args.inputNullifiers[11]),\n                        uint256(args.inputNullifiers[12]),\n                        uint256(args.inputNullifiers[13]),\n                        uint256(args.inputNullifiers[14]),\n                        uint256(args.inputNullifiers[15]),\n                        uint256(args.outputCommitments[0]),\n                        uint256(args.outputCommitments[1])\n                    ]\n                );\n        } else {\n            revert(\"Unsupported input count\");\n        }\n    }\n\n    function _transact(\n        ProofArgs calldata args,\n        ExtData calldata extData,\n        TxType txType\n    ) internal nonReentrant {\n        if (!isKnownRoot(args.root)) {\n            revert Errors.InvalidMerkleRoot();\n        }\n\n        for (uint256 i = 0; i < args.inputNullifiers.length; ++i) {\n            if (isSpent(args.inputNullifiers[i])) {\n                revert Errors.InputNullifierAlreadySpent();\n            }\n        }\n\n        uint256 calcExtDataHash = uint256(keccak256(abi.encode(extData))) % FIELD_SIZE;\n        if (calcExtDataHash != uint256(args.extDataHash)) {\n            revert Errors.InvalidExtDataHash();\n        }\n\n        uint256 calculatedPublicScaledAmount = getPublicScaledAmount(\n            txType,\n            extData.scaledAmount,\n            extData.scaledFee\n        );\n\n        if (calculatedPublicScaledAmount != args.publicScaledAmount) {\n            revert Errors.InvalidPublicScaledAmount();\n        }\n\n        if (!verifyProof(args)) {\n            revert Errors.InvalidTxProof();\n        }\n\n        for (uint256 i = 0; i < args.inputNullifiers.length; ++i) {\n            nullifierHashes[args.inputNullifiers[i]] = true;\n        }\n\n        _insert(args.outputCommitments[0], args.outputCommitments[1]);\n\n        emit CommitmentInserted(\n            args.outputCommitments[0],\n            nextLeafIndex - 2,\n            extData.encryptedOutput1\n        );\n        emit CommitmentInserted(\n            args.outputCommitments[1],\n            nextLeafIndex - 1,\n            extData.encryptedOutput2\n        );\n        for (uint256 i = 0; i < args.inputNullifiers.length; i++) {\n            emit NullifierUsed(args.inputNullifiers[i]);\n        }\n    }\n}\n"
    },
    "contracts/WTokenGateway.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.17;\n\nimport \"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\";\nimport \"./interfaces/IWToken.sol\";\nimport \"./interfaces/IPool.sol\";\nimport \"./interfaces/IWTokenGateway.sol\";\nimport {WadRayMath} from \"./libraries/WadRayMath.sol\";\nimport {ProofArgs, ExtData, AaveReserveData} from \"./libraries/DataTypes.sol\";\n\ncontract WTokenGateway is IWTokenGateway {\n    using WadRayMath for uint256;\n    IWToken public immutable wToken;\n\n    constructor(address wToken_) {\n        wToken = IWToken(wToken_);\n    }\n\n    function supply(\n        address pool,\n        ProofArgs calldata args,\n        ExtData calldata extData\n    ) external payable {\n        (, , uint256 nextLiquidityIndex) = IPool(pool).getAavePoolAndReserveData();\n\n        uint256 supplyAmount = extData.scaledAmount.rayMul(nextLiquidityIndex);\n\n        if (msg.value < supplyAmount) {\n            revert NotEnoughTokensSent(msg.value, supplyAmount);\n        }\n\n        wToken.deposit{value: supplyAmount}();\n        wToken.approve(pool, supplyAmount);\n\n        IPool(pool).supply(args, extData);\n\n        // Refund change back to the sender\n        uint256 changeAmount = msg.value - supplyAmount;\n        if (changeAmount != 0) {\n            _safeTransferETH(msg.sender, changeAmount);\n        }\n    }\n\n    function withdraw(\n        address pool,\n        address unwrappedTokenReceiver,\n        ProofArgs calldata args,\n        ExtData calldata extData\n    ) external {\n        if (extData.recipient != address(this)) {\n            revert RecipientNotGateway(extData.recipient, address(this));\n        }\n\n        uint256 withdrawAmount = IPool(pool).withdraw(args, extData);\n\n        wToken.approve(address(wToken), withdrawAmount);\n        wToken.withdraw(withdrawAmount);\n\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\n    }\n\n    function _safeTransferETH(address to, uint256 value) internal {\n        (bool success, ) = to.call{value: value}(new bytes(0));\n        require(success, \"ETH_TRANSFER_FAILED\");\n    }\n\n    receive() external payable {}\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}