{
  "address": "0xDbe6d4B26B6112a99831D4a785c6D4bDF314c6D7",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wToken_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "sent",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "required",
          "type": "uint256"
        }
      ],
      "name": "NotEnoughTokensSent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "recipient",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "gateway",
          "type": "address"
        }
      ],
      "name": "RecipientNotGateway",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "supply",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "wToken",
      "outputs": [
        {
          "internalType": "contract IWToken",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "pool",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "unwrappedTokenReceiver",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6948fef43df2f544294447bf08d58b296f167678ffe63619f4810446a6094e5c",
  "receipt": {
    "to": null,
    "from": "0x80630fBf405eD070F10c8fFE8E9A83C60736a770",
    "contractAddress": "0xDbe6d4B26B6112a99831D4a785c6D4bDF314c6D7",
    "transactionIndex": 92,
    "gasUsed": "1247555",
    "logsBloom": "0x
    "blockHash": "0xc78e49ea93b517a7e5e25ed25a8fe379bd86cf50a6451e97625d4d6359e62757",
    "transactionHash": "0x6948fef43df2f544294447bf08d58b296f167678ffe63619f4810446a6094e5c",
    "logs": [],
    "blockNumber": 8364732,
    "cumulativeGasUsed": "24786969",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xCCB14936C2E000ED8393A571D15A2672537838Ad"
  ],
  "numDeployments": 1,
  "solcInputHash": "c5ef8ed0a69ae399137dd2e38e5bcdd2",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wToken_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"sent\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"required\",\"type\":\"uint256\"}],\"name\":\"NotEnoughTokensSent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"gateway\",\"type\":\"address\"}],\"name\":\"RecipientNotGateway\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"supply\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"wToken\",\"outputs\":[{\"internalType\":\"contract IWToken\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"pool\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"unwrappedTokenReceiver\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/WTokenGateway.sol\":\"WTokenGateway\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/WTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"./interfaces/IWToken.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IWTokenGateway.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/WadRayMath.sol\\\";\\nimport {ProofArgs, ExtData, AaveReserveData} from \\\"./libraries/DataTypes.sol\\\";\\n\\ncontract WTokenGateway is IWTokenGateway {\\n    using WadRayMath for uint256;\\n    IWToken public immutable wToken;\\n\\n    constructor(address wToken_) {\\n        wToken = IWToken(wToken_);\\n    }\\n\\n    function supply(\\n        address pool,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external payable {\\n        (, , uint256 nextLiquidityIndex) = IPool(pool).getAavePoolAndReserveData();\\n\\n        uint256 supplyAmount = extData.scaledAmount.rayMul(nextLiquidityIndex);\\n\\n        if (msg.value < supplyAmount) {\\n            revert NotEnoughTokensSent(msg.value, supplyAmount);\\n        }\\n\\n        wToken.deposit{value: supplyAmount}();\\n        wToken.approve(pool, supplyAmount);\\n\\n        IPool(pool).supply(args, extData);\\n\\n        // Refund change back to the sender\\n        uint256 changeAmount = msg.value - supplyAmount;\\n        if (changeAmount != 0) {\\n            _safeTransferETH(msg.sender, changeAmount);\\n        }\\n    }\\n\\n    function withdraw(\\n        address pool,\\n        address unwrappedTokenReceiver,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external {\\n        if (extData.recipient != address(this)) {\\n            revert RecipientNotGateway(extData.recipient, address(this));\\n        }\\n\\n        uint256 withdrawAmount = IPool(pool).withdraw(args, extData);\\n\\n        wToken.approve(address(wToken), withdrawAmount);\\n        wToken.withdraw(withdrawAmount);\\n\\n        _safeTransferETH(unwrappedTokenReceiver, withdrawAmount);\\n    }\\n\\n    function _safeTransferETH(address to, uint256 value) internal {\\n        (bool success, ) = to.call{value: value}(new bytes(0));\\n        require(success, \\\"ETH_TRANSFER_FAILED\\\");\\n    }\\n\\n    receive() external payable {}\\n}\\n\",\"keccak256\":\"0xd330a903d78af93820478169baefd96a4fcce47d978ab2ea25d5a551b5e862e3\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ProofArgs, ExtData, AaveReserveData} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IPool {\\n    event CommitmentInserted(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\\n    event NullifierUsed(bytes32 nullifier);\\n\\n    function supply(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function withdraw(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external;\\n\\n    function verifyProof(ProofArgs calldata args) external view returns (bool);\\n\\n    function getAavePoolAndReserveData()\\n        external\\n        view\\n        returns (\\n            address,\\n            AaveReserveData memory,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x96b0fe044e4e5c40fcb902db519fc9d9f568a56d83ae0507fecd7727dfdab3a5\",\"license\":\"MIT\"},\"contracts/interfaces/IWToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\n\\ninterface IWToken is IERC20 {\\n    function deposit() external payable;\\n\\n    function withdraw(uint256 amount) external;\\n\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x696235f2024f94ca8afa8510724d7db52205ed4edd67a9d907e96803d89cba08\",\"license\":\"MIT\"},\"contracts/interfaces/IWTokenGateway.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\nimport {ProofArgs, ExtData, AaveReserveData} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IWTokenGateway {\\n    error NotEnoughTokensSent(uint256 sent, uint256 required);\\n    error RecipientNotGateway(address recipient, address gateway);\\n\\n    function supply(\\n        address pool,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external payable;\\n\\n    function withdraw(\\n        address pool,\\n        address unwrappedTokenReceiver,\\n        ProofArgs calldata args,\\n        ExtData calldata extData\\n    ) external;\\n}\\n\",\"keccak256\":\"0x0a741012db5317600fdfae303193c679b9eeb351abbbb83548299030f414611e\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nenum TxType {\\n    SUPPLY,\\n    WITHDRAW,\\n    TRANSFER\\n}\\n\\nstruct ExtData {\\n    address recipient;\\n    uint256 scaledAmount;\\n    address relayer;\\n    uint256 scaledFee;\\n    bytes encryptedOutput1;\\n    bytes encryptedOutput2;\\n}\\n\\nstruct Proof {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n}\\n\\nstruct ProofArgs {\\n    Proof proof;\\n    bytes32 root;\\n    bytes32[] inputNullifiers;\\n    bytes32[2] outputCommitments;\\n    uint256 publicScaledAmount;\\n    bytes32 extDataHash;\\n}\\n\\nstruct AaveReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct AaveReserveData {\\n    AaveReserveConfigurationMap configuration;\\n    uint128 liquidityIndex;\\n    uint128 currentLiquidityRate;\\n    uint128 variableBorrowIndex;\\n    uint128 currentVariableBorrowRate;\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    uint16 id;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    address interestRateStrategyAddress;\\n    uint128 accruedToTreasury;\\n    uint128 unbacked;\\n    uint128 isolationModeTotalDebt;\\n}\\n\",\"keccak256\":\"0x29acafe153b054782e2a844477a2639d8bc4f51a0aeee0bc49981509be5c0fa9\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36c36a8efa47d9d055dac1680477f43022c66aaf15a7811ab5bc2b26223dccc7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620016e6380380620016e68339818101604052810190620000379190620000dc565b8073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1681525050506200010e565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000a48262000077565b9050919050565b620000b68162000097565b8114620000c257600080fd5b50565b600081519050620000d681620000ab565b92915050565b600060208284031215620000f557620000f462000072565b5b60006200010584828501620000c5565b91505092915050565b6080516115996200014d600039600081816101ce0152818161020a0152818161028d015281816103290152818161042501526104a601526115996000f3fe6080604052600436106100385760003560e01c8063078c4830146100445780630babd8641461006d578063207db819146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906107ee565b6100b4565b005b34801561007957600080fd5b50610082610327565b60405161008f91906108ec565b60405180910390f35b6100b260048036038101906100ad9190610907565b61034b565b005b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906100de9190610992565b73ffffffffffffffffffffffffffffffffffffffff161461014a5780600001602081019061010c9190610992565b306040517fb52905ef0000000000000000000000000000000000000000000000000000000081526004016101419291906109ce565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16636c3bc78584846040518363ffffffff1660e01b8152600401610187929190610f58565b6020604051808303816000875af11580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190610fa4565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610247929190610fe0565b6020604051808303816000875af1158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190611041565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016102e4919061106e565b600060405180830381600087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b5050505061032084826105ed565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008373ffffffffffffffffffffffffffffffffffffffff1663c5fd0ab46040518163ffffffff1660e01b815260040161022060405180830381865afa158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd919061137d565b9250505060006103da8284602001356106ed90919063ffffffff16565b9050803410156104235734816040517f79d146bc00000000000000000000000000000000000000000000000000000000815260040161041a9291906113d2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b386836040518363ffffffff1660e01b81526004016104ff929190610fe0565b6020604051808303816000875af115801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190611041565b508473ffffffffffffffffffffffffffffffffffffffff1663528454c285856040518363ffffffff1660e01b815260040161057e929190610f58565b6020604051808303816000875af115801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610fa4565b50600081346105d0919061142a565b9050600081146105e5576105e433826105ed565b5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115610622576106216110a3565b5b6040519080825280601f01601f1916602001820160405280156106545781602001600182028036833780820191505090505b5060405161066291906114cf565b60006040518083038185875af1925050503d806000811461069f576040519150601f19603f3d011682016040523d82523d6000602084013e6106a4565b606091505b50509050806106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df90611543565b60405180910390fd5b505050565b6000816b019d971e4fe8401e74000000600019030483111582151761071157600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107778261074c565b9050919050565b6107878161076c565b811461079257600080fd5b50565b6000813590506107a48161077e565b92915050565b600080fd5b60006101c082840312156107c6576107c56107aa565b5b81905092915050565b600060c082840312156107e5576107e46107aa565b5b81905092915050565b6000806000806080858703121561080857610807610742565b5b600061081687828801610795565b945050602061082787828801610795565b935050604085013567ffffffffffffffff81111561084857610847610747565b5b610854878288016107af565b925050606085013567ffffffffffffffff81111561087557610874610747565b5b610881878288016107cf565b91505092959194509250565b6000819050919050565b60006108b26108ad6108a88461074c565b61088d565b61074c565b9050919050565b60006108c482610897565b9050919050565b60006108d6826108b9565b9050919050565b6108e6816108cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b6000806000606084860312156109205761091f610742565b5b600061092e86828701610795565b935050602084013567ffffffffffffffff81111561094f5761094e610747565b5b61095b868287016107af565b925050604084013567ffffffffffffffff81111561097c5761097b610747565b5b610988868287016107cf565b9150509250925092565b6000602082840312156109a8576109a7610742565b5b60006109b684828501610795565b91505092915050565b6109c88161076c565b82525050565b60006040820190506109e360008301856109bf565b6109f060208301846109bf565b9392505050565b600082905092915050565b600082905092915050565b82818337505050565b610a2260408383610a0d565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000610a5d8383610a16565b60408301905092915050565b6000604082019050919050565b610a7f81610a31565b610a898184610a3c565b9250610a9482610a47565b8060005b83811015610acd57610aaa8284610a02565b610ab48782610a51565b9650610abf83610a69565b925050600181019050610a98565b505050505050565b6101008201610ae76000830183610a02565b610af46000850182610a16565b50610b026040830183610a26565b610b0f6040850182610a76565b50610b1d60c0830183610a02565b610b2a60c0850182610a16565b50505050565b6000819050919050565b610b4381610b30565b8114610b4e57600080fd5b50565b600081359050610b6081610b3a565b92915050565b6000610b756020840184610b51565b905092915050565b610b8681610b30565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610bb857610bb7610b96565b5b83810192508235915060208301925067ffffffffffffffff821115610be057610bdf610b8c565b5b602082023603831315610bf657610bf5610b91565b5b509250929050565b600082825260208201905092915050565b600080fd5b6000610c208385610bfe565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610c5357610c52610c0f565b5b602083029250610c64838584610a0d565b82840190509392505050565b600082905092915050565b610c8760408383610a0d565b5050565b6000819050919050565b610c9e81610c8b565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b6000610cd06020840184610cac565b905092915050565b610ce181610c8b565b82525050565b60006101c08301610cfb60008401846109f7565b610d086000860182610ad5565b50610d17610100840184610b66565b610d25610100860182610b7d565b50610d34610120840184610b9b565b858303610120870152610d48838284610c14565b92505050610d5a610140840184610c70565b610d68610140860182610c7b565b50610d77610180840184610cc1565b610d85610180860182610cd8565b50610d946101a0840184610b66565b610da26101a0860182610b7d565b508091505092915050565b6000610dbc6020840184610795565b905092915050565b610dcd8161076c565b82525050565b60008083356001602003843603038112610df057610def610b96565b5b83810192508235915060208301925067ffffffffffffffff821115610e1857610e17610b8c565b5b600182023603831315610e2e57610e2d610b91565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610e738385610e36565b9350610e80838584610e47565b610e8983610e56565b840190509392505050565b600060c08301610ea76000840184610dad565b610eb46000860182610dc4565b50610ec26020840184610cc1565b610ecf6020860182610cd8565b50610edd6040840184610dad565b610eea6040860182610dc4565b50610ef86060840184610cc1565b610f056060860182610cd8565b50610f136080840184610dd3565b8583036080870152610f26838284610e67565b92505050610f3760a0840184610dd3565b85830360a0870152610f4a838284610e67565b925050508091505092915050565b60006040820190508181036000830152610f728185610ce7565b90508181036020830152610f868184610e94565b90509392505050565b600081519050610f9e81610c95565b92915050565b600060208284031215610fba57610fb9610742565b5b6000610fc884828501610f8f565b91505092915050565b610fda81610c8b565b82525050565b6000604082019050610ff560008301856109bf565b6110026020830184610fd1565b9392505050565b60008115159050919050565b61101e81611009565b811461102957600080fd5b50565b60008151905061103b81611015565b92915050565b60006020828403121561105757611056610742565b5b60006110658482850161102c565b91505092915050565b60006020820190506110836000830184610fd1565b92915050565b6000815190506110988161077e565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110db82610e56565b810181811067ffffffffffffffff821117156110fa576110f96110a3565b5b80604052505050565b600061110d610738565b905061111982826110d2565b919050565b6000602082840312156111345761113361109e565b5b61113e6020611103565b9050600061114e84828501610f8f565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61117f8161115a565b811461118a57600080fd5b50565b60008151905061119c81611176565b92915050565b600064ffffffffff82169050919050565b6111bc816111a2565b81146111c757600080fd5b50565b6000815190506111d9816111b3565b92915050565b600061ffff82169050919050565b6111f6816111df565b811461120157600080fd5b50565b600081519050611213816111ed565b92915050565b60006101e082840312156112305761122f61109e565b5b61123b6101e0611103565b9050600061124b8482850161111e565b600083015250602061125f8482850161118d565b60208301525060406112738482850161118d565b60408301525060606112878482850161118d565b606083015250608061129b8482850161118d565b60808301525060a06112af8482850161118d565b60a08301525060c06112c3848285016111ca565b60c08301525060e06112d784828501611204565b60e0830152506101006112ec84828501611089565b6101008301525061012061130284828501611089565b6101208301525061014061131884828501611089565b6101408301525061016061132e84828501611089565b610160830152506101806113448482850161118d565b610180830152506101a061135a8482850161118d565b6101a0830152506101c06113708482850161118d565b6101c08301525092915050565b6000806000610220848603121561139757611396610742565b5b60006113a586828701611089565b93505060206113b686828701611219565b9250506102006113c886828701610f8f565b9150509250925092565b60006040820190506113e76000830185610fd1565b6113f46020830184610fd1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143582610c8b565b915061144083610c8b565b9250828203905081811115611458576114576113fb565b5b92915050565b600081519050919050565b600081905092915050565b60005b83811015611492578082015181840152602081019050611477565b60008484015250505050565b60006114a98261145e565b6114b38185611469565b93506114c3818560208601611474565b80840191505092915050565b60006114db828461149e565b915081905092915050565b600082825260208201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b600061152d6013836114e6565b9150611538826114f7565b602082019050919050565b6000602082019050818103600083015261155c81611520565b905091905056fea2646970667358221220c269cc4b7940df180ab0217d7d913e62b6ae0279fdaf95f3a7225825ac9a817364736f6c63430008110033",
  "deployedBytecode": "0x6080604052600436106100385760003560e01c8063078c4830146100445780630babd8641461006d578063207db819146100985761003f565b3661003f57005b600080fd5b34801561005057600080fd5b5061006b600480360381019061006691906107ee565b6100b4565b005b34801561007957600080fd5b50610082610327565b60405161008f91906108ec565b60405180910390f35b6100b260048036038101906100ad9190610907565b61034b565b005b3073ffffffffffffffffffffffffffffffffffffffff168160000160208101906100de9190610992565b73ffffffffffffffffffffffffffffffffffffffff161461014a5780600001602081019061010c9190610992565b306040517fb52905ef0000000000000000000000000000000000000000000000000000000081526004016101419291906109ce565b60405180910390fd5b60008473ffffffffffffffffffffffffffffffffffffffff16636c3bc78584846040518363ffffffff1660e01b8152600401610187929190610f58565b6020604051808303816000875af11580156101a6573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101ca9190610fa4565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b37f0000000000000000000000000000000000000000000000000000000000000000836040518363ffffffff1660e01b8152600401610247929190610fe0565b6020604051808303816000875af1158015610266573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061028a9190611041565b507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16632e1a7d4d826040518263ffffffff1660e01b81526004016102e4919061106e565b600060405180830381600087803b1580156102fe57600080fd5b505af1158015610312573d6000803e3d6000fd5b5050505061032084826105ed565b5050505050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008373ffffffffffffffffffffffffffffffffffffffff1663c5fd0ab46040518163ffffffff1660e01b815260040161022060405180830381865afa158015610399573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103bd919061137d565b9250505060006103da8284602001356106ed90919063ffffffff16565b9050803410156104235734816040517f79d146bc00000000000000000000000000000000000000000000000000000000815260040161041a9291906113d2565b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b15801561048b57600080fd5b505af115801561049f573d6000803e3d6000fd5b50505050507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b386836040518363ffffffff1660e01b81526004016104ff929190610fe0565b6020604051808303816000875af115801561051e573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105429190611041565b508473ffffffffffffffffffffffffffffffffffffffff1663528454c285856040518363ffffffff1660e01b815260040161057e929190610f58565b6020604051808303816000875af115801561059d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105c19190610fa4565b50600081346105d0919061142a565b9050600081146105e5576105e433826105ed565b5b505050505050565b60008273ffffffffffffffffffffffffffffffffffffffff1682600067ffffffffffffffff811115610622576106216110a3565b5b6040519080825280601f01601f1916602001820160405280156106545781602001600182028036833780820191505090505b5060405161066291906114cf565b60006040518083038185875af1925050503d806000811461069f576040519150601f19603f3d011682016040523d82523d6000602084013e6106a4565b606091505b50509050806106e8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016106df90611543565b60405180910390fd5b505050565b6000816b019d971e4fe8401e74000000600019030483111582151761071157600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b6000604051905090565b600080fd5b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006107778261074c565b9050919050565b6107878161076c565b811461079257600080fd5b50565b6000813590506107a48161077e565b92915050565b600080fd5b60006101c082840312156107c6576107c56107aa565b5b81905092915050565b600060c082840312156107e5576107e46107aa565b5b81905092915050565b6000806000806080858703121561080857610807610742565b5b600061081687828801610795565b945050602061082787828801610795565b935050604085013567ffffffffffffffff81111561084857610847610747565b5b610854878288016107af565b925050606085013567ffffffffffffffff81111561087557610874610747565b5b610881878288016107cf565b91505092959194509250565b6000819050919050565b60006108b26108ad6108a88461074c565b61088d565b61074c565b9050919050565b60006108c482610897565b9050919050565b60006108d6826108b9565b9050919050565b6108e6816108cb565b82525050565b600060208201905061090160008301846108dd565b92915050565b6000806000606084860312156109205761091f610742565b5b600061092e86828701610795565b935050602084013567ffffffffffffffff81111561094f5761094e610747565b5b61095b868287016107af565b925050604084013567ffffffffffffffff81111561097c5761097b610747565b5b610988868287016107cf565b9150509250925092565b6000602082840312156109a8576109a7610742565b5b60006109b684828501610795565b91505092915050565b6109c88161076c565b82525050565b60006040820190506109e360008301856109bf565b6109f060208301846109bf565b9392505050565b600082905092915050565b600082905092915050565b82818337505050565b610a2260408383610a0d565b5050565b600082905092915050565b600060029050919050565b600081905092915050565b6000819050919050565b6000610a5d8383610a16565b60408301905092915050565b6000604082019050919050565b610a7f81610a31565b610a898184610a3c565b9250610a9482610a47565b8060005b83811015610acd57610aaa8284610a02565b610ab48782610a51565b9650610abf83610a69565b925050600181019050610a98565b505050505050565b6101008201610ae76000830183610a02565b610af46000850182610a16565b50610b026040830183610a26565b610b0f6040850182610a76565b50610b1d60c0830183610a02565b610b2a60c0850182610a16565b50505050565b6000819050919050565b610b4381610b30565b8114610b4e57600080fd5b50565b600081359050610b6081610b3a565b92915050565b6000610b756020840184610b51565b905092915050565b610b8681610b30565b82525050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112610bb857610bb7610b96565b5b83810192508235915060208301925067ffffffffffffffff821115610be057610bdf610b8c565b5b602082023603831315610bf657610bf5610b91565b5b509250929050565b600082825260208201905092915050565b600080fd5b6000610c208385610bfe565b93507f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831115610c5357610c52610c0f565b5b602083029250610c64838584610a0d565b82840190509392505050565b600082905092915050565b610c8760408383610a0d565b5050565b6000819050919050565b610c9e81610c8b565b8114610ca957600080fd5b50565b600081359050610cbb81610c95565b92915050565b6000610cd06020840184610cac565b905092915050565b610ce181610c8b565b82525050565b60006101c08301610cfb60008401846109f7565b610d086000860182610ad5565b50610d17610100840184610b66565b610d25610100860182610b7d565b50610d34610120840184610b9b565b858303610120870152610d48838284610c14565b92505050610d5a610140840184610c70565b610d68610140860182610c7b565b50610d77610180840184610cc1565b610d85610180860182610cd8565b50610d946101a0840184610b66565b610da26101a0860182610b7d565b508091505092915050565b6000610dbc6020840184610795565b905092915050565b610dcd8161076c565b82525050565b60008083356001602003843603038112610df057610def610b96565b5b83810192508235915060208301925067ffffffffffffffff821115610e1857610e17610b8c565b5b600182023603831315610e2e57610e2d610b91565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b6000601f19601f8301169050919050565b6000610e738385610e36565b9350610e80838584610e47565b610e8983610e56565b840190509392505050565b600060c08301610ea76000840184610dad565b610eb46000860182610dc4565b50610ec26020840184610cc1565b610ecf6020860182610cd8565b50610edd6040840184610dad565b610eea6040860182610dc4565b50610ef86060840184610cc1565b610f056060860182610cd8565b50610f136080840184610dd3565b8583036080870152610f26838284610e67565b92505050610f3760a0840184610dd3565b85830360a0870152610f4a838284610e67565b925050508091505092915050565b60006040820190508181036000830152610f728185610ce7565b90508181036020830152610f868184610e94565b90509392505050565b600081519050610f9e81610c95565b92915050565b600060208284031215610fba57610fb9610742565b5b6000610fc884828501610f8f565b91505092915050565b610fda81610c8b565b82525050565b6000604082019050610ff560008301856109bf565b6110026020830184610fd1565b9392505050565b60008115159050919050565b61101e81611009565b811461102957600080fd5b50565b60008151905061103b81611015565b92915050565b60006020828403121561105757611056610742565b5b60006110658482850161102c565b91505092915050565b60006020820190506110836000830184610fd1565b92915050565b6000815190506110988161077e565b92915050565b600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b6110db82610e56565b810181811067ffffffffffffffff821117156110fa576110f96110a3565b5b80604052505050565b600061110d610738565b905061111982826110d2565b919050565b6000602082840312156111345761113361109e565b5b61113e6020611103565b9050600061114e84828501610f8f565b60008301525092915050565b60006fffffffffffffffffffffffffffffffff82169050919050565b61117f8161115a565b811461118a57600080fd5b50565b60008151905061119c81611176565b92915050565b600064ffffffffff82169050919050565b6111bc816111a2565b81146111c757600080fd5b50565b6000815190506111d9816111b3565b92915050565b600061ffff82169050919050565b6111f6816111df565b811461120157600080fd5b50565b600081519050611213816111ed565b92915050565b60006101e082840312156112305761122f61109e565b5b61123b6101e0611103565b9050600061124b8482850161111e565b600083015250602061125f8482850161118d565b60208301525060406112738482850161118d565b60408301525060606112878482850161118d565b606083015250608061129b8482850161118d565b60808301525060a06112af8482850161118d565b60a08301525060c06112c3848285016111ca565b60c08301525060e06112d784828501611204565b60e0830152506101006112ec84828501611089565b6101008301525061012061130284828501611089565b6101208301525061014061131884828501611089565b6101408301525061016061132e84828501611089565b610160830152506101806113448482850161118d565b610180830152506101a061135a8482850161118d565b6101a0830152506101c06113708482850161118d565b6101c08301525092915050565b6000806000610220848603121561139757611396610742565b5b60006113a586828701611089565b93505060206113b686828701611219565b9250506102006113c886828701610f8f565b9150509250925092565b60006040820190506113e76000830185610fd1565b6113f46020830184610fd1565b9392505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b600061143582610c8b565b915061144083610c8b565b9250828203905081811115611458576114576113fb565b5b92915050565b600081519050919050565b600081905092915050565b60005b83811015611492578082015181840152602081019050611477565b60008484015250505050565b60006114a98261145e565b6114b38185611469565b93506114c3818560208601611474565b80840191505092915050565b60006114db828461149e565b915081905092915050565b600082825260208201905092915050565b7f4554485f5452414e534645525f4641494c454400000000000000000000000000600082015250565b600061152d6013836114e6565b9150611538826114f7565b602082019050919050565b6000602082019050818103600083015261155c81611520565b905091905056fea2646970667358221220c269cc4b7940df180ab0217d7d913e62b6ae0279fdaf95f3a7225825ac9a817364736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}