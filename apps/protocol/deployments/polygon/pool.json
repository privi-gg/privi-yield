{
  "address": "0xb91682AB65Fb9e70cD619BFFd8FB045020Fb6de0",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "uint32",
          "name": "numLevels_",
          "type": "uint32"
        },
        {
          "internalType": "uint256",
          "name": "maxSupplyAmount_",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "token_",
          "type": "address"
        },
        {
          "internalType": "contract IAavePoolAddressProvider",
          "name": "aavePoolAddressProvider_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "hasher_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "verifier2_",
          "type": "address"
        },
        {
          "internalType": "contract IVerifier",
          "name": "verifier16_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "InputNullifierAlreadySpent",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "leaf",
          "type": "bytes32"
        }
      ],
      "name": "InputOutOfFieldSize",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidExtDataHash",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidMerkleRoot",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "depth",
          "type": "uint256"
        }
      ],
      "name": "InvalidMerkleTreeDepth",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidPublicScaledAmount",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "scaledAmount",
          "type": "uint256"
        }
      ],
      "name": "InvalidScaledAmount",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "InvalidTxProof",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MerkleTreeFull",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "maxAmountAllowed",
          "type": "uint256"
        }
      ],
      "name": "SupplyExceedsMaxLimit",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "ZeroRecipientAddress",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "commitment",
          "type": "bytes32"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "leafIndex",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes",
          "name": "encryptedOutput",
          "type": "bytes"
        }
      ],
      "name": "CommitmentInserted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "nullifier",
          "type": "bytes32"
        }
      ],
      "name": "NullifierUsed",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "FIELD_SIZE",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ROOT_HISTORY_SIZE",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "ZERO_LEAF",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "aavePoolAddressProvider",
      "outputs": [
        {
          "internalType": "contract IAavePoolAddressProvider",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentRootIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "filledSubtrees",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAaveNextLiquidityIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAavePoolAndReserveData",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256",
                  "name": "data",
                  "type": "uint256"
                }
              ],
              "internalType": "struct AaveReserveConfigurationMap",
              "name": "configuration",
              "type": "tuple"
            },
            {
              "internalType": "uint128",
              "name": "liquidityIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentLiquidityRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "variableBorrowIndex",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentVariableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "currentStableBorrowRate",
              "type": "uint128"
            },
            {
              "internalType": "uint40",
              "name": "lastUpdateTimestamp",
              "type": "uint40"
            },
            {
              "internalType": "uint16",
              "name": "id",
              "type": "uint16"
            },
            {
              "internalType": "address",
              "name": "aTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "stableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "variableDebtTokenAddress",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "interestRateStrategyAddress",
              "type": "address"
            },
            {
              "internalType": "uint128",
              "name": "accruedToTreasury",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "unbacked",
              "type": "uint128"
            },
            {
              "internalType": "uint128",
              "name": "isolationModeTotalDebt",
              "type": "uint128"
            }
          ],
          "internalType": "struct AaveReserveData",
          "name": "",
          "type": "tuple"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAaveReserveNormalizedIncome",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "getAaveScaledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "deltaSec",
          "type": "uint256"
        }
      ],
      "name": "getAaveScaledAmountAdjusted",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "scaledAmount",
          "type": "uint256"
        }
      ],
      "name": "getBalance",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getLastRoot",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "enum TxType",
          "name": "txType",
          "type": "uint8"
        },
        {
          "internalType": "uint256",
          "name": "extScaledAmount",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "scaledFee",
          "type": "uint256"
        }
      ],
      "name": "getPublicScaledAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "left",
          "type": "bytes32"
        },
        {
          "internalType": "bytes32",
          "name": "right",
          "type": "bytes32"
        }
      ],
      "name": "hashLeftRight",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "hasher",
      "outputs": [
        {
          "internalType": "contract IHasher",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "root",
          "type": "bytes32"
        }
      ],
      "name": "isKnownRoot",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "nullifierHash",
          "type": "bytes32"
        }
      ],
      "name": "isSpent",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "maxSupplyAmount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "nextLeafIndex",
      "outputs": [
        {
          "internalType": "uint32",
          "name": "",
          "type": "uint32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "name": "nullifierHashes",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "numLevels",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "roots",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "supply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "transfer",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier16",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "verifier2",
      "outputs": [
        {
          "internalType": "contract IVerifier",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        }
      ],
      "name": "verifyProof",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "components": [
                {
                  "internalType": "uint256[2]",
                  "name": "a",
                  "type": "uint256[2]"
                },
                {
                  "internalType": "uint256[2][2]",
                  "name": "b",
                  "type": "uint256[2][2]"
                },
                {
                  "internalType": "uint256[2]",
                  "name": "c",
                  "type": "uint256[2]"
                }
              ],
              "internalType": "struct Proof",
              "name": "proof",
              "type": "tuple"
            },
            {
              "internalType": "bytes32",
              "name": "root",
              "type": "bytes32"
            },
            {
              "internalType": "bytes32[]",
              "name": "inputNullifiers",
              "type": "bytes32[]"
            },
            {
              "internalType": "bytes32[2]",
              "name": "outputCommitments",
              "type": "bytes32[2]"
            },
            {
              "internalType": "uint256",
              "name": "publicScaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "bytes32",
              "name": "extDataHash",
              "type": "bytes32"
            }
          ],
          "internalType": "struct ProofArgs",
          "name": "args",
          "type": "tuple"
        },
        {
          "components": [
            {
              "internalType": "address",
              "name": "recipient",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledAmount",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "relayer",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "scaledFee",
              "type": "uint256"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput1",
              "type": "bytes"
            },
            {
              "internalType": "bytes",
              "name": "encryptedOutput2",
              "type": "bytes"
            }
          ],
          "internalType": "struct ExtData",
          "name": "extData",
          "type": "tuple"
        }
      ],
      "name": "withdraw",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "zeroes",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0xe2529644485b7cb2e44038bf01c0a6b02e2eb1d17e388041baff3c17ba2786fe",
  "receipt": {
    "to": null,
    "from": "0xE6D21Ad1Ea84177F365aEcdDa15573916B548943",
    "contractAddress": "0xb91682AB65Fb9e70cD619BFFd8FB045020Fb6de0",
    "transactionIndex": 150,
    "gasUsed": "5737535",
    "logsBloom": "0x
    "blockHash": "0xde26351be457578aba37a03f45a0577d6c608d3744d1fcc20eec99fb327279c5",
    "transactionHash": "0xe2529644485b7cb2e44038bf01c0a6b02e2eb1d17e388041baff3c17ba2786fe",
    "logs": [
      {
        "transactionIndex": 150,
        "blockNumber": 38987713,
        "transactionHash": "0xe2529644485b7cb2e44038bf01c0a6b02e2eb1d17e388041baff3c17ba2786fe",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x000000000000000000000000e6d21ad1ea84177f365aecdda15573916b548943",
          "0x0000000000000000000000001efecb61a2f80aa34d3b9218b564a64d05946290"
        ],
        "data": "0x00000000000000000000000000000000000000000000000002f1523415534c3a000000000000000000000000000000000000000000000000516b9386c525b1450000000000000000000000000000000000000000000006e1577fd0917a5cd42b0000000000000000000000000000000000000000000000004e7a4152afd2650b0000000000000000000000000000000000000000000006e15a7122c58fb02065",
        "logIndex": 504,
        "blockHash": "0xde26351be457578aba37a03f45a0577d6c608d3744d1fcc20eec99fb327279c5"
      }
    ],
    "blockNumber": 38987713,
    "cumulativeGasUsed": "29962315",
    "status": 1,
    "byzantium": true
  },
  "args": [
    20,
    "5000000000000000000",
    "0x0d500B1d8E8eF31E21C99d1Db9A6444d3ADf1270",
    "0xa97684ead0e402dC232d5A977953DF7ECBaB3CDb",
    "0x1F25D061B190b04a571a68a0Bb7d0972EDAFcAc1",
    "0x9982D71C22a126132993c77f8d3A1A76954de80E",
    "0x3212B94c51b32289083CeA861718faE3AaE8a02c"
  ],
  "numDeployments": 1,
  "solcInputHash": "3bbc948b0292485c726f252a0559c335",
  "metadata": "{\"compiler\":{\"version\":\"0.8.17+commit.8df45f5f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"uint32\",\"name\":\"numLevels_\",\"type\":\"uint32\"},{\"internalType\":\"uint256\",\"name\":\"maxSupplyAmount_\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"token_\",\"type\":\"address\"},{\"internalType\":\"contract IAavePoolAddressProvider\",\"name\":\"aavePoolAddressProvider_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"hasher_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"verifier2_\",\"type\":\"address\"},{\"internalType\":\"contract IVerifier\",\"name\":\"verifier16_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"InputNullifierAlreadySpent\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"leaf\",\"type\":\"bytes32\"}],\"name\":\"InputOutOfFieldSize\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidExtDataHash\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidMerkleRoot\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"depth\",\"type\":\"uint256\"}],\"name\":\"InvalidMerkleTreeDepth\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidPublicScaledAmount\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"InvalidScaledAmount\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"InvalidTxProof\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MerkleTreeFull\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxAmountAllowed\",\"type\":\"uint256\"}],\"name\":\"SupplyExceedsMaxLimit\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"ZeroRecipientAddress\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"commitment\",\"type\":\"bytes32\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"leafIndex\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes\",\"name\":\"encryptedOutput\",\"type\":\"bytes\"}],\"name\":\"CommitmentInserted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"nullifier\",\"type\":\"bytes32\"}],\"name\":\"NullifierUsed\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"FIELD_SIZE\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ROOT_HISTORY_SIZE\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"ZERO_LEAF\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"aavePoolAddressProvider\",\"outputs\":[{\"internalType\":\"contract IAavePoolAddressProvider\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentRootIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"filledSubtrees\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveNextLiquidityIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAavePoolAndReserveData\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"components\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"data\",\"type\":\"uint256\"}],\"internalType\":\"struct AaveReserveConfigurationMap\",\"name\":\"configuration\",\"type\":\"tuple\"},{\"internalType\":\"uint128\",\"name\":\"liquidityIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentLiquidityRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"variableBorrowIndex\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentVariableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"currentStableBorrowRate\",\"type\":\"uint128\"},{\"internalType\":\"uint40\",\"name\":\"lastUpdateTimestamp\",\"type\":\"uint40\"},{\"internalType\":\"uint16\",\"name\":\"id\",\"type\":\"uint16\"},{\"internalType\":\"address\",\"name\":\"aTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"stableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"variableDebtTokenAddress\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"interestRateStrategyAddress\",\"type\":\"address\"},{\"internalType\":\"uint128\",\"name\":\"accruedToTreasury\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"unbacked\",\"type\":\"uint128\"},{\"internalType\":\"uint128\",\"name\":\"isolationModeTotalDebt\",\"type\":\"uint128\"}],\"internalType\":\"struct AaveReserveData\",\"name\":\"\",\"type\":\"tuple\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAaveReserveNormalizedIncome\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"getAaveScaledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deltaSec\",\"type\":\"uint256\"}],\"name\":\"getAaveScaledAmountAdjusted\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"}],\"name\":\"getBalance\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getLastRoot\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"enum TxType\",\"name\":\"txType\",\"type\":\"uint8\"},{\"internalType\":\"uint256\",\"name\":\"extScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"}],\"name\":\"getPublicScaledAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"left\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32\",\"name\":\"right\",\"type\":\"bytes32\"}],\"name\":\"hashLeftRight\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"hasher\",\"outputs\":[{\"internalType\":\"contract IHasher\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"}],\"name\":\"isKnownRoot\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"nullifierHash\",\"type\":\"bytes32\"}],\"name\":\"isSpent\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"maxSupplyAmount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"nextLeafIndex\",\"outputs\":[{\"internalType\":\"uint32\",\"name\":\"\",\"type\":\"uint32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"name\":\"nullifierHashes\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"numLevels\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"roots\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"supply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"transfer\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier16\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"verifier2\",\"outputs\":[{\"internalType\":\"contract IVerifier\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"}],\"name\":\"verifyProof\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"components\":[{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"}],\"internalType\":\"struct Proof\",\"name\":\"proof\",\"type\":\"tuple\"},{\"internalType\":\"bytes32\",\"name\":\"root\",\"type\":\"bytes32\"},{\"internalType\":\"bytes32[]\",\"name\":\"inputNullifiers\",\"type\":\"bytes32[]\"},{\"internalType\":\"bytes32[2]\",\"name\":\"outputCommitments\",\"type\":\"bytes32[2]\"},{\"internalType\":\"uint256\",\"name\":\"publicScaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"extDataHash\",\"type\":\"bytes32\"}],\"internalType\":\"struct ProofArgs\",\"name\":\"args\",\"type\":\"tuple\"},{\"components\":[{\"internalType\":\"address\",\"name\":\"recipient\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledAmount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"relayer\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"scaledFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput1\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"encryptedOutput2\",\"type\":\"bytes\"}],\"internalType\":\"struct ExtData\",\"name\":\"extData\",\"type\":\"tuple\"}],\"name\":\"withdraw\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"zeroes\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/Pool.sol\":\"Pool\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (security/ReentrancyGuard.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and making it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        _nonReentrantBefore();\\n        _;\\n        _nonReentrantAfter();\\n    }\\n\\n    function _nonReentrantBefore() private {\\n        // On the first call to nonReentrant, _status will be _NOT_ENTERED\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n    }\\n\\n    function _nonReentrantAfter() private {\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x190dd6f8d592b7e4e930feb7f4313aeb8e1c4ad3154c27ce1cf6a512fc30d8cc\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.6.0) (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `to`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address to, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `from` to `to` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 amount\\n    ) external returns (bool);\\n}\\n\",\"keccak256\":\"0x9750c6b834f7b43000631af5cc30001c5f547b3ceb3635488f140f60e897ea6b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/extensions/draft-IERC20Permit.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/extensions/draft-IERC20Permit.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 Permit extension allowing approvals to be made via signatures, as defined in\\n * https://eips.ethereum.org/EIPS/eip-2612[EIP-2612].\\n *\\n * Adds the {permit} method, which can be used to change an account's ERC20 allowance (see {IERC20-allowance}) by\\n * presenting a message signed by the account. By not relying on {IERC20-approve}, the token holder account doesn't\\n * need to send a transaction, and thus is not required to hold Ether at all.\\n */\\ninterface IERC20Permit {\\n    /**\\n     * @dev Sets `value` as the allowance of `spender` over ``owner``'s tokens,\\n     * given ``owner``'s signed approval.\\n     *\\n     * IMPORTANT: The same issues {IERC20-approve} has related to transaction\\n     * ordering also apply here.\\n     *\\n     * Emits an {Approval} event.\\n     *\\n     * Requirements:\\n     *\\n     * - `spender` cannot be the zero address.\\n     * - `deadline` must be a timestamp in the future.\\n     * - `v`, `r` and `s` must be a valid `secp256k1` signature from `owner`\\n     * over the EIP712-formatted function arguments.\\n     * - the signature must use ``owner``'s current nonce (see {nonces}).\\n     *\\n     * For more information on the signature format, see the\\n     * https://eips.ethereum.org/EIPS/eip-2612#specification[relevant EIP\\n     * section].\\n     */\\n    function permit(\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) external;\\n\\n    /**\\n     * @dev Returns the current nonce for `owner`. This value must be\\n     * included whenever a signature is generated for {permit}.\\n     *\\n     * Every successful call to {permit} increases ``owner``'s nonce by one. This\\n     * prevents a signature from being used multiple times.\\n     */\\n    function nonces(address owner) external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the domain separator used in the encoding of the signature for {permit}, as defined by {EIP712}.\\n     */\\n    // solhint-disable-next-line func-name-mixedcase\\n    function DOMAIN_SEPARATOR() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf41ca991f30855bf80ffd11e9347856a517b977f0a6c2d52e6421a99b7840329\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../extensions/draft-IERC20Permit.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    function safePermit(\\n        IERC20Permit token,\\n        address owner,\\n        address spender,\\n        uint256 value,\\n        uint256 deadline,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal {\\n        uint256 nonceBefore = token.nonces(owner);\\n        token.permit(owner, spender, value, deadline, v, r, s);\\n        uint256 nonceAfter = token.nonces(owner);\\n        require(nonceAfter == nonceBefore + 1, \\\"SafeERC20: permit did not succeed\\\");\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address-functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9b72f93be69ca894d8492c244259615c4a742afc8d63720dbc8bb81087d9b238\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.8.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xf96f969e24029d43d0df89e59d365f277021dac62b48e1c1e3ebe0acdd7f1ca1\",\"license\":\"MIT\"},\"contracts/MerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"./interfaces/IHasher.sol\\\";\\nimport \\\"./interfaces/IMerkleTree.sol\\\";\\nimport {Errors} from \\\"./libraries/Errors.sol\\\";\\n\\ncontract MerkleTree is IMerkleTree {\\n    uint256 public constant FIELD_SIZE =\\n        21888242871839275222246405745257275088548364400416034343698204186575808495617;\\n\\n    uint32 public constant ROOT_HISTORY_SIZE = 100;\\n\\n    uint256 public constant ZERO_LEAF = uint256(keccak256(\\\"privi\\\")) % FIELD_SIZE;\\n\\n    IHasher public immutable hasher;\\n    uint256 public immutable numLevels;\\n\\n    mapping(uint256 => bytes32) public zeroes;\\n    mapping(uint256 => bytes32) public filledSubtrees;\\n    mapping(uint256 => bytes32) public roots;\\n\\n    uint32 public currentRootIndex;\\n    uint32 public nextLeafIndex;\\n\\n    constructor(uint256 numLevels_, address hasher_) {\\n        if (numLevels_ == 0 || numLevels_ >= 32) revert Errors.InvalidMerkleTreeDepth(numLevels_);\\n\\n        numLevels = numLevels_;\\n        hasher = IHasher(hasher_);\\n\\n        // Calculate the zero nodes\\n        bytes32 zero = bytes32(ZERO_LEAF);\\n        for (uint8 i = 0; i < numLevels_; ) {\\n            zeroes[i] = zero;\\n            filledSubtrees[i] = zero;\\n            zero = hashLeftRight(zero, zero);\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        roots[0] = zero;\\n    }\\n\\n    function hashLeftRight(bytes32 left, bytes32 right) public view returns (bytes32) {\\n        if (uint256(left) >= FIELD_SIZE) revert Errors.InputOutOfFieldSize(left);\\n        if (uint256(right) >= FIELD_SIZE) revert Errors.InputOutOfFieldSize(right);\\n\\n        bytes32[2] memory input;\\n        input[0] = left;\\n        input[1] = right;\\n\\n        return hasher.poseidon(input);\\n    }\\n\\n    function _insert(bytes32 leaf1, bytes32 leaf2) internal returns (uint32 index) {\\n        uint32 _nextIndex = nextLeafIndex;\\n\\n        if (_nextIndex >= 2**numLevels) revert Errors.MerkleTreeFull();\\n\\n        uint32 currentIndex = _nextIndex / 2;\\n\\n        bytes32 currentLevelHash = hashLeftRight(leaf1, leaf2);\\n        bytes32 left;\\n        bytes32 right;\\n\\n        for (uint8 i = 1; i < numLevels; ) {\\n            if (currentIndex % 2 == 0) {\\n                left = currentLevelHash;\\n                right = zeroes[i];\\n                filledSubtrees[i] = currentLevelHash;\\n            } else {\\n                left = filledSubtrees[i];\\n                right = currentLevelHash;\\n            }\\n            currentLevelHash = hashLeftRight(left, right);\\n            currentIndex /= 2;\\n\\n            unchecked {\\n                ++i;\\n            }\\n        }\\n\\n        uint32 newRootIndex = (currentRootIndex + 1) % ROOT_HISTORY_SIZE;\\n        currentRootIndex = newRootIndex;\\n        roots[newRootIndex] = currentLevelHash;\\n\\n        nextLeafIndex = _nextIndex + 2;\\n        return _nextIndex;\\n    }\\n\\n    function isKnownRoot(bytes32 root) public view returns (bool) {\\n        if (root == 0) {\\n            return false;\\n        }\\n        uint32 _currentRootIndex = currentRootIndex;\\n        uint256 i = _currentRootIndex;\\n        do {\\n            if (root == roots[i]) {\\n                return true;\\n            }\\n            if (i == 0) {\\n                i = ROOT_HISTORY_SIZE;\\n            }\\n            --i;\\n        } while (i != _currentRootIndex);\\n        return false;\\n    }\\n\\n    function getLastRoot() public view returns (bytes32) {\\n        return roots[currentRootIndex];\\n    }\\n}\\n\",\"keccak256\":\"0x79081bc7370aced4d98bad6b6f703a4399e61ad4705c19ce06975718056860de\",\"license\":\"MIT\"},\"contracts/Pool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {SafeERC20} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"./interfaces/IVerifier.sol\\\";\\nimport \\\"./interfaces/IPool.sol\\\";\\nimport \\\"./interfaces/IAavePool.sol\\\";\\nimport \\\"./interfaces/IAavePoolAddressProvider.sol\\\";\\nimport \\\"./interfaces/IAToken.sol\\\";\\nimport \\\"./MerkleTree.sol\\\";\\nimport {TxType, ProofArgs, ExtData, AaveReserveData} from \\\"./libraries/DataTypes.sol\\\";\\nimport {WadRayMath} from \\\"./libraries/WadRayMath.sol\\\";\\nimport {MathUtils} from \\\"./libraries/MathUtils.sol\\\";\\n\\ncontract Pool is IPool, MerkleTree, ReentrancyGuard {\\n    using WadRayMath for uint256;\\n    using SafeERC20 for IERC20;\\n\\n    IERC20 public immutable token;\\n    IAavePoolAddressProvider public immutable aavePoolAddressProvider;\\n\\n    IVerifier public immutable verifier2;\\n    IVerifier public immutable verifier16;\\n\\n    uint256 public maxSupplyAmount;\\n\\n    mapping(bytes32 => bool) public nullifierHashes;\\n\\n    constructor(\\n        uint32 numLevels_,\\n        uint256 maxSupplyAmount_,\\n        IERC20 token_,\\n        IAavePoolAddressProvider aavePoolAddressProvider_,\\n        address hasher_,\\n        IVerifier verifier2_,\\n        IVerifier verifier16_\\n    ) MerkleTree(numLevels_, hasher_) {\\n        maxSupplyAmount = maxSupplyAmount_;\\n        token = token_;\\n        aavePoolAddressProvider = aavePoolAddressProvider_;\\n        verifier2 = verifier2_;\\n        verifier16 = verifier16_;\\n    }\\n\\n    function supply(ProofArgs calldata args, ExtData calldata extData) external returns (uint256) {\\n        (address aavePoolAddress, , uint256 nextLiquidityIndex) = getAavePoolAndReserveData();\\n\\n        uint256 supplyAmount = extData.scaledAmount.rayMul(nextLiquidityIndex);\\n\\n        if (supplyAmount > maxSupplyAmount) {\\n            revert SupplyExceedsMaxLimit(supplyAmount, maxSupplyAmount);\\n        }\\n\\n        token.safeTransferFrom(msg.sender, address(this), supplyAmount);\\n        token.approve(aavePoolAddress, supplyAmount);\\n        IAavePool(aavePoolAddress).supply(address(token), supplyAmount, address(this), 0);\\n\\n        _transact(args, extData, TxType.SUPPLY);\\n\\n        return supplyAmount;\\n    }\\n\\n    function withdraw(ProofArgs calldata args, ExtData calldata extData)\\n        external\\n        returns (uint256)\\n    {\\n        if (extData.recipient == address(0)) revert ZeroRecipientAddress();\\n\\n        _transact(args, extData, TxType.WITHDRAW);\\n\\n        (\\n            address aavePoolAddress,\\n            AaveReserveData memory aaveReserveData,\\n\\n        ) = getAavePoolAndReserveData();\\n\\n        uint256 normalizedIncome = getAaveReserveNormalizedIncome();\\n\\n        uint256 withdrawAmount = extData.scaledAmount.rayMul(normalizedIncome);\\n        uint256 fee = extData.scaledFee.rayMul(normalizedIncome);\\n\\n        IAToken(aaveReserveData.aTokenAddress).approve(aavePoolAddress, withdrawAmount);\\n        IAavePool(aavePoolAddress).withdraw(address(token), withdrawAmount + fee, address(this));\\n\\n        token.safeTransfer(extData.recipient, withdrawAmount);\\n        if (fee > 0) {\\n            token.safeTransfer(extData.relayer, fee);\\n        }\\n\\n        return withdrawAmount;\\n    }\\n\\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external {\\n        _transact(args, extData, TxType.TRANSFER);\\n\\n        if (extData.scaledFee > 0) {\\n            (\\n                address aavePoolAddress,\\n                AaveReserveData memory aaveReserveData,\\n\\n            ) = getAavePoolAndReserveData();\\n\\n            uint256 normalizedIncome = IAavePool(aavePoolAddress).getReserveNormalizedIncome(\\n                address(token)\\n            );\\n            uint256 fee = extData.scaledFee.rayMul(normalizedIncome);\\n\\n            IAToken(aaveReserveData.aTokenAddress).approve(aavePoolAddress, fee);\\n            token.safeTransfer(extData.relayer, fee);\\n        }\\n    }\\n\\n    function getAavePoolAndReserveData()\\n        public\\n        view\\n        returns (\\n            address,\\n            AaveReserveData memory,\\n            uint256\\n        )\\n    {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\\n            address(token)\\n        );\\n\\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\\n            reserveData.currentLiquidityRate,\\n            reserveData.lastUpdateTimestamp\\n        );\\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\\n        return (aavePoolAddress, reserveData, nextLiquidityIndex);\\n    }\\n\\n    function getAaveReserveNormalizedIncome() public view returns (uint256) {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        return IAavePool(aavePoolAddress).getReserveNormalizedIncome(address(token));\\n    }\\n\\n    function getBalance(uint256 scaledAmount) public view returns (uint256) {\\n        uint256 normalizedIncome = getAaveReserveNormalizedIncome();\\n        uint256 balance = scaledAmount.rayMul(normalizedIncome);\\n        return balance;\\n    }\\n\\n    function getAaveNextLiquidityIndex() public view returns (uint256) {\\n        (, , uint256 nextLiquidityIndex) = getAavePoolAndReserveData();\\n        return nextLiquidityIndex;\\n    }\\n\\n    function getAaveScaledAmount(uint256 amount) public view returns (uint256) {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\\n            address(token)\\n        );\\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterest(\\n            reserveData.currentLiquidityRate,\\n            reserveData.lastUpdateTimestamp\\n        );\\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\\n        uint256 scaledAmount = amount.rayDiv(nextLiquidityIndex);\\n\\n        return scaledAmount;\\n    }\\n\\n    function getAaveScaledAmountAdjusted(uint256 amount, uint256 deltaSec)\\n        public\\n        view\\n        returns (uint256, uint256)\\n    {\\n        address aavePoolAddress = aavePoolAddressProvider.getPool();\\n        AaveReserveData memory reserveData = IAavePool(aavePoolAddress).getReserveData(\\n            address(token)\\n        );\\n        uint256 cumulatedLiquidityInterest = MathUtils.calculateLinearInterestAdjusted(\\n            reserveData.currentLiquidityRate,\\n            reserveData.lastUpdateTimestamp,\\n            deltaSec\\n        );\\n        uint256 nextLiquidityIndex = cumulatedLiquidityInterest.rayMul(reserveData.liquidityIndex);\\n        uint256 scaledAmount = amount.rayDiv(nextLiquidityIndex);\\n        return (scaledAmount, nextLiquidityIndex);\\n    }\\n\\n    function isSpent(bytes32 nullifierHash) public view returns (bool) {\\n        return nullifierHashes[nullifierHash];\\n    }\\n\\n    function getPublicScaledAmount(\\n        TxType txType,\\n        uint256 extScaledAmount,\\n        uint256 scaledFee\\n    ) public pure returns (uint256) {\\n        if (txType == TxType.SUPPLY) {\\n            require(extScaledAmount >= scaledFee, \\\"Ext amount less than scaledFee\\\");\\n        }\\n\\n        uint256 publicScaledAmount;\\n\\n        if (txType == TxType.SUPPLY) {\\n            publicScaledAmount = extScaledAmount;\\n        } else if (txType == TxType.WITHDRAW) {\\n            publicScaledAmount = FIELD_SIZE - (extScaledAmount + scaledFee);\\n        } else if (txType == TxType.TRANSFER) {\\n            publicScaledAmount = scaledFee;\\n        } else {\\n            revert(\\\"Invalid TxType\\\");\\n        }\\n\\n        return publicScaledAmount;\\n    }\\n\\n    function verifyProof(ProofArgs calldata args) public view returns (bool) {\\n        if (args.inputNullifiers.length == 2) {\\n            return\\n                verifier2.verifyProof(\\n                    args.proof.a,\\n                    args.proof.b,\\n                    args.proof.c,\\n                    [\\n                        uint256(args.root),\\n                        args.publicScaledAmount,\\n                        uint256(args.extDataHash),\\n                        uint256(args.inputNullifiers[0]),\\n                        uint256(args.inputNullifiers[1]),\\n                        uint256(args.outputCommitments[0]),\\n                        uint256(args.outputCommitments[1])\\n                    ]\\n                );\\n        } else if (args.inputNullifiers.length == 16) {\\n            return\\n                verifier16.verifyProof(\\n                    args.proof.a,\\n                    args.proof.b,\\n                    args.proof.c,\\n                    [\\n                        uint256(args.root),\\n                        args.publicScaledAmount,\\n                        uint256(args.extDataHash),\\n                        uint256(args.inputNullifiers[0]),\\n                        uint256(args.inputNullifiers[1]),\\n                        uint256(args.inputNullifiers[2]),\\n                        uint256(args.inputNullifiers[3]),\\n                        uint256(args.inputNullifiers[4]),\\n                        uint256(args.inputNullifiers[5]),\\n                        uint256(args.inputNullifiers[6]),\\n                        uint256(args.inputNullifiers[7]),\\n                        uint256(args.inputNullifiers[8]),\\n                        uint256(args.inputNullifiers[9]),\\n                        uint256(args.inputNullifiers[10]),\\n                        uint256(args.inputNullifiers[11]),\\n                        uint256(args.inputNullifiers[12]),\\n                        uint256(args.inputNullifiers[13]),\\n                        uint256(args.inputNullifiers[14]),\\n                        uint256(args.inputNullifiers[15]),\\n                        uint256(args.outputCommitments[0]),\\n                        uint256(args.outputCommitments[1])\\n                    ]\\n                );\\n        } else {\\n            revert(\\\"Unsupported input count\\\");\\n        }\\n    }\\n\\n    function _transact(\\n        ProofArgs calldata args,\\n        ExtData calldata extData,\\n        TxType txType\\n    ) internal nonReentrant {\\n        if (!isKnownRoot(args.root)) {\\n            revert InvalidMerkleRoot();\\n        }\\n\\n        for (uint256 i = 0; i < args.inputNullifiers.length; ++i) {\\n            if (isSpent(args.inputNullifiers[i])) {\\n                revert InputNullifierAlreadySpent();\\n            }\\n        }\\n\\n        uint256 calcExtDataHash = uint256(keccak256(abi.encode(extData))) % FIELD_SIZE;\\n        if (calcExtDataHash != uint256(args.extDataHash)) {\\n            revert InvalidExtDataHash();\\n        }\\n\\n        uint256 calculatedPublicScaledAmount = getPublicScaledAmount(\\n            txType,\\n            extData.scaledAmount,\\n            extData.scaledFee\\n        );\\n\\n        if (calculatedPublicScaledAmount != args.publicScaledAmount) {\\n            revert InvalidPublicScaledAmount();\\n        }\\n\\n        if (!verifyProof(args)) {\\n            revert InvalidTxProof();\\n        }\\n\\n        for (uint256 i = 0; i < args.inputNullifiers.length; ++i) {\\n            nullifierHashes[args.inputNullifiers[i]] = true;\\n        }\\n\\n        _insert(args.outputCommitments[0], args.outputCommitments[1]);\\n\\n        emit CommitmentInserted(\\n            args.outputCommitments[0],\\n            nextLeafIndex - 2,\\n            extData.encryptedOutput1\\n        );\\n        emit CommitmentInserted(\\n            args.outputCommitments[1],\\n            nextLeafIndex - 1,\\n            extData.encryptedOutput2\\n        );\\n        for (uint256 i = 0; i < args.inputNullifiers.length; i++) {\\n            emit NullifierUsed(args.inputNullifiers[i]);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xb597c9315fc2ac0af5bff4dee84d0d985bc509ce66775481e9ba0af6b3e040c1\",\"license\":\"MIT\"},\"contracts/interfaces/IAToken.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.9;\\n\\ninterface IAToken {\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    function transfer(address receiver, uint256 amount) external returns (bool);\\n\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    function POOL() external view returns (address);\\n}\\n\",\"keccak256\":\"0xcea28fbc673ba26716f22b1af472394d1ef5aaf4f951ff3755b60c4d059ac494\",\"license\":\"MIT\"},\"contracts/interfaces/IAavePool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {AaveReserveData} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IAavePool {\\n    function supply(\\n        address asset,\\n        uint256 amount,\\n        address onBehalfOf,\\n        uint16 referralCode\\n    ) external;\\n\\n    function withdraw(\\n        address asset,\\n        uint256 amount,\\n        address to\\n    ) external returns (uint256);\\n\\n    function getReserveNormalizedIncome(address asset) external view returns (uint256);\\n\\n    function getReserveData(address asset) external view returns (AaveReserveData memory);\\n}\\n\",\"keccak256\":\"0xa87b2b5d1ab24b599901f83e664d9aeb4abc028f078e4a896d5bffe3c0edd466\",\"license\":\"MIT\"},\"contracts/interfaces/IAavePoolAddressProvider.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IAavePoolAddressProvider {\\n    function getPool() external view returns (address);\\n\\n    function getAddress(bytes32 id) external view returns (address);\\n}\\n\",\"keccak256\":\"0x950733901ca7cc8e258c1437d9e504f6ce41715a867fb16a8b2d593e0cf78ffe\",\"license\":\"MIT\"},\"contracts/interfaces/IHasher.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IHasher {\\n    function poseidon(bytes32[2] calldata inputs) external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0xf1aa66e61d0cf4f703a27b38a34d43d8bc0abe326e94c26014da3434b1ebbf5c\",\"license\":\"MIT\"},\"contracts/interfaces/IMerkleTree.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IMerkleTree {\\n    function hashLeftRight(bytes32 left, bytes32 right) external view returns (bytes32);\\n\\n    function isKnownRoot(bytes32 root) external view returns (bool);\\n\\n    function getLastRoot() external view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xb2bee50729ac9fdd2648c8733f3f344184affdb29fcb652114b9c43d5802651f\",\"license\":\"MIT\"},\"contracts/interfaces/IPool.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {ProofArgs, ExtData, AaveReserveData} from \\\"../libraries/DataTypes.sol\\\";\\n\\ninterface IPool {\\n    event CommitmentInserted(bytes32 commitment, uint256 leafIndex, bytes encryptedOutput);\\n    event NullifierUsed(bytes32 nullifier);\\n\\n    error InvalidTxProof();\\n    error InvalidMerkleRoot();\\n    error InputNullifierAlreadySpent();\\n    error InvalidExtDataHash();\\n    error InvalidPublicScaledAmount();\\n    error InvalidScaledAmount(uint256 scaledAmount);\\n    error ZeroRecipientAddress();\\n    error SupplyExceedsMaxLimit(uint256 amount, uint256 maxAmountAllowed);\\n\\n    function supply(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function withdraw(ProofArgs calldata args, ExtData calldata extData) external returns (uint256);\\n\\n    function transfer(ProofArgs calldata args, ExtData calldata extData) external;\\n\\n    function verifyProof(ProofArgs calldata args) external view returns (bool);\\n\\n    function getAavePoolAndReserveData()\\n        external\\n        view\\n        returns (\\n            address,\\n            AaveReserveData memory,\\n            uint256\\n        );\\n}\\n\",\"keccak256\":\"0x08fc87b3ba09661fa52fb960cffc3ab1ec02ca9dcfbdb38cc1d9ed5211138be6\",\"license\":\"MIT\"},\"contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\ninterface IVerifier {\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[7] memory inputs\\n    ) external view returns (bool r);\\n\\n    function verifyProof(\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        uint256[21] memory inputs\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xb5a4f402e4bb3990abd455a49808cfb144cbb1aac6a74b25f62f14ece73501da\",\"license\":\"MIT\"},\"contracts/libraries/DataTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nenum TxType {\\n    SUPPLY,\\n    WITHDRAW,\\n    TRANSFER\\n}\\n\\nstruct ExtData {\\n    address recipient;\\n    uint256 scaledAmount;\\n    address relayer;\\n    uint256 scaledFee;\\n    bytes encryptedOutput1;\\n    bytes encryptedOutput2;\\n}\\n\\nstruct Proof {\\n    uint256[2] a;\\n    uint256[2][2] b;\\n    uint256[2] c;\\n}\\n\\nstruct ProofArgs {\\n    Proof proof;\\n    bytes32 root;\\n    bytes32[] inputNullifiers;\\n    bytes32[2] outputCommitments;\\n    uint256 publicScaledAmount;\\n    bytes32 extDataHash;\\n}\\n\\nstruct AaveReserveConfigurationMap {\\n    uint256 data;\\n}\\n\\nstruct AaveReserveData {\\n    AaveReserveConfigurationMap configuration;\\n    uint128 liquidityIndex;\\n    uint128 currentLiquidityRate;\\n    uint128 variableBorrowIndex;\\n    uint128 currentVariableBorrowRate;\\n    uint128 currentStableBorrowRate;\\n    uint40 lastUpdateTimestamp;\\n    uint16 id;\\n    address aTokenAddress;\\n    address stableDebtTokenAddress;\\n    address variableDebtTokenAddress;\\n    address interestRateStrategyAddress;\\n    uint128 accruedToTreasury;\\n    uint128 unbacked;\\n    uint128 isolationModeTotalDebt;\\n}\\n\",\"keccak256\":\"0x29acafe153b054782e2a844477a2639d8bc4f51a0aeee0bc49981509be5c0fa9\",\"license\":\"MIT\"},\"contracts/libraries/Errors.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nlibrary Errors {\\n    error InvalidTxProof();\\n    error InvalidMerkleRoot();\\n    error InputNullifierAlreadySpent();\\n    error InvalidExtDataHash();\\n    error InvalidPublicScaledAmount();\\n    error InvalidScaledAmount(uint256 scaledAmount);\\n    error ZeroRecipientAddress();\\n    error DepositAmountTooHigh(uint256 amount, uint256 maxAmountAllowed);\\n\\n    error InputOutOfFieldSize(bytes32 leaf);\\n    error MerkleTreeFull();\\n    error InvalidMerkleTreeDepth(uint256 depth);\\n}\\n\",\"keccak256\":\"0x4d4f27ebc1a09b72489f6d07046176e54c4ed2d281529616248205dbd8a53298\",\"license\":\"MIT\"},\"contracts/libraries/MathUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.17;\\n\\nimport {WadRayMath} from \\\"./WadRayMath.sol\\\";\\n\\nlibrary MathUtils {\\n    using WadRayMath for uint256;\\n\\n    uint256 internal constant SECONDS_PER_YEAR = 365 days;\\n\\n    /**\\n     * @dev Function to calculate the interest accumulated using a linear interest rate formula\\n     * @param rate The interest rate, in ray\\n     * @param lastUpdateTimestamp The timestamp of the last update of the interest\\n     * @return The interest rate linearly accumulated during the timeDelta, in ray\\n     **/\\n    function calculateLinearInterest(uint256 rate, uint40 lastUpdateTimestamp)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 result = rate * (block.timestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n\\n    function calculateLinearInterestAdjusted(\\n        uint256 rate,\\n        uint40 lastUpdateTimestamp,\\n        uint256 adjustedDeltaTimestamp\\n    ) internal view returns (uint256) {\\n        uint256 result = rate *\\n            (block.timestamp + adjustedDeltaTimestamp - uint256(lastUpdateTimestamp));\\n        unchecked {\\n            result = result / SECONDS_PER_YEAR;\\n        }\\n\\n        return WadRayMath.RAY + result;\\n    }\\n}\\n\",\"keccak256\":\"0x3a0d290019994ac34e64235c80a7abeb020a90ea2d475e6bac9eaa28c6efdb76\",\"license\":\"MIT\"},\"contracts/libraries/WadRayMath.sol\":{\"content\":\"// SPDX-License-Identifier: BUSL-1.1\\npragma solidity 0.8.17;\\n\\n/**\\n * @title WadRayMath library\\n * @author Aave\\n * @notice Provides functions to perform calculations with Wad and Ray units\\n * @dev Provides mul and div function for wads (decimal numbers with 18 digits of precision) and rays (decimal numbers\\n * with 27 digits of precision)\\n * @dev Operations are rounded. If a value is >=.5, will be rounded up, otherwise rounded down.\\n **/\\nlibrary WadRayMath {\\n    // HALF_WAD and HALF_RAY expressed with extended notation as constant with operations are not supported in Yul assembly\\n    uint256 internal constant WAD = 1e18;\\n    uint256 internal constant HALF_WAD = 0.5e18;\\n\\n    uint256 internal constant RAY = 1e27;\\n    uint256 internal constant HALF_RAY = 0.5e27;\\n\\n    uint256 internal constant WAD_RAY_RATIO = 1e9;\\n\\n    /**\\n     * @dev Multiplies two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a*b, in wad\\n     **/\\n    function wadMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_WAD) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_WAD), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_WAD), WAD)\\n        }\\n    }\\n\\n    /**\\n     * @dev Divides two wad, rounding half up to the nearest wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @param b Wad\\n     * @return c = a/b, in wad\\n     **/\\n    function wadDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / WAD\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), WAD))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, WAD), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @notice Multiplies two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raymul b\\n     **/\\n    function rayMul(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - HALF_RAY) / b\\n        assembly {\\n            if iszero(or(iszero(b), iszero(gt(a, div(sub(not(0), HALF_RAY), b))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, b), HALF_RAY), RAY)\\n        }\\n    }\\n\\n    /**\\n     * @notice Divides two ray, rounding half up to the nearest ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @param b Ray\\n     * @return c = a raydiv b\\n     **/\\n    function rayDiv(uint256 a, uint256 b) internal pure returns (uint256 c) {\\n        // to avoid overflow, a <= (type(uint256).max - halfB) / RAY\\n        assembly {\\n            if or(iszero(b), iszero(iszero(gt(a, div(sub(not(0), div(b, 2)), RAY))))) {\\n                revert(0, 0)\\n            }\\n\\n            c := div(add(mul(a, RAY), div(b, 2)), b)\\n        }\\n    }\\n\\n    /**\\n     * @dev Casts ray down to wad\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Ray\\n     * @return b = a converted to wad, rounded half up to the nearest wad\\n     **/\\n    function rayToWad(uint256 a) internal pure returns (uint256 b) {\\n        assembly {\\n            b := div(a, WAD_RAY_RATIO)\\n            let remainder := mod(a, WAD_RAY_RATIO)\\n            if iszero(lt(remainder, div(WAD_RAY_RATIO, 2))) {\\n                b := add(b, 1)\\n            }\\n        }\\n    }\\n\\n    /**\\n     * @dev Converts wad up to ray\\n     * @dev assembly optimized for improved gas savings, see https://twitter.com/transmissions11/status/1451131036377571328\\n     * @param a Wad\\n     * @return b = a converted in ray\\n     **/\\n    function wadToRay(uint256 a) internal pure returns (uint256 b) {\\n        // to avoid overflow, b/WAD_RAY_RATIO == a\\n        assembly {\\n            b := mul(a, WAD_RAY_RATIO)\\n\\n            if iszero(eq(div(b, WAD_RAY_RATIO), a)) {\\n                revert(0, 0)\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x36c36a8efa47d9d055dac1680477f43022c66aaf15a7811ab5bc2b26223dccc7\",\"license\":\"BUSL-1.1\"}},\"version\":1}",
  "bytecode": "0x6101406040523480156200001257600080fd5b50604051620053ee380380620053ee83398181016040528101906200003891906200061b565b8663ffffffff1683600082148062000051575060208210155b156200009657816040517fd33482df0000000000000000000000000000000000000000000000000000000081526004016200008d9190620006df565b60405180910390fd5b8160a081815250508073ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff168152505060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f4e79ab3536e2fdce1b6af37a519fb69876a66b4e3b240a16632957de6990118e60001c6200012591906200072b565b60001b905060005b838160ff1610156200018e57816000808360ff1681526020019081526020016000208190555081600160008360ff168152602001908152602001600020819055506200018082836200029860201b60201c565b91508060010190506200012d565b508060026000808152602001908152602001600020819055505050506001600481905550856005819055508473ffffffffffffffffffffffffffffffffffffffff1660c08173ffffffffffffffffffffffffffffffffffffffff16815250508373ffffffffffffffffffffffffffffffffffffffff1660e08173ffffffffffffffffffffffffffffffffffffffff16815250508173ffffffffffffffffffffffffffffffffffffffff166101008173ffffffffffffffffffffffffffffffffffffffff16815250508073ffffffffffffffffffffffffffffffffffffffff166101208173ffffffffffffffffffffffffffffffffffffffff16815250505050505050505062000905565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106200030457826040517fce31f759000000000000000000000000000000000000000000000000000000008152600401620002fb91906200077e565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c106200036e57816040517fce31f7590000000000000000000000000000000000000000000000000000000081526004016200036591906200077e565b60405180910390fd5b6200037862000444565b838160006002811062000390576200038f6200079b565b5b6020020181815250508281600160028110620003b157620003b06200079b565b5b60200201818152505060805173ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b8152600401620003f7919062000885565b602060405180830381865afa15801562000415573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906200043b9190620008d3565b91505092915050565b6040518060400160405280600290602082028036833780820191505090505090565b600080fd5b600063ffffffff82169050919050565b62000486816200046b565b81146200049257600080fd5b50565b600081519050620004a6816200047b565b92915050565b6000819050919050565b620004c181620004ac565b8114620004cd57600080fd5b50565b600081519050620004e181620004b6565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006200051482620004e7565b9050919050565b6000620005288262000507565b9050919050565b6200053a816200051b565b81146200054657600080fd5b50565b6000815190506200055a816200052f565b92915050565b60006200056d8262000507565b9050919050565b6200057f8162000560565b81146200058b57600080fd5b50565b6000815190506200059f8162000574565b92915050565b620005b08162000507565b8114620005bc57600080fd5b50565b600081519050620005d081620005a5565b92915050565b6000620005e38262000507565b9050919050565b620005f581620005d6565b81146200060157600080fd5b50565b6000815190506200061581620005ea565b92915050565b600080600080600080600060e0888a0312156200063d576200063c62000466565b5b60006200064d8a828b0162000495565b9750506020620006608a828b01620004d0565b9650506040620006738a828b0162000549565b9550506060620006868a828b016200058e565b9450506080620006998a828b01620005bf565b93505060a0620006ac8a828b0162000604565b92505060c0620006bf8a828b0162000604565b91505092959891949750929550565b620006d981620004ac565b82525050565b6000602082019050620006f66000830184620006ce565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b60006200073882620004ac565b91506200074583620004ac565b925082620007585762000757620006fc565b5b828206905092915050565b6000819050919050565b620007788162000763565b82525050565b60006020820190506200079560008301846200076d565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b620007f58162000763565b82525050565b6000620008098383620007ea565b60208301905092915050565b6000602082019050919050565b6200082d81620007ca565b620008398184620007d5565b92506200084682620007e0565b8060005b838110156200087d578151620008618782620007fb565b96506200086e8362000815565b9250506001810190506200084a565b505050505050565b60006040820190506200089c600083018462000822565b92915050565b620008ad8162000763565b8114620008b957600080fd5b50565b600081519050620008cd81620008a2565b92915050565b600060208284031215620008ec57620008eb62000466565b5b6000620008fc84828501620008bc565b91505092915050565b60805160a05160c05160e0516101005161012051614a06620009e8600039600081816107650152610ce4015260008181610b3401526111770152600081816107410152818161094501528181611b1001528181611caf0152611ee50152600081816109f401528181611219015281816112600152818161131b01528181611520015281816115c70152818161162d01528181611774015281816118aa01528181611bbf01528181611d5e01528181611f920152612016015260008181611e580152818161284b01526128df01526000818161089d0152611ea60152614a066000f3fe608060405234801561001057600080fd5b50600436106101e55760003560e01c80639fceb0ff1161010f578063cd87a3b4116100a2578063ed33639f11610071578063ed33639f146105ff578063f178e47c1461061d578063f65037751461064d578063fc0c546a1461066b576101e5565b8063cd87a3b414610563578063d227d33914610581578063e013eb01146105b1578063e5285dcc146105cf576101e5565b8063ba70f757116100de578063ba70f757146104c5578063bc95a804146104e3578063c2b40ae414610513578063c5fd0ab414610543576101e5565b80639fceb0ff1461043d578063a828d08a14610459578063af013ec314610489578063b0dc4efc146104a7576101e5565b80633b839d6c11610187578063528454c211610156578063528454c21461038f5780636c3bc785146103bf5780636d9833e3146103ef57806390eeb02b1461041f576101e5565b80633b839d6c146102f2578063414a37ba1461032357806347f3c89214610341578063522d0d7014610371576101e5565b806322be751d116101c357806322be751d1461026857806325375dd5146102865780632fc0355f146102a457806338bf282e146102c2576101e5565b80630be4f422146101ea57806317cc915c146102085780631e01043914610238575b600080fd5b6101f2610689565b6040516101ff9190612de5565b60405180910390f35b610222600480360381019061021d9190612e4a565b61069f565b60405161022f9190612e92565b60405180910390f35b610252600480360381019061024d9190612ee3565b6106bf565b60405161025f9190612f1f565b60405180910390f35b6102706106ed565b60405161027d9190612f1f565b60405180910390f35b61028e61073f565b60405161029b9190612fb9565b60405180910390f35b6102ac610763565b6040516102b99190612ff5565b60405180910390f35b6102dc60048036038101906102d79190613010565b610787565b6040516102e9919061305f565b60405180910390f35b61030c6004803603810190610307919061307a565b61093e565b60405161031a9291906130ba565b60405180910390f35b61032b610af2565b6040516103389190612f1f565b60405180910390f35b61035b60048036038101906103569190613108565b610b16565b6040516103689190612e92565b60405180910390f35b610379611175565b6040516103869190612ff5565b60405180910390f35b6103a960048036038101906103a49190613170565b611199565b6040516103b69190612f1f565b60405180910390f35b6103d960048036038101906103d49190613170565b6113a7565b6040516103e69190612f1f565b60405180910390f35b61040960048036038101906104049190612e4a565b611680565b6040516104169190612e92565b60405180910390f35b610427611715565b6040516104349190612de5565b60405180910390f35b61045760048036038101906104529190613170565b61172b565b005b610473600480360381019061046e919061320d565b6118f7565b6040516104809190612f1f565b60405180910390f35b610491611a82565b60405161049e9190612f1f565b60405180910390f35b6104af611a98565b6040516104bc9190612f1f565b60405180910390f35b6104cd611a9e565b6040516104da919061305f565b60405180910390f35b6104fd60048036038101906104f89190612ee3565b611ad1565b60405161050a919061305f565b60405180910390f35b61052d60048036038101906105289190612ee3565b611ae9565b60405161053a919061305f565b60405180910390f35b61054b611b01565b60405161055a93929190613458565b60405180910390f35b61056b611ca5565b6040516105789190612de5565b60405180910390f35b61059b60048036038101906105969190612ee3565b611caa565b6040516105a89190612f1f565b60405180910390f35b6105b9611e56565b6040516105c69190612f1f565b60405180910390f35b6105e960048036038101906105e49190612e4a565b611e7a565b6040516105f69190612e92565b60405180910390f35b610607611ea4565b60405161061491906134b2565b60405180910390f35b61063760048036038101906106329190612ee3565b611ec8565b604051610644919061305f565b60405180910390f35b610655611ee0565b6040516106629190612f1f565b60405180910390f35b610673612014565b60405161068091906134ee565b60405180910390f35b600360049054906101000a900463ffffffff1681565b60066020528060005260406000206000915054906101000a900460ff1681565b6000806106ca611ee0565b905060006106e1828561203890919063ffffffff16565b90508092505050919050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f4e79ab3536e2fdce1b6af37a519fb69876a66b4e3b240a16632957de6990118e60001c61073c9190613538565b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106107f057826040517fce31f7590000000000000000000000000000000000000000000000000000000081526004016107e7919061305f565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c1061085757816040517fce31f75900000000000000000000000000000000000000000000000000000000815260040161084e919061305f565b60405180910390fd5b61085f612c22565b838160006002811061087457610873613569565b5b602002018181525050828160016002811061089257610891613569565b5b6020020181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b81526004016108f49190613643565b602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190613673565b91505092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d291906136cc565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a2f91906136f9565b6101e060405180830381865afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7191906139de565b90506000610a9a82604001516fffffffffffffffffffffffffffffffff168360c0015188612083565b90506000610ac783602001516fffffffffffffffffffffffffffffffff168361203890919063ffffffff16565b90506000610ade828a6120ea90919063ffffffff16565b905080829650965050505050509250929050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b6000600282806101200190610b2b9190613a1b565b905003610cc8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c894e75783600001600001846000016040018560000160c0016040518060e0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610bc69190613a1b565b6000818110610bd857610bd7613569565b5b9050602002013560001c815260200188806101200190610bf89190613a1b565b6001818110610c0a57610c09613569565b5b9050602002013560001c81526020018861014001600060028110610c3157610c30613569565b5b602002013560001c81526020018861014001600160028110610c5657610c55613569565b5b602002013560001c8152506040518563ffffffff1660e01b8152600401610c809493929190613bf2565b602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613c65565b9050611170565b601082806101200190610cdb9190613a1b565b905003611135577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635debc07e83600001600001846000016040018560000160c001604051806102a0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610d779190613a1b565b6000818110610d8957610d88613569565b5b9050602002013560001c815260200188806101200190610da99190613a1b565b6001818110610dbb57610dba613569565b5b9050602002013560001c815260200188806101200190610ddb9190613a1b565b6002818110610ded57610dec613569565b5b9050602002013560001c815260200188806101200190610e0d9190613a1b565b6003818110610e1f57610e1e613569565b5b9050602002013560001c815260200188806101200190610e3f9190613a1b565b6004818110610e5157610e50613569565b5b9050602002013560001c815260200188806101200190610e719190613a1b565b6005818110610e8357610e82613569565b5b9050602002013560001c815260200188806101200190610ea39190613a1b565b6006818110610eb557610eb4613569565b5b9050602002013560001c815260200188806101200190610ed59190613a1b565b6007818110610ee757610ee6613569565b5b9050602002013560001c815260200188806101200190610f079190613a1b565b6008818110610f1957610f18613569565b5b9050602002013560001c815260200188806101200190610f399190613a1b565b6009818110610f4b57610f4a613569565b5b9050602002013560001c815260200188806101200190610f6b9190613a1b565b600a818110610f7d57610f7c613569565b5b9050602002013560001c815260200188806101200190610f9d9190613a1b565b600b818110610faf57610fae613569565b5b9050602002013560001c815260200188806101200190610fcf9190613a1b565b600c818110610fe157610fe0613569565b5b9050602002013560001c8152602001888061012001906110019190613a1b565b600d81811061101357611012613569565b5b9050602002013560001c8152602001888061012001906110339190613a1b565b600e81811061104557611044613569565b5b9050602002013560001c8152602001888061012001906110659190613a1b565b600f81811061107757611076613569565b5b9050602002013560001c8152602001886101400160006002811061109e5761109d613569565b5b602002013560001c815260200188610140016001600281106110c3576110c2613569565b5b602002013560001c8152506040518563ffffffff1660e01b81526004016110ed9493929190613d16565b602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190613c65565b9050611170565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790613dba565b60405180910390fd5b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006111a6611b01565b925050915060006111c482866020013561203890919063ffffffff16565b905060055481111561121157806005546040517f05650e8f0000000000000000000000000000000000000000000000000000000081526004016112089291906130ba565b60405180910390fd5b61125e3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612131909392919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b81526004016112b9929190613dda565b6020604051808303816000875af11580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190613c65565b508273ffffffffffffffffffffffffffffffffffffffff1663617ba0377f0000000000000000000000000000000000000000000000000000000000000000833060006040518563ffffffff1660e01b815260040161135d9493929190613e3e565b600060405180830381600087803b15801561137757600080fd5b505af115801561138b573d6000803e3d6000fd5b5050505061139b868660006121ba565b80935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168260000160208101906113d39190613e98565b73ffffffffffffffffffffffffffffffffffffffff1603611420576040517fceef985700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61142c838360016121ba565b600080611437611b01565b50915091506000611446611ee0565b9050600061146182876020013561203890919063ffffffff16565b9050600061147c83886060013561203890919063ffffffff16565b905083610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b81526004016114be929190613dda565b6020604051808303816000875af11580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190613c65565b508473ffffffffffffffffffffffffffffffffffffffff166369328dec7f0000000000000000000000000000000000000000000000000000000000000000838561154b9190613ef4565b306040518463ffffffff1660e01b815260040161156a93929190613f28565b6020604051808303816000875af1158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad9190613f5f565b5061160b8760000160208101906115c49190613e98565b837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661263a9092919063ffffffff16565b60008111156116725761167187604001602081019061162a9190613e98565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661263a9092919063ffffffff16565b5b819550505050505092915050565b60008060001b82036116955760009050611710565b6000600360009054906101000a900463ffffffff16905060008163ffffffff1690505b600260008281526020019081526020016000205484036116dd57600192505050611710565b600081036116f057606463ffffffff1690505b806116fa90613f8c565b90508163ffffffff1681036116b8576000925050505b919050565b600360009054906101000a900463ffffffff1681565b611737828260026121ba565b6000816060013511156118f35760008061174f611b01565b509150915060008273ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016117af91906136f9565b602060405180830381865afa1580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190613f5f565b9050600061180b82866060013561203890919063ffffffff16565b905082610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b815260040161184d929190613dda565b6020604051808303816000875af115801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190613c65565b506118ee8560400160208101906118a79190613e98565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661263a9092919063ffffffff16565b505050505b5050565b600080600281111561190c5761190b613fb5565b5b84600281111561191f5761191e613fb5565b5b036119685781831015611967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195e90614030565b60405180910390fd5b5b600080600281111561197d5761197c613fb5565b5b8560028111156119905761198f613fb5565b5b0361199d57839050611a77565b600160028111156119b1576119b0613fb5565b5b8560028111156119c4576119c3613fb5565b5b03611a075782846119d59190613ef4565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001611a009190614050565b9050611a76565b600280811115611a1a57611a19613fb5565b5b856002811115611a2d57611a2c613fb5565b5b03611a3a57829050611a75565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6c906140d0565b60405180910390fd5b5b5b809150509392505050565b600080611a8d611b01565b925050508091505090565b60055481565b600060026000600360009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002054905090565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b6000611b0b612c44565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d91906136cc565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611bfa91906136f9565b6101e060405180830381865afa158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c91906139de565b90506000611c6482604001516fffffffffffffffffffffffffffffffff168360c001516126c0565b90506000611c9183602001516fffffffffffffffffffffffffffffffff168361203890919063ffffffff16565b905083838296509650965050505050909192565b606481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3c91906136cc565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611d9991906136f9565b6101e060405180830381865afa158015611db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddb91906139de565b90506000611e0382604001516fffffffffffffffffffffffffffffffff168360c001516126c0565b90506000611e3083602001516fffffffffffffffffffffffffffffffff168361203890919063ffffffff16565b90506000611e4782886120ea90919063ffffffff16565b90508095505050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006006600083815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7291906136cc565b90508073ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611fcd91906136f9565b602060405180830381865afa158015611fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200e9190613f5f565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816b019d971e4fe8401e74000000600019030483111582151761205c57600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b6000808364ffffffffff16834261209a9190613ef4565b6120a49190614050565b856120af91906140f0565b90506301e1338081816120c5576120c4613509565b5b049050806b033b2e3c9fd0803ce80000006120e09190613ef4565b9150509392505050565b60006b033b2e3c9fd0803ce8000000600283046000190304831115158215171561211357600080fd5b81600283046b033b2e3c9fd0803ce800000085020104905092915050565b6121b4846323b872dd60e01b85858560405160240161215293929190614132565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061271b565b50505050565b6121c26127e2565b6121d0836101000135611680565b612206576040517f9dd854d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8380610120019061221a9190613a1b565b905081101561229c57612254848061012001906122379190613a1b565b8381811061224857612247613569565b5b90506020020135611e7a565b1561228b576040517fb797976c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061229590614169565b9050612209565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836040516020016122d19190614362565b6040516020818303038152906040528051906020012060001c6122f49190613538565b9050836101a0013560001c8114612337576040517f253e159200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061234c83856020013586606001356118f7565b9050846101800135811461238c576040517f28777bf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61239585610b16565b6123cb576040517fc89e37db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b858061012001906123df9190613a1b565b905081101561244d57600160066000888061012001906123ff9190613a1b565b858181106124105761240f613569565b5b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508061244690614169565b90506123ce565b50612490856101400160006002811061246957612468613569565b5b6020020135866101400160016002811061248657612485613569565b5b6020020135612831565b507ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da85610140016000600281106124ca576124c9613569565b5b60200201356002600360049054906101000a900463ffffffff166124ee9190614384565b8680608001906124fe91906143bc565b60405161250e949392919061448e565b60405180910390a17ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da856101400160016002811061254f5761254e613569565b5b60200201356001600360049054906101000a900463ffffffff166125739190614384565b868060a0019061258391906143bc565b604051612593949392919061448e565b60405180910390a160005b858061012001906125af9190613a1b565b905081101561262a577f4aac17bcf1974f8ba294b28aaf75fe627cdcc9a03ac55bda3bfe158ab067383c868061012001906125ea9190613a1b565b838181106125fb576125fa613569565b5b9050602002013560405161260f919061305f565b60405180910390a1808061262290614169565b91505061259e565b505050612635612a4b565b505050565b6126bb8363a9059cbb60e01b8484604051602401612659929190613dda565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061271b565b505050565b6000808264ffffffffff16426126d69190614050565b846126e191906140f0565b90506301e1338081816126f7576126f6613509565b5b049050806b033b2e3c9fd0803ce80000006127129190613ef4565b91505092915050565b600061277d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612a559092919063ffffffff16565b90506000815111156127dd578080602001905181019061279d9190613c65565b6127dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d390614540565b60405180910390fd5b5b505050565b600260045403612827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281e906145ac565b60405180910390fd5b6002600481905550565b600080600360049054906101000a900463ffffffff1690507f0000000000000000000000000000000000000000000000000000000000000000600261287691906146ff565b8163ffffffff16106128b4576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002826128c3919061474a565b905060006128d18686610787565b90506000806000600190505b7f00000000000000000000000000000000000000000000000000000000000000008160ff1610156129a0576000600286612917919061477b565b63ffffffff160361295d578392506000808260ff16815260200190815260200160002054915083600160008360ff1681526020019081526020016000208190555061297a565b600160008260ff1681526020019081526020016000205492508391505b6129848383610787565b9350600285612993919061474a565b94508060010190506128dd565b50600060646001600360009054906101000a900463ffffffff166129c491906147ac565b6129ce919061477b565b905080600360006101000a81548163ffffffff021916908363ffffffff16021790555083600260008363ffffffff16815260200190815260200160002081905550600286612a1c91906147ac565b600360046101000a81548163ffffffff021916908363ffffffff16021790555085965050505050505092915050565b6001600481905550565b6060612a648484600085612a6d565b90509392505050565b606082471015612ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa990614856565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612adb91906148e7565b60006040518083038185875af1925050503d8060008114612b18576040519150601f19603f3d011682016040523d82523d6000602084013e612b1d565b606091505b5091509150612b2e87838387612b3a565b92505050949350505050565b60608315612b9c576000835103612b9457612b5485612baf565b612b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8a9061494a565b60405180910390fd5b5b829050612ba7565b612ba68383612bd2565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612be55781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1991906149ae565b60405180910390fd5b6040518060400160405280600290602082028036833780820191505090505090565b604051806101e00160405280612c58612db3565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600063ffffffff82169050919050565b612ddf81612dc6565b82525050565b6000602082019050612dfa6000830184612dd6565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612e2781612e14565b8114612e3257600080fd5b50565b600081359050612e4481612e1e565b92915050565b600060208284031215612e6057612e5f612e0a565b5b6000612e6e84828501612e35565b91505092915050565b60008115159050919050565b612e8c81612e77565b82525050565b6000602082019050612ea76000830184612e83565b92915050565b6000819050919050565b612ec081612ead565b8114612ecb57600080fd5b50565b600081359050612edd81612eb7565b92915050565b600060208284031215612ef957612ef8612e0a565b5b6000612f0784828501612ece565b91505092915050565b612f1981612ead565b82525050565b6000602082019050612f346000830184612f10565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f7f612f7a612f7584612f3a565b612f5a565b612f3a565b9050919050565b6000612f9182612f64565b9050919050565b6000612fa382612f86565b9050919050565b612fb381612f98565b82525050565b6000602082019050612fce6000830184612faa565b92915050565b6000612fdf82612f86565b9050919050565b612fef81612fd4565b82525050565b600060208201905061300a6000830184612fe6565b92915050565b6000806040838503121561302757613026612e0a565b5b600061303585828601612e35565b925050602061304685828601612e35565b9150509250929050565b61305981612e14565b82525050565b60006020820190506130746000830184613050565b92915050565b6000806040838503121561309157613090612e0a565b5b600061309f85828601612ece565b92505060206130b085828601612ece565b9150509250929050565b60006040820190506130cf6000830185612f10565b6130dc6020830184612f10565b9392505050565b600080fd5b60006101c082840312156130ff576130fe6130e3565b5b81905092915050565b60006020828403121561311e5761311d612e0a565b5b600082013567ffffffffffffffff81111561313c5761313b612e0f565b5b613148848285016130e8565b91505092915050565b600060c08284031215613167576131666130e3565b5b81905092915050565b6000806040838503121561318757613186612e0a565b5b600083013567ffffffffffffffff8111156131a5576131a4612e0f565b5b6131b1858286016130e8565b925050602083013567ffffffffffffffff8111156131d2576131d1612e0f565b5b6131de85828601613151565b9150509250929050565b600381106131f557600080fd5b50565b600081359050613207816131e8565b92915050565b60008060006060848603121561322657613225612e0a565b5b6000613234868287016131f8565b935050602061324586828701612ece565b925050604061325686828701612ece565b9150509250925092565b600061326b82612f3a565b9050919050565b61327b81613260565b82525050565b61328a81612ead565b82525050565b6020820160008201516132a66000850182613281565b50505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6132d1816132ac565b82525050565b600064ffffffffff82169050919050565b6132f1816132d7565b82525050565b600061ffff82169050919050565b61330e816132f7565b82525050565b61331d81613260565b82525050565b6101e08201600082015161333a6000850182613290565b50602082015161334d60208501826132c8565b50604082015161336060408501826132c8565b50606082015161337360608501826132c8565b50608082015161338660808501826132c8565b5060a082015161339960a08501826132c8565b5060c08201516133ac60c08501826132e8565b5060e08201516133bf60e0850182613305565b506101008201516133d4610100850182613314565b506101208201516133e9610120850182613314565b506101408201516133fe610140850182613314565b50610160820151613413610160850182613314565b506101808201516134286101808501826132c8565b506101a082015161343d6101a08501826132c8565b506101c08201516134526101c08501826132c8565b50505050565b60006102208201905061346e6000830186613272565b61347b6020830185613323565b613489610200830184612f10565b949350505050565b600061349c82612f86565b9050919050565b6134ac81613491565b82525050565b60006020820190506134c760008301846134a3565b92915050565b60006134d882612f86565b9050919050565b6134e8816134cd565b82525050565b600060208201905061350360008301846134df565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061354382612ead565b915061354e83612ead565b92508261355e5761355d613509565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b6135c181612e14565b82525050565b60006135d383836135b8565b60208301905092915050565b6000602082019050919050565b6135f581613598565b6135ff81846135a3565b925061360a826135ae565b8060005b8381101561363b57815161362287826135c7565b965061362d836135df565b92505060018101905061360e565b505050505050565b600060408201905061365860008301846135ec565b92915050565b60008151905061366d81612e1e565b92915050565b60006020828403121561368957613688612e0a565b5b60006136978482850161365e565b91505092915050565b6136a981613260565b81146136b457600080fd5b50565b6000815190506136c6816136a0565b92915050565b6000602082840312156136e2576136e1612e0a565b5b60006136f0848285016136b7565b91505092915050565b600060208201905061370e6000830184613272565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61376282613719565b810181811067ffffffffffffffff821117156137815761378061372a565b5b80604052505050565b6000613794612e00565b90506137a08282613759565b919050565b6000815190506137b481612eb7565b92915050565b6000602082840312156137d0576137cf613714565b5b6137da602061378a565b905060006137ea848285016137a5565b60008301525092915050565b6137ff816132ac565b811461380a57600080fd5b50565b60008151905061381c816137f6565b92915050565b61382b816132d7565b811461383657600080fd5b50565b60008151905061384881613822565b92915050565b613857816132f7565b811461386257600080fd5b50565b6000815190506138748161384e565b92915050565b60006101e0828403121561389157613890613714565b5b61389c6101e061378a565b905060006138ac848285016137ba565b60008301525060206138c08482850161380d565b60208301525060406138d48482850161380d565b60408301525060606138e88482850161380d565b60608301525060806138fc8482850161380d565b60808301525060a06139108482850161380d565b60a08301525060c061392484828501613839565b60c08301525060e061393884828501613865565b60e08301525061010061394d848285016136b7565b61010083015250610120613963848285016136b7565b61012083015250610140613979848285016136b7565b6101408301525061016061398f848285016136b7565b610160830152506101806139a58482850161380d565b610180830152506101a06139bb8482850161380d565b6101a0830152506101c06139d18482850161380d565b6101c08301525092915050565b60006101e082840312156139f5576139f4612e0a565b5b6000613a038482850161387a565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613a3857613a37613a0c565b5b80840192508235915067ffffffffffffffff821115613a5a57613a59613a11565b5b602083019250602082023603831315613a7657613a75613a16565b5b509250929050565b82818337505050565b613a9360408383613a7e565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b613ac360408383613a7e565b5050565b6000613ad38383613ab7565b60408301905092915050565b600082905092915050565b6000604082019050919050565b613b0081613a97565b613b0a8184613aa2565b9250613b1582613aad565b8060005b83811015613b4e57613b2b8284613adf565b613b358782613ac7565b9650613b4083613aea565b925050600181019050613b19565b505050505050565b600060079050919050565b600081905092915050565b6000819050919050565b6000613b828383613281565b60208301905092915050565b6000602082019050919050565b613ba481613b56565b613bae8184613b61565b9250613bb982613b6c565b8060005b83811015613bea578151613bd18782613b76565b9650613bdc83613b8e565b925050600181019050613bbd565b505050505050565b60006101e082019050613c086000830187613a87565b613c156040830186613af7565b613c2260c0830185613a87565b613c30610100830184613b9b565b95945050505050565b613c4281612e77565b8114613c4d57600080fd5b50565b600081519050613c5f81613c39565b92915050565b600060208284031215613c7b57613c7a612e0a565b5b6000613c8984828501613c50565b91505092915050565b600060159050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b613cc881613c92565b613cd28184613c9d565b9250613cdd82613ca8565b8060005b83811015613d0e578151613cf58782613b76565b9650613d0083613cb2565b925050600181019050613ce1565b505050505050565b60006103a082019050613d2c6000830187613a87565b613d396040830186613af7565b613d4660c0830185613a87565b613d54610100830184613cbf565b95945050505050565b600082825260208201905092915050565b7f556e737570706f7274656420696e70757420636f756e74000000000000000000600082015250565b6000613da4601783613d5d565b9150613daf82613d6e565b602082019050919050565b60006020820190508181036000830152613dd381613d97565b9050919050565b6000604082019050613def6000830185613272565b613dfc6020830184612f10565b9392505050565b6000819050919050565b6000613e28613e23613e1e84613e03565b612f5a565b6132f7565b9050919050565b613e3881613e0d565b82525050565b6000608082019050613e536000830187613272565b613e606020830186612f10565b613e6d6040830185613272565b613e7a6060830184613e2f565b95945050505050565b600081359050613e92816136a0565b92915050565b600060208284031215613eae57613ead612e0a565b5b6000613ebc84828501613e83565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613eff82612ead565b9150613f0a83612ead565b9250828201905080821115613f2257613f21613ec5565b5b92915050565b6000606082019050613f3d6000830186613272565b613f4a6020830185612f10565b613f576040830184613272565b949350505050565b600060208284031215613f7557613f74612e0a565b5b6000613f83848285016137a5565b91505092915050565b6000613f9782612ead565b915060008203613faa57613fa9613ec5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45787420616d6f756e74206c657373207468616e207363616c65644665650000600082015250565b600061401a601e83613d5d565b915061402582613fe4565b602082019050919050565b600060208201905081810360008301526140498161400d565b9050919050565b600061405b82612ead565b915061406683612ead565b925082820390508181111561407e5761407d613ec5565b5b92915050565b7f496e76616c696420547854797065000000000000000000000000000000000000600082015250565b60006140ba600e83613d5d565b91506140c582614084565b602082019050919050565b600060208201905081810360008301526140e9816140ad565b9050919050565b60006140fb82612ead565b915061410683612ead565b925082820261411481612ead565b9150828204841483151761412b5761412a613ec5565b5b5092915050565b60006060820190506141476000830186613272565b6141546020830185613272565b6141616040830184612f10565b949350505050565b600061417482612ead565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036141a6576141a5613ec5565b5b600182019050919050565b60006141c06020840184613e83565b905092915050565b60006141d76020840184612ece565b905092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261420b5761420a6141e9565b5b83810192508235915060208301925067ffffffffffffffff821115614233576142326141df565b5b600182023603831315614249576142486141e4565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b600061427d8385614251565b935061428a838584614262565b61429383613719565b840190509392505050565b600060c083016142b160008401846141b1565b6142be6000860182613314565b506142cc60208401846141c8565b6142d96020860182613281565b506142e760408401846141b1565b6142f46040860182613314565b5061430260608401846141c8565b61430f6060860182613281565b5061431d60808401846141ee565b8583036080870152614330838284614271565b9250505061434160a08401846141ee565b85830360a0870152614354838284614271565b925050508091505092915050565b6000602082019050818103600083015261437c818461429e565b905092915050565b600061438f82612dc6565b915061439a83612dc6565b9250828203905063ffffffff8111156143b6576143b5613ec5565b5b92915050565b600080833560016020038436030381126143d9576143d8613a0c565b5b80840192508235915067ffffffffffffffff8211156143fb576143fa613a11565b5b60208301925060018202360383131561441757614416613a16565b5b509250929050565b600061443a61443561443084612dc6565b612f5a565b612ead565b9050919050565b61444a8161441f565b82525050565b600082825260208201905092915050565b600061446d8385614450565b935061447a838584614262565b61448383613719565b840190509392505050565b60006060820190506144a36000830187613050565b6144b06020830186614441565b81810360408301526144c3818486614461565b905095945050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061452a602a83613d5d565b9150614535826144ce565b604082019050919050565b600060208201905081810360008301526145598161451d565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614596601f83613d5d565b91506145a182614560565b602082019050919050565b600060208201905081810360008301526145c581614589565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115614623578086048111156145ff576145fe613ec5565b5b600185161561460e5780820291505b808102905061461c856145cc565b94506145e3565b94509492505050565b60008261463c57600190506146f8565b8161464a57600090506146f8565b8160018114614660576002811461466a57614699565b60019150506146f8565b60ff84111561467c5761467b613ec5565b5b8360020a91508482111561469357614692613ec5565b5b506146f8565b5060208310610133831016604e8410600b84101617156146ce5782820a9050838111156146c9576146c8613ec5565b5b6146f8565b6146db84848460016145d9565b925090508184048111156146f2576146f1613ec5565b5b81810290505b9392505050565b600061470a82612ead565b915061471583612ead565b92506147427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461462c565b905092915050565b600061475582612dc6565b915061476083612dc6565b9250826147705761476f613509565b5b828204905092915050565b600061478682612dc6565b915061479183612dc6565b9250826147a1576147a0613509565b5b828206905092915050565b60006147b782612dc6565b91506147c283612dc6565b9250828201905063ffffffff8111156147de576147dd613ec5565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614840602683613d5d565b915061484b826147e4565b604082019050919050565b6000602082019050818103600083015261486f81614833565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156148aa57808201518184015260208101905061488f565b60008484015250505050565b60006148c182614876565b6148cb8185614881565b93506148db81856020860161488c565b80840191505092915050565b60006148f382846148b6565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614934601d83613d5d565b915061493f826148fe565b602082019050919050565b6000602082019050818103600083015261496381614927565b9050919050565b600081519050919050565b60006149808261496a565b61498a8185613d5d565b935061499a81856020860161488c565b6149a381613719565b840191505092915050565b600060208201905081810360008301526149c88184614975565b90509291505056fea2646970667358221220175a7fbe6fb4139ca530671fae68ff8d815f1cc68f0a28b215911ba76e4a28c164736f6c63430008110033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101e55760003560e01c80639fceb0ff1161010f578063cd87a3b4116100a2578063ed33639f11610071578063ed33639f146105ff578063f178e47c1461061d578063f65037751461064d578063fc0c546a1461066b576101e5565b8063cd87a3b414610563578063d227d33914610581578063e013eb01146105b1578063e5285dcc146105cf576101e5565b8063ba70f757116100de578063ba70f757146104c5578063bc95a804146104e3578063c2b40ae414610513578063c5fd0ab414610543576101e5565b80639fceb0ff1461043d578063a828d08a14610459578063af013ec314610489578063b0dc4efc146104a7576101e5565b80633b839d6c11610187578063528454c211610156578063528454c21461038f5780636c3bc785146103bf5780636d9833e3146103ef57806390eeb02b1461041f576101e5565b80633b839d6c146102f2578063414a37ba1461032357806347f3c89214610341578063522d0d7014610371576101e5565b806322be751d116101c357806322be751d1461026857806325375dd5146102865780632fc0355f146102a457806338bf282e146102c2576101e5565b80630be4f422146101ea57806317cc915c146102085780631e01043914610238575b600080fd5b6101f2610689565b6040516101ff9190612de5565b60405180910390f35b610222600480360381019061021d9190612e4a565b61069f565b60405161022f9190612e92565b60405180910390f35b610252600480360381019061024d9190612ee3565b6106bf565b60405161025f9190612f1f565b60405180910390f35b6102706106ed565b60405161027d9190612f1f565b60405180910390f35b61028e61073f565b60405161029b9190612fb9565b60405180910390f35b6102ac610763565b6040516102b99190612ff5565b60405180910390f35b6102dc60048036038101906102d79190613010565b610787565b6040516102e9919061305f565b60405180910390f35b61030c6004803603810190610307919061307a565b61093e565b60405161031a9291906130ba565b60405180910390f35b61032b610af2565b6040516103389190612f1f565b60405180910390f35b61035b60048036038101906103569190613108565b610b16565b6040516103689190612e92565b60405180910390f35b610379611175565b6040516103869190612ff5565b60405180910390f35b6103a960048036038101906103a49190613170565b611199565b6040516103b69190612f1f565b60405180910390f35b6103d960048036038101906103d49190613170565b6113a7565b6040516103e69190612f1f565b60405180910390f35b61040960048036038101906104049190612e4a565b611680565b6040516104169190612e92565b60405180910390f35b610427611715565b6040516104349190612de5565b60405180910390f35b61045760048036038101906104529190613170565b61172b565b005b610473600480360381019061046e919061320d565b6118f7565b6040516104809190612f1f565b60405180910390f35b610491611a82565b60405161049e9190612f1f565b60405180910390f35b6104af611a98565b6040516104bc9190612f1f565b60405180910390f35b6104cd611a9e565b6040516104da919061305f565b60405180910390f35b6104fd60048036038101906104f89190612ee3565b611ad1565b60405161050a919061305f565b60405180910390f35b61052d60048036038101906105289190612ee3565b611ae9565b60405161053a919061305f565b60405180910390f35b61054b611b01565b60405161055a93929190613458565b60405180910390f35b61056b611ca5565b6040516105789190612de5565b60405180910390f35b61059b60048036038101906105969190612ee3565b611caa565b6040516105a89190612f1f565b60405180910390f35b6105b9611e56565b6040516105c69190612f1f565b60405180910390f35b6105e960048036038101906105e49190612e4a565b611e7a565b6040516105f69190612e92565b60405180910390f35b610607611ea4565b60405161061491906134b2565b60405180910390f35b61063760048036038101906106329190612ee3565b611ec8565b604051610644919061305f565b60405180910390f35b610655611ee0565b6040516106629190612f1f565b60405180910390f35b610673612014565b60405161068091906134ee565b60405180910390f35b600360049054906101000a900463ffffffff1681565b60066020528060005260406000206000915054906101000a900460ff1681565b6000806106ca611ee0565b905060006106e1828561203890919063ffffffff16565b90508092505050919050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000017f4e79ab3536e2fdce1b6af37a519fb69876a66b4e3b240a16632957de6990118e60001c61073c9190613538565b81565b7f000000000000000000000000000000000000000000000000000000000000000081565b7f000000000000000000000000000000000000000000000000000000000000000081565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018360001c106107f057826040517fce31f7590000000000000000000000000000000000000000000000000000000081526004016107e7919061305f565b60405180910390fd5b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f00000018260001c1061085757816040517fce31f75900000000000000000000000000000000000000000000000000000000815260040161084e919061305f565b60405180910390fd5b61085f612c22565b838160006002811061087457610873613569565b5b602002018181525050828160016002811061089257610891613569565b5b6020020181815250507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663299e5660826040518263ffffffff1660e01b81526004016108f49190613643565b602060405180830381865afa158015610911573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109359190613673565b91505092915050565b60008060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa1580156109ae573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109d291906136cc565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401610a2f91906136f9565b6101e060405180830381865afa158015610a4d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a7191906139de565b90506000610a9a82604001516fffffffffffffffffffffffffffffffff168360c0015188612083565b90506000610ac783602001516fffffffffffffffffffffffffffffffff168361203890919063ffffffff16565b90506000610ade828a6120ea90919063ffffffff16565b905080829650965050505050509250929050565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f000000181565b6000600282806101200190610b2b9190613a1b565b905003610cc8577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663c894e75783600001600001846000016040018560000160c0016040518060e0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610bc69190613a1b565b6000818110610bd857610bd7613569565b5b9050602002013560001c815260200188806101200190610bf89190613a1b565b6001818110610c0a57610c09613569565b5b9050602002013560001c81526020018861014001600060028110610c3157610c30613569565b5b602002013560001c81526020018861014001600160028110610c5657610c55613569565b5b602002013560001c8152506040518563ffffffff1660e01b8152600401610c809493929190613bf2565b602060405180830381865afa158015610c9d573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc19190613c65565b9050611170565b601082806101200190610cdb9190613a1b565b905003611135577f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16635debc07e83600001600001846000016040018560000160c001604051806102a0016040528088610100013560001c81526020018861018001358152602001886101a0013560001c815260200188806101200190610d779190613a1b565b6000818110610d8957610d88613569565b5b9050602002013560001c815260200188806101200190610da99190613a1b565b6001818110610dbb57610dba613569565b5b9050602002013560001c815260200188806101200190610ddb9190613a1b565b6002818110610ded57610dec613569565b5b9050602002013560001c815260200188806101200190610e0d9190613a1b565b6003818110610e1f57610e1e613569565b5b9050602002013560001c815260200188806101200190610e3f9190613a1b565b6004818110610e5157610e50613569565b5b9050602002013560001c815260200188806101200190610e719190613a1b565b6005818110610e8357610e82613569565b5b9050602002013560001c815260200188806101200190610ea39190613a1b565b6006818110610eb557610eb4613569565b5b9050602002013560001c815260200188806101200190610ed59190613a1b565b6007818110610ee757610ee6613569565b5b9050602002013560001c815260200188806101200190610f079190613a1b565b6008818110610f1957610f18613569565b5b9050602002013560001c815260200188806101200190610f399190613a1b565b6009818110610f4b57610f4a613569565b5b9050602002013560001c815260200188806101200190610f6b9190613a1b565b600a818110610f7d57610f7c613569565b5b9050602002013560001c815260200188806101200190610f9d9190613a1b565b600b818110610faf57610fae613569565b5b9050602002013560001c815260200188806101200190610fcf9190613a1b565b600c818110610fe157610fe0613569565b5b9050602002013560001c8152602001888061012001906110019190613a1b565b600d81811061101357611012613569565b5b9050602002013560001c8152602001888061012001906110339190613a1b565b600e81811061104557611044613569565b5b9050602002013560001c8152602001888061012001906110659190613a1b565b600f81811061107757611076613569565b5b9050602002013560001c8152602001886101400160006002811061109e5761109d613569565b5b602002013560001c815260200188610140016001600281106110c3576110c2613569565b5b602002013560001c8152506040518563ffffffff1660e01b81526004016110ed9493929190613d16565b602060405180830381865afa15801561110a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061112e9190613c65565b9050611170565b6040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161116790613dba565b60405180910390fd5b919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60008060006111a6611b01565b925050915060006111c482866020013561203890919063ffffffff16565b905060055481111561121157806005546040517f05650e8f0000000000000000000000000000000000000000000000000000000081526004016112089291906130ba565b60405180910390fd5b61125e3330837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16612131909392919063ffffffff16565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663095ea7b384836040518363ffffffff1660e01b81526004016112b9929190613dda565b6020604051808303816000875af11580156112d8573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906112fc9190613c65565b508273ffffffffffffffffffffffffffffffffffffffff1663617ba0377f0000000000000000000000000000000000000000000000000000000000000000833060006040518563ffffffff1660e01b815260040161135d9493929190613e3e565b600060405180830381600087803b15801561137757600080fd5b505af115801561138b573d6000803e3d6000fd5b5050505061139b868660006121ba565b80935050505092915050565b60008073ffffffffffffffffffffffffffffffffffffffff168260000160208101906113d39190613e98565b73ffffffffffffffffffffffffffffffffffffffff1603611420576040517fceef985700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61142c838360016121ba565b600080611437611b01565b50915091506000611446611ee0565b9050600061146182876020013561203890919063ffffffff16565b9050600061147c83886060013561203890919063ffffffff16565b905083610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b386846040518363ffffffff1660e01b81526004016114be929190613dda565b6020604051808303816000875af11580156114dd573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115019190613c65565b508473ffffffffffffffffffffffffffffffffffffffff166369328dec7f0000000000000000000000000000000000000000000000000000000000000000838561154b9190613ef4565b306040518463ffffffff1660e01b815260040161156a93929190613f28565b6020604051808303816000875af1158015611589573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906115ad9190613f5f565b5061160b8760000160208101906115c49190613e98565b837f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661263a9092919063ffffffff16565b60008111156116725761167187604001602081019061162a9190613e98565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661263a9092919063ffffffff16565b5b819550505050505092915050565b60008060001b82036116955760009050611710565b6000600360009054906101000a900463ffffffff16905060008163ffffffff1690505b600260008281526020019081526020016000205484036116dd57600192505050611710565b600081036116f057606463ffffffff1690505b806116fa90613f8c565b90508163ffffffff1681036116b8576000925050505b919050565b600360009054906101000a900463ffffffff1681565b611737828260026121ba565b6000816060013511156118f35760008061174f611b01565b509150915060008273ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b81526004016117af91906136f9565b602060405180830381865afa1580156117cc573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117f09190613f5f565b9050600061180b82866060013561203890919063ffffffff16565b905082610100015173ffffffffffffffffffffffffffffffffffffffff1663095ea7b385836040518363ffffffff1660e01b815260040161184d929190613dda565b6020604051808303816000875af115801561186c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906118909190613c65565b506118ee8560400160208101906118a79190613e98565b827f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1661263a9092919063ffffffff16565b505050505b5050565b600080600281111561190c5761190b613fb5565b5b84600281111561191f5761191e613fb5565b5b036119685781831015611967576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161195e90614030565b60405180910390fd5b5b600080600281111561197d5761197c613fb5565b5b8560028111156119905761198f613fb5565b5b0361199d57839050611a77565b600160028111156119b1576119b0613fb5565b5b8560028111156119c4576119c3613fb5565b5b03611a075782846119d59190613ef4565b7f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001611a009190614050565b9050611a76565b600280811115611a1a57611a19613fb5565b5b856002811115611a2d57611a2c613fb5565b5b03611a3a57829050611a75565b6040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401611a6c906140d0565b60405180910390fd5b5b5b809150509392505050565b600080611a8d611b01565b925050508091505090565b60055481565b600060026000600360009054906101000a900463ffffffff1663ffffffff16815260200190815260200160002054905090565b60006020528060005260406000206000915090505481565b60026020528060005260406000206000915090505481565b6000611b0b612c44565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611b79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611b9d91906136cc565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611bfa91906136f9565b6101e060405180830381865afa158015611c18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611c3c91906139de565b90506000611c6482604001516fffffffffffffffffffffffffffffffff168360c001516126c0565b90506000611c9183602001516fffffffffffffffffffffffffffffffff168361203890919063ffffffff16565b905083838296509650965050505050909192565b606481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611d18573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611d3c91906136cc565b905060008173ffffffffffffffffffffffffffffffffffffffff166335ea6a757f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611d9991906136f9565b6101e060405180830381865afa158015611db7573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611ddb91906139de565b90506000611e0382604001516fffffffffffffffffffffffffffffffff168360c001516126c0565b90506000611e3083602001516fffffffffffffffffffffffffffffffff168361203890919063ffffffff16565b90506000611e4782886120ea90919063ffffffff16565b90508095505050505050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60006006600083815260200190815260200160002060009054906101000a900460ff169050919050565b7f000000000000000000000000000000000000000000000000000000000000000081565b60016020528060005260406000206000915090505481565b6000807f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663026b1d5f6040518163ffffffff1660e01b8152600401602060405180830381865afa158015611f4e573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611f7291906136cc565b90508073ffffffffffffffffffffffffffffffffffffffff1663d15e00537f00000000000000000000000000000000000000000000000000000000000000006040518263ffffffff1660e01b8152600401611fcd91906136f9565b602060405180830381865afa158015611fea573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061200e9190613f5f565b91505090565b7f000000000000000000000000000000000000000000000000000000000000000081565b6000816b019d971e4fe8401e74000000600019030483111582151761205c57600080fd5b6b033b2e3c9fd0803ce80000006b019d971e4fe8401e740000008385020104905092915050565b6000808364ffffffffff16834261209a9190613ef4565b6120a49190614050565b856120af91906140f0565b90506301e1338081816120c5576120c4613509565b5b049050806b033b2e3c9fd0803ce80000006120e09190613ef4565b9150509392505050565b60006b033b2e3c9fd0803ce8000000600283046000190304831115158215171561211357600080fd5b81600283046b033b2e3c9fd0803ce800000085020104905092915050565b6121b4846323b872dd60e01b85858560405160240161215293929190614132565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061271b565b50505050565b6121c26127e2565b6121d0836101000135611680565b612206576040517f9dd854d300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b8380610120019061221a9190613a1b565b905081101561229c57612254848061012001906122379190613a1b565b8381811061224857612247613569565b5b90506020020135611e7a565b1561228b576040517fb797976c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8061229590614169565b9050612209565b5060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836040516020016122d19190614362565b6040516020818303038152906040528051906020012060001c6122f49190613538565b9050836101a0013560001c8114612337576040517f253e159200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600061234c83856020013586606001356118f7565b9050846101800135811461238c576040517f28777bf000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61239585610b16565b6123cb576040517fc89e37db00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60005b858061012001906123df9190613a1b565b905081101561244d57600160066000888061012001906123ff9190613a1b565b858181106124105761240f613569565b5b90506020020135815260200190815260200160002060006101000a81548160ff0219169083151502179055508061244690614169565b90506123ce565b50612490856101400160006002811061246957612468613569565b5b6020020135866101400160016002811061248657612485613569565b5b6020020135612831565b507ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da85610140016000600281106124ca576124c9613569565b5b60200201356002600360049054906101000a900463ffffffff166124ee9190614384565b8680608001906124fe91906143bc565b60405161250e949392919061448e565b60405180910390a17ff4e1a415a466e4d4960a34819c2df4834077abb80cbdd31f9f38e485429b71da856101400160016002811061254f5761254e613569565b5b60200201356001600360049054906101000a900463ffffffff166125739190614384565b868060a0019061258391906143bc565b604051612593949392919061448e565b60405180910390a160005b858061012001906125af9190613a1b565b905081101561262a577f4aac17bcf1974f8ba294b28aaf75fe627cdcc9a03ac55bda3bfe158ab067383c868061012001906125ea9190613a1b565b838181106125fb576125fa613569565b5b9050602002013560405161260f919061305f565b60405180910390a1808061262290614169565b91505061259e565b505050612635612a4b565b505050565b6126bb8363a9059cbb60e01b8484604051602401612659929190613dda565b604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff838183161783525050505061271b565b505050565b6000808264ffffffffff16426126d69190614050565b846126e191906140f0565b90506301e1338081816126f7576126f6613509565b5b049050806b033b2e3c9fd0803ce80000006127129190613ef4565b91505092915050565b600061277d826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16612a559092919063ffffffff16565b90506000815111156127dd578080602001905181019061279d9190613c65565b6127dc576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016127d390614540565b60405180910390fd5b5b505050565b600260045403612827576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161281e906145ac565b60405180910390fd5b6002600481905550565b600080600360049054906101000a900463ffffffff1690507f0000000000000000000000000000000000000000000000000000000000000000600261287691906146ff565b8163ffffffff16106128b4576040517fef5ccf6600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60006002826128c3919061474a565b905060006128d18686610787565b90506000806000600190505b7f00000000000000000000000000000000000000000000000000000000000000008160ff1610156129a0576000600286612917919061477b565b63ffffffff160361295d578392506000808260ff16815260200190815260200160002054915083600160008360ff1681526020019081526020016000208190555061297a565b600160008260ff1681526020019081526020016000205492508391505b6129848383610787565b9350600285612993919061474a565b94508060010190506128dd565b50600060646001600360009054906101000a900463ffffffff166129c491906147ac565b6129ce919061477b565b905080600360006101000a81548163ffffffff021916908363ffffffff16021790555083600260008363ffffffff16815260200190815260200160002081905550600286612a1c91906147ac565b600360046101000a81548163ffffffff021916908363ffffffff16021790555085965050505050505092915050565b6001600481905550565b6060612a648484600085612a6d565b90509392505050565b606082471015612ab2576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612aa990614856565b60405180910390fd5b6000808673ffffffffffffffffffffffffffffffffffffffff168587604051612adb91906148e7565b60006040518083038185875af1925050503d8060008114612b18576040519150601f19603f3d011682016040523d82523d6000602084013e612b1d565b606091505b5091509150612b2e87838387612b3a565b92505050949350505050565b60608315612b9c576000835103612b9457612b5485612baf565b612b93576040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612b8a9061494a565b60405180910390fd5b5b829050612ba7565b612ba68383612bd2565b5b949350505050565b6000808273ffffffffffffffffffffffffffffffffffffffff163b119050919050565b600082511115612be55781518083602001fd5b806040517f08c379a0000000000000000000000000000000000000000000000000000000008152600401612c1991906149ae565b60405180910390fd5b6040518060400160405280600290602082028036833780820191505090505090565b604051806101e00160405280612c58612db3565b815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff168152602001600064ffffffffff168152602001600061ffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600073ffffffffffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff16815260200160006fffffffffffffffffffffffffffffffff1681525090565b6040518060200160405280600081525090565b600063ffffffff82169050919050565b612ddf81612dc6565b82525050565b6000602082019050612dfa6000830184612dd6565b92915050565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b612e2781612e14565b8114612e3257600080fd5b50565b600081359050612e4481612e1e565b92915050565b600060208284031215612e6057612e5f612e0a565b5b6000612e6e84828501612e35565b91505092915050565b60008115159050919050565b612e8c81612e77565b82525050565b6000602082019050612ea76000830184612e83565b92915050565b6000819050919050565b612ec081612ead565b8114612ecb57600080fd5b50565b600081359050612edd81612eb7565b92915050565b600060208284031215612ef957612ef8612e0a565b5b6000612f0784828501612ece565b91505092915050565b612f1981612ead565b82525050565b6000602082019050612f346000830184612f10565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000819050919050565b6000612f7f612f7a612f7584612f3a565b612f5a565b612f3a565b9050919050565b6000612f9182612f64565b9050919050565b6000612fa382612f86565b9050919050565b612fb381612f98565b82525050565b6000602082019050612fce6000830184612faa565b92915050565b6000612fdf82612f86565b9050919050565b612fef81612fd4565b82525050565b600060208201905061300a6000830184612fe6565b92915050565b6000806040838503121561302757613026612e0a565b5b600061303585828601612e35565b925050602061304685828601612e35565b9150509250929050565b61305981612e14565b82525050565b60006020820190506130746000830184613050565b92915050565b6000806040838503121561309157613090612e0a565b5b600061309f85828601612ece565b92505060206130b085828601612ece565b9150509250929050565b60006040820190506130cf6000830185612f10565b6130dc6020830184612f10565b9392505050565b600080fd5b60006101c082840312156130ff576130fe6130e3565b5b81905092915050565b60006020828403121561311e5761311d612e0a565b5b600082013567ffffffffffffffff81111561313c5761313b612e0f565b5b613148848285016130e8565b91505092915050565b600060c08284031215613167576131666130e3565b5b81905092915050565b6000806040838503121561318757613186612e0a565b5b600083013567ffffffffffffffff8111156131a5576131a4612e0f565b5b6131b1858286016130e8565b925050602083013567ffffffffffffffff8111156131d2576131d1612e0f565b5b6131de85828601613151565b9150509250929050565b600381106131f557600080fd5b50565b600081359050613207816131e8565b92915050565b60008060006060848603121561322657613225612e0a565b5b6000613234868287016131f8565b935050602061324586828701612ece565b925050604061325686828701612ece565b9150509250925092565b600061326b82612f3a565b9050919050565b61327b81613260565b82525050565b61328a81612ead565b82525050565b6020820160008201516132a66000850182613281565b50505050565b60006fffffffffffffffffffffffffffffffff82169050919050565b6132d1816132ac565b82525050565b600064ffffffffff82169050919050565b6132f1816132d7565b82525050565b600061ffff82169050919050565b61330e816132f7565b82525050565b61331d81613260565b82525050565b6101e08201600082015161333a6000850182613290565b50602082015161334d60208501826132c8565b50604082015161336060408501826132c8565b50606082015161337360608501826132c8565b50608082015161338660808501826132c8565b5060a082015161339960a08501826132c8565b5060c08201516133ac60c08501826132e8565b5060e08201516133bf60e0850182613305565b506101008201516133d4610100850182613314565b506101208201516133e9610120850182613314565b506101408201516133fe610140850182613314565b50610160820151613413610160850182613314565b506101808201516134286101808501826132c8565b506101a082015161343d6101a08501826132c8565b506101c08201516134526101c08501826132c8565b50505050565b60006102208201905061346e6000830186613272565b61347b6020830185613323565b613489610200830184612f10565b949350505050565b600061349c82612f86565b9050919050565b6134ac81613491565b82525050565b60006020820190506134c760008301846134a3565b92915050565b60006134d882612f86565b9050919050565b6134e8816134cd565b82525050565b600060208201905061350360008301846134df565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b600061354382612ead565b915061354e83612ead565b92508261355e5761355d613509565b5b828206905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600060029050919050565b600081905092915050565b6000819050919050565b6135c181612e14565b82525050565b60006135d383836135b8565b60208301905092915050565b6000602082019050919050565b6135f581613598565b6135ff81846135a3565b925061360a826135ae565b8060005b8381101561363b57815161362287826135c7565b965061362d836135df565b92505060018101905061360e565b505050505050565b600060408201905061365860008301846135ec565b92915050565b60008151905061366d81612e1e565b92915050565b60006020828403121561368957613688612e0a565b5b60006136978482850161365e565b91505092915050565b6136a981613260565b81146136b457600080fd5b50565b6000815190506136c6816136a0565b92915050565b6000602082840312156136e2576136e1612e0a565b5b60006136f0848285016136b7565b91505092915050565b600060208201905061370e6000830184613272565b92915050565b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61376282613719565b810181811067ffffffffffffffff821117156137815761378061372a565b5b80604052505050565b6000613794612e00565b90506137a08282613759565b919050565b6000815190506137b481612eb7565b92915050565b6000602082840312156137d0576137cf613714565b5b6137da602061378a565b905060006137ea848285016137a5565b60008301525092915050565b6137ff816132ac565b811461380a57600080fd5b50565b60008151905061381c816137f6565b92915050565b61382b816132d7565b811461383657600080fd5b50565b60008151905061384881613822565b92915050565b613857816132f7565b811461386257600080fd5b50565b6000815190506138748161384e565b92915050565b60006101e0828403121561389157613890613714565b5b61389c6101e061378a565b905060006138ac848285016137ba565b60008301525060206138c08482850161380d565b60208301525060406138d48482850161380d565b60408301525060606138e88482850161380d565b60608301525060806138fc8482850161380d565b60808301525060a06139108482850161380d565b60a08301525060c061392484828501613839565b60c08301525060e061393884828501613865565b60e08301525061010061394d848285016136b7565b61010083015250610120613963848285016136b7565b61012083015250610140613979848285016136b7565b6101408301525061016061398f848285016136b7565b610160830152506101806139a58482850161380d565b610180830152506101a06139bb8482850161380d565b6101a0830152506101c06139d18482850161380d565b6101c08301525092915050565b60006101e082840312156139f5576139f4612e0a565b5b6000613a038482850161387a565b91505092915050565b600080fd5b600080fd5b600080fd5b60008083356001602003843603038112613a3857613a37613a0c565b5b80840192508235915067ffffffffffffffff821115613a5a57613a59613a11565b5b602083019250602082023603831315613a7657613a75613a16565b5b509250929050565b82818337505050565b613a9360408383613a7e565b5050565b600060029050919050565b600081905092915050565b6000819050919050565b613ac360408383613a7e565b5050565b6000613ad38383613ab7565b60408301905092915050565b600082905092915050565b6000604082019050919050565b613b0081613a97565b613b0a8184613aa2565b9250613b1582613aad565b8060005b83811015613b4e57613b2b8284613adf565b613b358782613ac7565b9650613b4083613aea565b925050600181019050613b19565b505050505050565b600060079050919050565b600081905092915050565b6000819050919050565b6000613b828383613281565b60208301905092915050565b6000602082019050919050565b613ba481613b56565b613bae8184613b61565b9250613bb982613b6c565b8060005b83811015613bea578151613bd18782613b76565b9650613bdc83613b8e565b925050600181019050613bbd565b505050505050565b60006101e082019050613c086000830187613a87565b613c156040830186613af7565b613c2260c0830185613a87565b613c30610100830184613b9b565b95945050505050565b613c4281612e77565b8114613c4d57600080fd5b50565b600081519050613c5f81613c39565b92915050565b600060208284031215613c7b57613c7a612e0a565b5b6000613c8984828501613c50565b91505092915050565b600060159050919050565b600081905092915050565b6000819050919050565b6000602082019050919050565b613cc881613c92565b613cd28184613c9d565b9250613cdd82613ca8565b8060005b83811015613d0e578151613cf58782613b76565b9650613d0083613cb2565b925050600181019050613ce1565b505050505050565b60006103a082019050613d2c6000830187613a87565b613d396040830186613af7565b613d4660c0830185613a87565b613d54610100830184613cbf565b95945050505050565b600082825260208201905092915050565b7f556e737570706f7274656420696e70757420636f756e74000000000000000000600082015250565b6000613da4601783613d5d565b9150613daf82613d6e565b602082019050919050565b60006020820190508181036000830152613dd381613d97565b9050919050565b6000604082019050613def6000830185613272565b613dfc6020830184612f10565b9392505050565b6000819050919050565b6000613e28613e23613e1e84613e03565b612f5a565b6132f7565b9050919050565b613e3881613e0d565b82525050565b6000608082019050613e536000830187613272565b613e606020830186612f10565b613e6d6040830185613272565b613e7a6060830184613e2f565b95945050505050565b600081359050613e92816136a0565b92915050565b600060208284031215613eae57613ead612e0a565b5b6000613ebc84828501613e83565b91505092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000613eff82612ead565b9150613f0a83612ead565b9250828201905080821115613f2257613f21613ec5565b5b92915050565b6000606082019050613f3d6000830186613272565b613f4a6020830185612f10565b613f576040830184613272565b949350505050565b600060208284031215613f7557613f74612e0a565b5b6000613f83848285016137a5565b91505092915050565b6000613f9782612ead565b915060008203613faa57613fa9613ec5565b5b600182039050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b7f45787420616d6f756e74206c657373207468616e207363616c65644665650000600082015250565b600061401a601e83613d5d565b915061402582613fe4565b602082019050919050565b600060208201905081810360008301526140498161400d565b9050919050565b600061405b82612ead565b915061406683612ead565b925082820390508181111561407e5761407d613ec5565b5b92915050565b7f496e76616c696420547854797065000000000000000000000000000000000000600082015250565b60006140ba600e83613d5d565b91506140c582614084565b602082019050919050565b600060208201905081810360008301526140e9816140ad565b9050919050565b60006140fb82612ead565b915061410683612ead565b925082820261411481612ead565b9150828204841483151761412b5761412a613ec5565b5b5092915050565b60006060820190506141476000830186613272565b6141546020830185613272565b6141616040830184612f10565b949350505050565b600061417482612ead565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036141a6576141a5613ec5565b5b600182019050919050565b60006141c06020840184613e83565b905092915050565b60006141d76020840184612ece565b905092915050565b600080fd5b600080fd5b600080fd5b6000808335600160200384360303811261420b5761420a6141e9565b5b83810192508235915060208301925067ffffffffffffffff821115614233576142326141df565b5b600182023603831315614249576142486141e4565b5b509250929050565b600082825260208201905092915050565b82818337600083830152505050565b600061427d8385614251565b935061428a838584614262565b61429383613719565b840190509392505050565b600060c083016142b160008401846141b1565b6142be6000860182613314565b506142cc60208401846141c8565b6142d96020860182613281565b506142e760408401846141b1565b6142f46040860182613314565b5061430260608401846141c8565b61430f6060860182613281565b5061431d60808401846141ee565b8583036080870152614330838284614271565b9250505061434160a08401846141ee565b85830360a0870152614354838284614271565b925050508091505092915050565b6000602082019050818103600083015261437c818461429e565b905092915050565b600061438f82612dc6565b915061439a83612dc6565b9250828203905063ffffffff8111156143b6576143b5613ec5565b5b92915050565b600080833560016020038436030381126143d9576143d8613a0c565b5b80840192508235915067ffffffffffffffff8211156143fb576143fa613a11565b5b60208301925060018202360383131561441757614416613a16565b5b509250929050565b600061443a61443561443084612dc6565b612f5a565b612ead565b9050919050565b61444a8161441f565b82525050565b600082825260208201905092915050565b600061446d8385614450565b935061447a838584614262565b61448383613719565b840190509392505050565b60006060820190506144a36000830187613050565b6144b06020830186614441565b81810360408301526144c3818486614461565b905095945050505050565b7f5361666545524332303a204552433230206f7065726174696f6e20646964206e60008201527f6f74207375636365656400000000000000000000000000000000000000000000602082015250565b600061452a602a83613d5d565b9150614535826144ce565b604082019050919050565b600060208201905081810360008301526145598161451d565b9050919050565b7f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00600082015250565b6000614596601f83613d5d565b91506145a182614560565b602082019050919050565b600060208201905081810360008301526145c581614589565b9050919050565b60008160011c9050919050565b6000808291508390505b6001851115614623578086048111156145ff576145fe613ec5565b5b600185161561460e5780820291505b808102905061461c856145cc565b94506145e3565b94509492505050565b60008261463c57600190506146f8565b8161464a57600090506146f8565b8160018114614660576002811461466a57614699565b60019150506146f8565b60ff84111561467c5761467b613ec5565b5b8360020a91508482111561469357614692613ec5565b5b506146f8565b5060208310610133831016604e8410600b84101617156146ce5782820a9050838111156146c9576146c8613ec5565b5b6146f8565b6146db84848460016145d9565b925090508184048111156146f2576146f1613ec5565b5b81810290505b9392505050565b600061470a82612ead565b915061471583612ead565b92506147427fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff848461462c565b905092915050565b600061475582612dc6565b915061476083612dc6565b9250826147705761476f613509565b5b828204905092915050565b600061478682612dc6565b915061479183612dc6565b9250826147a1576147a0613509565b5b828206905092915050565b60006147b782612dc6565b91506147c283612dc6565b9250828201905063ffffffff8111156147de576147dd613ec5565b5b92915050565b7f416464726573733a20696e73756666696369656e742062616c616e636520666f60008201527f722063616c6c0000000000000000000000000000000000000000000000000000602082015250565b6000614840602683613d5d565b915061484b826147e4565b604082019050919050565b6000602082019050818103600083015261486f81614833565b9050919050565b600081519050919050565b600081905092915050565b60005b838110156148aa57808201518184015260208101905061488f565b60008484015250505050565b60006148c182614876565b6148cb8185614881565b93506148db81856020860161488c565b80840191505092915050565b60006148f382846148b6565b915081905092915050565b7f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000600082015250565b6000614934601d83613d5d565b915061493f826148fe565b602082019050919050565b6000602082019050818103600083015261496381614927565b9050919050565b600081519050919050565b60006149808261496a565b61498a8185613d5d565b935061499a81856020860161488c565b6149a381613719565b840191505092915050565b600060208201905081810360008301526149c88184614975565b90509291505056fea2646970667358221220175a7fbe6fb4139ca530671fae68ff8d815f1cc68f0a28b215911ba76e4a28c164736f6c63430008110033",
  "devdoc": {
    "kind": "dev",
    "methods": {},
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 811,
        "contract": "contracts/Pool.sol:Pool",
        "label": "zeroes",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 815,
        "contract": "contracts/Pool.sol:Pool",
        "label": "filledSubtrees",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 819,
        "contract": "contracts/Pool.sol:Pool",
        "label": "roots",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_bytes32)"
      },
      {
        "astId": 821,
        "contract": "contracts/Pool.sol:Pool",
        "label": "currentRootIndex",
        "offset": 0,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 823,
        "contract": "contracts/Pool.sol:Pool",
        "label": "nextLeafIndex",
        "offset": 4,
        "slot": "3",
        "type": "t_uint32"
      },
      {
        "astId": 10,
        "contract": "contracts/Pool.sol:Pool",
        "label": "_status",
        "offset": 0,
        "slot": "4",
        "type": "t_uint256"
      },
      {
        "astId": 1199,
        "contract": "contracts/Pool.sol:Pool",
        "label": "maxSupplyAmount",
        "offset": 0,
        "slot": "5",
        "type": "t_uint256"
      },
      {
        "astId": 1203,
        "contract": "contracts/Pool.sol:Pool",
        "label": "nullifierHashes",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_bytes32,t_bool)"
      }
    ],
    "types": {
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_bytes32,t_bool)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_uint256,t_bytes32)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => bytes32)",
        "numberOfBytes": "32",
        "value": "t_bytes32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint32": {
        "encoding": "inplace",
        "label": "uint32",
        "numberOfBytes": "4"
      }
    }
  }
}